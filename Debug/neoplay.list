
neoplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08009658  08009658  00019658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096cc  080096cc  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  080096cc  080096cc  000196cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096d4  080096d4  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096d4  080096d4  000196d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096d8  080096d8  000196d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080096dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00001cac  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e2c  20001e2c  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b0f5  00000000  00000000  000201f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004186  00000000  00000000  0003b2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001950  00000000  00000000  0003f470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001386  00000000  00000000  00040dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000262fd  00000000  00000000  00042146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fd0d  00000000  00000000  00068443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d65c5  00000000  00000000  00088150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006b10  00000000  00000000  0015e718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  00165228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009640 	.word	0x08009640

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08009640 	.word	0x08009640

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004c8:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <HAL_Init+0x40>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <HAL_Init+0x40>)
 80004ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d4:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <HAL_Init+0x40>)
 80004da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a07      	ldr	r2, [pc, #28]	; (8000504 <HAL_Init+0x40>)
 80004e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ec:	2003      	movs	r0, #3
 80004ee:	f000 f94f 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 f808 	bl	8000508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f8:	f008 f9ae 	bl	8008858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004fc:	2300      	movs	r3, #0
}
 80004fe:	4618      	mov	r0, r3
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40023c00 	.word	0x40023c00

08000508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_InitTick+0x54>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x58>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4619      	mov	r1, r3
 800051a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000522:	fbb2 f3f3 	udiv	r3, r2, r3
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f967 	bl	80007fa <HAL_SYSTICK_Config>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000532:	2301      	movs	r3, #1
 8000534:	e00e      	b.n	8000554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b0f      	cmp	r3, #15
 800053a:	d80a      	bhi.n	8000552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800053c:	2200      	movs	r2, #0
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	f04f 30ff 	mov.w	r0, #4294967295
 8000544:	f000 f92f 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000548:	4a06      	ldr	r2, [pc, #24]	; (8000564 <HAL_InitTick+0x5c>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800054e:	2300      	movs	r3, #0
 8000550:	e000      	b.n	8000554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
}
 8000554:	4618      	mov	r0, r3
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000118 	.word	0x20000118
 8000560:	20000004 	.word	0x20000004
 8000564:	20000000 	.word	0x20000000

08000568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_IncTick+0x20>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x24>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4413      	add	r3, r2
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <HAL_IncTick+0x24>)
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000004 	.word	0x20000004
 800058c:	2000019c 	.word	0x2000019c

08000590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  return uwTick;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <HAL_GetTick+0x14>)
 8000596:	681b      	ldr	r3, [r3, #0]
}
 8000598:	4618      	mov	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	2000019c 	.word	0x2000019c

080005a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b0:	f7ff ffee 	bl	8000590 <HAL_GetTick>
 80005b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c0:	d005      	beq.n	80005ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <HAL_Delay+0x44>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	461a      	mov	r2, r3
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ce:	bf00      	nop
 80005d0:	f7ff ffde 	bl	8000590 <HAL_GetTick>
 80005d4:	4602      	mov	r2, r0
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d8f7      	bhi.n	80005d0 <HAL_Delay+0x28>
  {
  }
}
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff3e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff31 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa2 	bl	800074c <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
 800082e:	e16b      	b.n	8000b08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000830:	2201      	movs	r2, #1
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	429a      	cmp	r2, r3
 800084a:	f040 815a 	bne.w	8000b02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f003 0303 	and.w	r3, r3, #3
 8000856:	2b01      	cmp	r3, #1
 8000858:	d005      	beq.n	8000866 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000862:	2b02      	cmp	r3, #2
 8000864:	d130      	bne.n	80008c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2203      	movs	r2, #3
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4013      	ands	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	68da      	ldr	r2, [r3, #12]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	4313      	orrs	r3, r2
 800088e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800089c:	2201      	movs	r2, #1
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	43db      	mvns	r3, r3
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4013      	ands	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	f003 0201 	and.w	r2, r3, #1
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4313      	orrs	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f003 0303 	and.w	r3, r3, #3
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	d017      	beq.n	8000904 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	2203      	movs	r2, #3
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	43db      	mvns	r3, r3
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	4013      	ands	r3, r2
 80008ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	689a      	ldr	r2, [r3, #8]
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f003 0303 	and.w	r3, r3, #3
 800090c:	2b02      	cmp	r3, #2
 800090e:	d123      	bne.n	8000958 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	08da      	lsrs	r2, r3, #3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3208      	adds	r2, #8
 8000918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800091c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	f003 0307 	and.w	r3, r3, #7
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	220f      	movs	r2, #15
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4013      	ands	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	691a      	ldr	r2, [r3, #16]
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	4313      	orrs	r3, r2
 8000948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	08da      	lsrs	r2, r3, #3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3208      	adds	r2, #8
 8000952:	69b9      	ldr	r1, [r7, #24]
 8000954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	4013      	ands	r3, r2
 800096e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0203 	and.w	r2, r3, #3
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4313      	orrs	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80b4 	beq.w	8000b02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b60      	ldr	r3, [pc, #384]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a5f      	ldr	r2, [pc, #380]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b5d      	ldr	r3, [pc, #372]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b6:	4a5b      	ldr	r2, [pc, #364]	; (8000b24 <HAL_GPIO_Init+0x310>)
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3302      	adds	r3, #2
 80009be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	220f      	movs	r2, #15
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a52      	ldr	r2, [pc, #328]	; (8000b28 <HAL_GPIO_Init+0x314>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d02b      	beq.n	8000a3a <HAL_GPIO_Init+0x226>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a51      	ldr	r2, [pc, #324]	; (8000b2c <HAL_GPIO_Init+0x318>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d025      	beq.n	8000a36 <HAL_GPIO_Init+0x222>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a50      	ldr	r2, [pc, #320]	; (8000b30 <HAL_GPIO_Init+0x31c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d01f      	beq.n	8000a32 <HAL_GPIO_Init+0x21e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4f      	ldr	r2, [pc, #316]	; (8000b34 <HAL_GPIO_Init+0x320>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d019      	beq.n	8000a2e <HAL_GPIO_Init+0x21a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4e      	ldr	r2, [pc, #312]	; (8000b38 <HAL_GPIO_Init+0x324>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d013      	beq.n	8000a2a <HAL_GPIO_Init+0x216>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4d      	ldr	r2, [pc, #308]	; (8000b3c <HAL_GPIO_Init+0x328>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d00d      	beq.n	8000a26 <HAL_GPIO_Init+0x212>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4c      	ldr	r2, [pc, #304]	; (8000b40 <HAL_GPIO_Init+0x32c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d007      	beq.n	8000a22 <HAL_GPIO_Init+0x20e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4b      	ldr	r2, [pc, #300]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_GPIO_Init+0x20a>
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	e00e      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a1e:	2308      	movs	r3, #8
 8000a20:	e00c      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a22:	2306      	movs	r3, #6
 8000a24:	e00a      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a26:	2305      	movs	r3, #5
 8000a28:	e008      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	e006      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2e:	2303      	movs	r3, #3
 8000a30:	e004      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a32:	2302      	movs	r3, #2
 8000a34:	e002      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	69fa      	ldr	r2, [r7, #28]
 8000a3e:	f002 0203 	and.w	r2, r2, #3
 8000a42:	0092      	lsls	r2, r2, #2
 8000a44:	4093      	lsls	r3, r2
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a4c:	4935      	ldr	r1, [pc, #212]	; (8000b24 <HAL_GPIO_Init+0x310>)
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	3302      	adds	r3, #2
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a5a:	4b3b      	ldr	r3, [pc, #236]	; (8000b48 <HAL_GPIO_Init+0x334>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	4013      	ands	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a7e:	4a32      	ldr	r2, [pc, #200]	; (8000b48 <HAL_GPIO_Init+0x334>)
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a84:	4b30      	ldr	r3, [pc, #192]	; (8000b48 <HAL_GPIO_Init+0x334>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	4013      	ands	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aa8:	4a27      	ldr	r2, [pc, #156]	; (8000b48 <HAL_GPIO_Init+0x334>)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aae:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <HAL_GPIO_Init+0x334>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ad2:	4a1d      	ldr	r2, [pc, #116]	; (8000b48 <HAL_GPIO_Init+0x334>)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <HAL_GPIO_Init+0x334>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000afc:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <HAL_GPIO_Init+0x334>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3301      	adds	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	f67f ae90 	bls.w	8000830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3724      	adds	r7, #36	; 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40013800 	.word	0x40013800
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40020800 	.word	0x40020800
 8000b34:	40020c00 	.word	0x40020c00
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40021400 	.word	0x40021400
 8000b40:	40021800 	.word	0x40021800
 8000b44:	40021c00 	.word	0x40021c00
 8000b48:	40013c00 	.word	0x40013c00

08000b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	807b      	strh	r3, [r7, #2]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b5c:	787b      	ldrb	r3, [r7, #1]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b62:	887a      	ldrh	r2, [r7, #2]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b68:	e003      	b.n	8000b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b6a:	887b      	ldrh	r3, [r7, #2]
 8000b6c:	041a      	lsls	r2, r3, #16
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	619a      	str	r2, [r3, #24]
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b085      	sub	sp, #20
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b90:	887a      	ldrh	r2, [r7, #2]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4013      	ands	r3, r2
 8000b96:	041a      	lsls	r2, r3, #16
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	400b      	ands	r3, r1
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	619a      	str	r2, [r3, #24]
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e12b      	b.n	8000e1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d106      	bne.n	8000be0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f007 fe64 	bl	80088a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2224      	movs	r2, #36	; 0x24
 8000be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f022 0201 	bic.w	r2, r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c18:	f001 ff04 	bl	8002a24 <HAL_RCC_GetPCLK1Freq>
 8000c1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	4a81      	ldr	r2, [pc, #516]	; (8000e28 <HAL_I2C_Init+0x274>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d807      	bhi.n	8000c38 <HAL_I2C_Init+0x84>
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4a80      	ldr	r2, [pc, #512]	; (8000e2c <HAL_I2C_Init+0x278>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	bf94      	ite	ls
 8000c30:	2301      	movls	r3, #1
 8000c32:	2300      	movhi	r3, #0
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	e006      	b.n	8000c46 <HAL_I2C_Init+0x92>
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4a7d      	ldr	r2, [pc, #500]	; (8000e30 <HAL_I2C_Init+0x27c>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	bf94      	ite	ls
 8000c40:	2301      	movls	r3, #1
 8000c42:	2300      	movhi	r3, #0
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e0e7      	b.n	8000e1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4a78      	ldr	r2, [pc, #480]	; (8000e34 <HAL_I2C_Init+0x280>)
 8000c52:	fba2 2303 	umull	r2, r3, r2, r3
 8000c56:	0c9b      	lsrs	r3, r3, #18
 8000c58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6a1b      	ldr	r3, [r3, #32]
 8000c74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	4a6a      	ldr	r2, [pc, #424]	; (8000e28 <HAL_I2C_Init+0x274>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d802      	bhi.n	8000c88 <HAL_I2C_Init+0xd4>
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	3301      	adds	r3, #1
 8000c86:	e009      	b.n	8000c9c <HAL_I2C_Init+0xe8>
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c8e:	fb02 f303 	mul.w	r3, r2, r3
 8000c92:	4a69      	ldr	r2, [pc, #420]	; (8000e38 <HAL_I2C_Init+0x284>)
 8000c94:	fba2 2303 	umull	r2, r3, r2, r3
 8000c98:	099b      	lsrs	r3, r3, #6
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	6812      	ldr	r2, [r2, #0]
 8000ca0:	430b      	orrs	r3, r1
 8000ca2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000cae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	495c      	ldr	r1, [pc, #368]	; (8000e28 <HAL_I2C_Init+0x274>)
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d819      	bhi.n	8000cf0 <HAL_I2C_Init+0x13c>
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	1e59      	subs	r1, r3, #1
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cca:	1c59      	adds	r1, r3, #1
 8000ccc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000cd0:	400b      	ands	r3, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00a      	beq.n	8000cec <HAL_I2C_Init+0x138>
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	1e59      	subs	r1, r3, #1
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cea:	e051      	b.n	8000d90 <HAL_I2C_Init+0x1dc>
 8000cec:	2304      	movs	r3, #4
 8000cee:	e04f      	b.n	8000d90 <HAL_I2C_Init+0x1dc>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d111      	bne.n	8000d1c <HAL_I2C_Init+0x168>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1e58      	subs	r0, r3, #1
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6859      	ldr	r1, [r3, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	440b      	add	r3, r1
 8000d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	bf0c      	ite	eq
 8000d14:	2301      	moveq	r3, #1
 8000d16:	2300      	movne	r3, #0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	e012      	b.n	8000d42 <HAL_I2C_Init+0x18e>
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1e58      	subs	r0, r3, #1
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6859      	ldr	r1, [r3, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	440b      	add	r3, r1
 8000d2a:	0099      	lsls	r1, r3, #2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d32:	3301      	adds	r3, #1
 8000d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	bf0c      	ite	eq
 8000d3c:	2301      	moveq	r3, #1
 8000d3e:	2300      	movne	r3, #0
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_I2C_Init+0x196>
 8000d46:	2301      	movs	r3, #1
 8000d48:	e022      	b.n	8000d90 <HAL_I2C_Init+0x1dc>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10e      	bne.n	8000d70 <HAL_I2C_Init+0x1bc>
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	1e58      	subs	r0, r3, #1
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6859      	ldr	r1, [r3, #4]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	440b      	add	r3, r1
 8000d60:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d64:	3301      	adds	r3, #1
 8000d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d6e:	e00f      	b.n	8000d90 <HAL_I2C_Init+0x1dc>
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	1e58      	subs	r0, r3, #1
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6859      	ldr	r1, [r3, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	0099      	lsls	r1, r3, #2
 8000d80:	440b      	add	r3, r1
 8000d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d86:	3301      	adds	r3, #1
 8000d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	6809      	ldr	r1, [r1, #0]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69da      	ldr	r2, [r3, #28]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	431a      	orrs	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000dbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	6911      	ldr	r1, [r2, #16]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68d2      	ldr	r2, [r2, #12]
 8000dca:	4311      	orrs	r1, r2
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	6812      	ldr	r2, [r2, #0]
 8000dd0:	430b      	orrs	r3, r1
 8000dd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	695a      	ldr	r2, [r3, #20]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0201 	orr.w	r2, r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2220      	movs	r2, #32
 8000e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	000186a0 	.word	0x000186a0
 8000e2c:	001e847f 	.word	0x001e847f
 8000e30:	003d08ff 	.word	0x003d08ff
 8000e34:	431bde83 	.word	0x431bde83
 8000e38:	10624dd3 	.word	0x10624dd3

08000e3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e3e:	b08f      	sub	sp, #60	; 0x3c
 8000e40:	af0a      	add	r7, sp, #40	; 0x28
 8000e42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e10f      	b.n	800106e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d106      	bne.n	8000e6e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f007 ff6f 	bl	8008d4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2203      	movs	r2, #3
 8000e72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d102      	bne.n	8000e88 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 f998 	bl	80051c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	687e      	ldr	r6, [r7, #4]
 8000e9a:	466d      	mov	r5, sp
 8000e9c:	f106 0410 	add.w	r4, r6, #16
 8000ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ea8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000eac:	e885 0003 	stmia.w	r5, {r0, r1}
 8000eb0:	1d33      	adds	r3, r6, #4
 8000eb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eb4:	6838      	ldr	r0, [r7, #0]
 8000eb6:	f004 f86f 	bl	8004f98 <USB_CoreInit>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d005      	beq.n	8000ecc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e0d0      	b.n	800106e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f004 f986 	bl	80051e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e04a      	b.n	8000f74 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ede:	7bfa      	ldrb	r2, [r7, #15]
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	1a9b      	subs	r3, r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	333d      	adds	r3, #61	; 0x3d
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	333c      	adds	r3, #60	; 0x3c
 8000f02:	7bfa      	ldrb	r2, [r7, #15]
 8000f04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	b298      	uxth	r0, r3
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	3342      	adds	r3, #66	; 0x42
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	1a9b      	subs	r3, r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	333f      	adds	r3, #63	; 0x3f
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	3344      	adds	r3, #68	; 0x44
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	1a9b      	subs	r3, r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	3348      	adds	r3, #72	; 0x48
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	1a9b      	subs	r3, r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	3350      	adds	r3, #80	; 0x50
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	3301      	adds	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
 8000f74:	7bfa      	ldrb	r2, [r7, #15]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d3af      	bcc.n	8000ede <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	e044      	b.n	800100e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	1a9b      	subs	r3, r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000fac:	7bfa      	ldrb	r2, [r7, #15]
 8000fae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	1a9b      	subs	r3, r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	1a9b      	subs	r3, r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	1a9b      	subs	r3, r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	440b      	add	r3, r1
 8001000:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	3301      	adds	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	d3b5      	bcc.n	8000f84 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	687e      	ldr	r6, [r7, #4]
 8001020:	466d      	mov	r5, sp
 8001022:	f106 0410 	add.w	r4, r6, #16
 8001026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800102a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800102c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800102e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001032:	e885 0003 	stmia.w	r5, {r0, r1}
 8001036:	1d33      	adds	r3, r6, #4
 8001038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800103a:	6838      	ldr	r0, [r7, #0]
 800103c:	f004 f91e 	bl	800527c <USB_DevInit>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d005      	beq.n	8001052 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2202      	movs	r2, #2
 800104a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e00d      	b.n	800106e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f005 f99a 	bl	80063a0 <USB_DevDisconnect>

  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001076 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b084      	sub	sp, #16
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <HAL_PCD_Start+0x1c>
 800108e:	2302      	movs	r3, #2
 8001090:	e020      	b.n	80010d4 <HAL_PCD_Start+0x5e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d109      	bne.n	80010b6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d005      	beq.n	80010b6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f004 f870 	bl	80051a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f005 f94a 	bl	800635e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b08d      	sub	sp, #52	; 0x34
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f005 fa08 	bl	8006508 <USB_GetMode>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f040 839d 	bne.w	800183a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f005 f96c 	bl	80063e2 <USB_ReadInterrupts>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 8393 	beq.w	8001838 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f005 f963 	bl	80063e2 <USB_ReadInterrupts>
 800111c:	4603      	mov	r3, r0
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b02      	cmp	r3, #2
 8001124:	d107      	bne.n	8001136 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	695a      	ldr	r2, [r3, #20]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f002 0202 	and.w	r2, r2, #2
 8001134:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f005 f951 	bl	80063e2 <USB_ReadInterrupts>
 8001140:	4603      	mov	r3, r0
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	2b10      	cmp	r3, #16
 8001148:	d161      	bne.n	800120e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	699a      	ldr	r2, [r3, #24]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f022 0210 	bic.w	r2, r2, #16
 8001158:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	f003 020f 	and.w	r2, r3, #15
 8001166:	4613      	mov	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	1a9b      	subs	r3, r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	3304      	adds	r3, #4
 8001178:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	0c5b      	lsrs	r3, r3, #17
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	2b02      	cmp	r3, #2
 8001184:	d124      	bne.n	80011d0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800118c:	4013      	ands	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d035      	beq.n	80011fe <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800119c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	461a      	mov	r2, r3
 80011a4:	6a38      	ldr	r0, [r7, #32]
 80011a6:	f004 ff88 	bl	80060ba <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011b6:	441a      	add	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	699a      	ldr	r2, [r3, #24]
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011c8:	441a      	add	r2, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	619a      	str	r2, [r3, #24]
 80011ce:	e016      	b.n	80011fe <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	0c5b      	lsrs	r3, r3, #17
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	2b06      	cmp	r3, #6
 80011da:	d110      	bne.n	80011fe <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80011e2:	2208      	movs	r2, #8
 80011e4:	4619      	mov	r1, r3
 80011e6:	6a38      	ldr	r0, [r7, #32]
 80011e8:	f004 ff67 	bl	80060ba <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	699a      	ldr	r2, [r3, #24]
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011f8:	441a      	add	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	699a      	ldr	r2, [r3, #24]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 0210 	orr.w	r2, r2, #16
 800120c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f005 f8e5 	bl	80063e2 <USB_ReadInterrupts>
 8001218:	4603      	mov	r3, r0
 800121a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800121e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001222:	d16e      	bne.n	8001302 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f005 f8eb 	bl	8006408 <USB_ReadDevAllOutEpInterrupt>
 8001232:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001234:	e062      	b.n	80012fc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d057      	beq.n	80012f0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f005 f910 	bl	8006470 <USB_ReadDevOutEPInterrupt>
 8001250:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00c      	beq.n	8001276 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	015a      	lsls	r2, r3, #5
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	4413      	add	r3, r2
 8001264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001268:	461a      	mov	r2, r3
 800126a:	2301      	movs	r3, #1
 800126c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800126e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 fdb1 	bl	8001dd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00c      	beq.n	800129a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	015a      	lsls	r2, r3, #5
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	4413      	add	r3, r2
 8001288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800128c:	461a      	mov	r2, r3
 800128e:	2308      	movs	r3, #8
 8001290:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 feab 	bl	8001ff0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d008      	beq.n	80012b6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	015a      	lsls	r2, r3, #5
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	4413      	add	r3, r2
 80012ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012b0:	461a      	mov	r2, r3
 80012b2:	2310      	movs	r3, #16
 80012b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	f003 0320 	and.w	r3, r3, #32
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d008      	beq.n	80012d2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	015a      	lsls	r2, r3, #5
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	4413      	add	r3, r2
 80012c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012cc:	461a      	mov	r2, r3
 80012ce:	2320      	movs	r3, #32
 80012d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d009      	beq.n	80012f0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	015a      	lsls	r2, r3, #5
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	4413      	add	r3, r2
 80012e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012e8:	461a      	mov	r2, r3
 80012ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	3301      	adds	r3, #1
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	085b      	lsrs	r3, r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80012fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d199      	bne.n	8001236 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f005 f86b 	bl	80063e2 <USB_ReadInterrupts>
 800130c:	4603      	mov	r3, r0
 800130e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001312:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001316:	f040 80c0 	bne.w	800149a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f005 f88c 	bl	800643c <USB_ReadDevAllInEpInterrupt>
 8001324:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800132a:	e0b2      	b.n	8001492 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800132c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 80a7 	beq.w	8001486 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f005 f8b2 	bl	80064ac <USB_ReadDevInEPInterrupt>
 8001348:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d057      	beq.n	8001404 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	2201      	movs	r2, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43db      	mvns	r3, r3
 800136e:	69f9      	ldr	r1, [r7, #28]
 8001370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001374:	4013      	ands	r3, r2
 8001376:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	015a      	lsls	r2, r3, #5
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	4413      	add	r3, r2
 8001380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001384:	461a      	mov	r2, r3
 8001386:	2301      	movs	r3, #1
 8001388:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d132      	bne.n	80013f8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001396:	4613      	mov	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	440b      	add	r3, r1
 80013a0:	3348      	adds	r3, #72	; 0x48
 80013a2:	6819      	ldr	r1, [r3, #0]
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a8:	4613      	mov	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4403      	add	r3, r0
 80013b2:	3344      	adds	r3, #68	; 0x44
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4419      	add	r1, r3
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013bc:	4613      	mov	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4403      	add	r3, r0
 80013c6:	3348      	adds	r3, #72	; 0x48
 80013c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d113      	bne.n	80013f8 <HAL_PCD_IRQHandler+0x31c>
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d4:	4613      	mov	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	1a9b      	subs	r3, r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	3350      	adds	r3, #80	; 0x50
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d108      	bne.n	80013f8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80013f0:	461a      	mov	r2, r3
 80013f2:	2101      	movs	r1, #1
 80013f4:	f005 f8ba 	bl	800656c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4619      	mov	r1, r3
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f007 fd25 	bl	8008e4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	2b00      	cmp	r3, #0
 800140c:	d008      	beq.n	8001420 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	015a      	lsls	r2, r3, #5
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	4413      	add	r3, r2
 8001416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800141a:	461a      	mov	r2, r3
 800141c:	2308      	movs	r3, #8
 800141e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	2b00      	cmp	r3, #0
 8001428:	d008      	beq.n	800143c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	015a      	lsls	r2, r3, #5
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	4413      	add	r3, r2
 8001432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001436:	461a      	mov	r2, r3
 8001438:	2310      	movs	r3, #16
 800143a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001442:	2b00      	cmp	r3, #0
 8001444:	d008      	beq.n	8001458 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	015a      	lsls	r2, r3, #5
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	4413      	add	r3, r2
 800144e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001452:	461a      	mov	r2, r3
 8001454:	2340      	movs	r3, #64	; 0x40
 8001456:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d008      	beq.n	8001474 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	015a      	lsls	r2, r3, #5
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	4413      	add	r3, r2
 800146a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800146e:	461a      	mov	r2, r3
 8001470:	2302      	movs	r3, #2
 8001472:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800147e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fc1b 	bl	8001cbc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	3301      	adds	r3, #1
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001494:	2b00      	cmp	r3, #0
 8001496:	f47f af49 	bne.w	800132c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f004 ff9f 	bl	80063e2 <USB_ReadInterrupts>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014ae:	d122      	bne.n	80014f6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d108      	bne.n	80014e0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014d6:	2100      	movs	r1, #0
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 fe27 	bl	800212c <HAL_PCDEx_LPM_Callback>
 80014de:	e002      	b.n	80014e6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f007 fd2b 	bl	8008f3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80014f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f004 ff71 	bl	80063e2 <USB_ReadInterrupts>
 8001500:	4603      	mov	r3, r0
 8001502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800150a:	d112      	bne.n	8001532 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d102      	bne.n	8001522 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f007 fce7 	bl	8008ef0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	695a      	ldr	r2, [r3, #20]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001530:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f004 ff53 	bl	80063e2 <USB_ReadInterrupts>
 800153c:	4603      	mov	r3, r0
 800153e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001546:	f040 80c7 	bne.w	80016d8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2110      	movs	r1, #16
 8001564:	4618      	mov	r0, r3
 8001566:	f003 ffed 	bl	8005544 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156a:	2300      	movs	r3, #0
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156e:	e056      	b.n	800161e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001572:	015a      	lsls	r2, r3, #5
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	4413      	add	r3, r2
 8001578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800157c:	461a      	mov	r2, r3
 800157e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001582:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001586:	015a      	lsls	r2, r3, #5
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	4413      	add	r3, r2
 800158c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001594:	0151      	lsls	r1, r2, #5
 8001596:	69fa      	ldr	r2, [r7, #28]
 8001598:	440a      	add	r2, r1
 800159a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800159e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015a2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	015a      	lsls	r2, r3, #5
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	4413      	add	r3, r2
 80015ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b4:	0151      	lsls	r1, r2, #5
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	440a      	add	r2, r1
 80015ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015d0:	461a      	mov	r2, r3
 80015d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80015d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015da:	015a      	lsls	r2, r3, #5
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	4413      	add	r3, r2
 80015e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e8:	0151      	lsls	r1, r2, #5
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	440a      	add	r2, r1
 80015ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80015f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80015f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fa:	015a      	lsls	r2, r3, #5
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	4413      	add	r3, r2
 8001600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001608:	0151      	lsls	r1, r2, #5
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	440a      	add	r2, r1
 800160e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001612:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001616:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161a:	3301      	adds	r3, #1
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001624:	429a      	cmp	r2, r3
 8001626:	d3a3      	bcc.n	8001570 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001636:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800163a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	2b00      	cmp	r3, #0
 8001642:	d016      	beq.n	8001672 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800164a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001654:	f043 030b 	orr.w	r3, r3, #11
 8001658:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	69fa      	ldr	r2, [r7, #28]
 8001666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800166a:	f043 030b 	orr.w	r3, r3, #11
 800166e:	6453      	str	r3, [r2, #68]	; 0x44
 8001670:	e015      	b.n	800169e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001680:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001684:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001688:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001698:	f043 030b 	orr.w	r3, r3, #11
 800169c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016b0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016c2:	461a      	mov	r2, r3
 80016c4:	f004 ff52 	bl	800656c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f004 fe80 	bl	80063e2 <USB_ReadInterrupts>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016ec:	d124      	bne.n	8001738 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f004 ff16 	bl	8006524 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 ff7e 	bl	80055fe <USB_GetDevSpeed>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681c      	ldr	r4, [r3, #0]
 800170e:	f001 f97d 	bl	8002a0c <HAL_RCC_GetHCLKFreq>
 8001712:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001718:	b2db      	uxtb	r3, r3
 800171a:	461a      	mov	r2, r3
 800171c:	4620      	mov	r0, r4
 800171e:	f003 fc9d 	bl	800505c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f007 fbbb 	bl	8008e9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001736:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f004 fe50 	bl	80063e2 <USB_ReadInterrupts>
 8001742:	4603      	mov	r3, r0
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b08      	cmp	r3, #8
 800174a:	d10a      	bne.n	8001762 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f007 fb98 	bl	8008e82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f002 0208 	and.w	r2, r2, #8
 8001760:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f004 fe3b 	bl	80063e2 <USB_ReadInterrupts>
 800176c:	4603      	mov	r3, r0
 800176e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001776:	d10f      	bne.n	8001798 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4619      	mov	r1, r3
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f007 fbfa 	bl	8008f7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001796:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f004 fe20 	bl	80063e2 <USB_ReadInterrupts>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017ac:	d10f      	bne.n	80017ce <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	4619      	mov	r1, r3
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f007 fbcd 	bl	8008f58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	695a      	ldr	r2, [r3, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80017cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 fe05 	bl	80063e2 <USB_ReadInterrupts>
 80017d8:	4603      	mov	r3, r0
 80017da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e2:	d10a      	bne.n	80017fa <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f007 fbdb 	bl	8008fa0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	695a      	ldr	r2, [r3, #20]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80017f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 fdef 	bl	80063e2 <USB_ReadInterrupts>
 8001804:	4603      	mov	r3, r0
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	2b04      	cmp	r3, #4
 800180c:	d115      	bne.n	800183a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f007 fbcb 	bl	8008fbc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	430a      	orrs	r2, r1
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	e000      	b.n	800183a <HAL_PCD_IRQHandler+0x75e>
      return;
 8001838:	bf00      	nop
    }
  }
}
 800183a:	3734      	adds	r7, #52	; 0x34
 800183c:	46bd      	mov	sp, r7
 800183e:	bd90      	pop	{r4, r7, pc}

08001840 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_PCD_SetAddress+0x1a>
 8001856:	2302      	movs	r3, #2
 8001858:	e013      	b.n	8001882 <HAL_PCD_SetAddress+0x42>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	78fa      	ldrb	r2, [r7, #3]
 8001866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f004 fd4d 	bl	8006312 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	4608      	mov	r0, r1
 8001894:	4611      	mov	r1, r2
 8001896:	461a      	mov	r2, r3
 8001898:	4603      	mov	r3, r0
 800189a:	70fb      	strb	r3, [r7, #3]
 800189c:	460b      	mov	r3, r1
 800189e:	803b      	strh	r3, [r7, #0]
 80018a0:	4613      	mov	r3, r2
 80018a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	da0f      	bge.n	80018d0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	f003 020f 	and.w	r2, r3, #15
 80018b6:	4613      	mov	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	3338      	adds	r3, #56	; 0x38
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	3304      	adds	r3, #4
 80018c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2201      	movs	r2, #1
 80018cc:	705a      	strb	r2, [r3, #1]
 80018ce:	e00f      	b.n	80018f0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	f003 020f 	and.w	r2, r3, #15
 80018d6:	4613      	mov	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	3304      	adds	r3, #4
 80018e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018fc:	883a      	ldrh	r2, [r7, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	78ba      	ldrb	r2, [r7, #2]
 8001906:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	785b      	ldrb	r3, [r3, #1]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800191a:	78bb      	ldrb	r3, [r7, #2]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d102      	bne.n	8001926 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_PCD_EP_Open+0xaa>
 8001930:	2302      	movs	r3, #2
 8001932:	e00e      	b.n	8001952 <HAL_PCD_EP_Open+0xc8>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68f9      	ldr	r1, [r7, #12]
 8001942:	4618      	mov	r0, r3
 8001944:	f003 fe80 	bl	8005648 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001950:	7afb      	ldrb	r3, [r7, #11]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	460b      	mov	r3, r1
 8001964:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001966:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800196a:	2b00      	cmp	r3, #0
 800196c:	da0f      	bge.n	800198e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	f003 020f 	and.w	r2, r3, #15
 8001974:	4613      	mov	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	3338      	adds	r3, #56	; 0x38
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	3304      	adds	r3, #4
 8001984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2201      	movs	r2, #1
 800198a:	705a      	strb	r2, [r3, #1]
 800198c:	e00f      	b.n	80019ae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	f003 020f 	and.w	r2, r3, #15
 8001994:	4613      	mov	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4413      	add	r3, r2
 80019a4:	3304      	adds	r3, #4
 80019a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_PCD_EP_Close+0x6e>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e00e      	b.n	80019e6 <HAL_PCD_EP_Close+0x8c>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68f9      	ldr	r1, [r7, #12]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 febe 	bl	8005758 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	460b      	mov	r3, r1
 80019fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019fe:	7afb      	ldrb	r3, [r7, #11]
 8001a00:	f003 020f 	and.w	r2, r3, #15
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	3304      	adds	r3, #4
 8001a16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a30:	7afb      	ldrb	r3, [r7, #11]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d102      	bne.n	8001a4a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a4a:	7afb      	ldrb	r3, [r7, #11]
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d109      	bne.n	8001a68 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	461a      	mov	r2, r3
 8001a60:	6979      	ldr	r1, [r7, #20]
 8001a62:	f004 f999 	bl	8005d98 <USB_EP0StartXfer>
 8001a66:	e008      	b.n	8001a7a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	6979      	ldr	r1, [r7, #20]
 8001a76:	f003 ff4b 	bl	8005910 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	f003 020f 	and.w	r2, r3, #15
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac4:	7afb      	ldrb	r3, [r7, #11]
 8001ac6:	f003 020f 	and.w	r2, r3, #15
 8001aca:	4613      	mov	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	1a9b      	subs	r3, r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	3338      	adds	r3, #56	; 0x38
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3304      	adds	r3, #4
 8001ada:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2201      	movs	r2, #1
 8001af2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001af4:	7afb      	ldrb	r3, [r7, #11]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d102      	bne.n	8001b0e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d109      	bne.n	8001b2c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	6979      	ldr	r1, [r7, #20]
 8001b26:	f004 f937 	bl	8005d98 <USB_EP0StartXfer>
 8001b2a:	e008      	b.n	8001b3e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	6979      	ldr	r1, [r7, #20]
 8001b3a:	f003 fee9 	bl	8005910 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	f003 020f 	and.w	r2, r3, #15
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d901      	bls.n	8001b66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e050      	b.n	8001c08 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	da0f      	bge.n	8001b8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	f003 020f 	and.w	r2, r3, #15
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	3338      	adds	r3, #56	; 0x38
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	3304      	adds	r3, #4
 8001b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	705a      	strb	r2, [r3, #1]
 8001b8c:	e00d      	b.n	8001baa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b8e:	78fa      	ldrb	r2, [r7, #3]
 8001b90:	4613      	mov	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	1a9b      	subs	r3, r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2201      	movs	r2, #1
 8001bae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_PCD_EP_SetStall+0x82>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e01e      	b.n	8001c08 <HAL_PCD_EP_SetStall+0xc0>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68f9      	ldr	r1, [r7, #12]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f004 fac6 	bl	800616a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10a      	bne.n	8001bfe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	b2d9      	uxtb	r1, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f004 fcb7 	bl	800656c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	f003 020f 	and.w	r2, r3, #15
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d901      	bls.n	8001c2e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e042      	b.n	8001cb4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	da0f      	bge.n	8001c56 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	f003 020f 	and.w	r2, r3, #15
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	1a9b      	subs	r3, r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	3338      	adds	r3, #56	; 0x38
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	705a      	strb	r2, [r3, #1]
 8001c54:	e00f      	b.n	8001c76 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	f003 020f 	and.w	r2, r3, #15
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	1a9b      	subs	r3, r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_PCD_EP_ClrStall+0x86>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e00e      	b.n	8001cb4 <HAL_PCD_EP_ClrStall+0xa4>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68f9      	ldr	r1, [r7, #12]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f004 face 	bl	8006246 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	3338      	adds	r3, #56	; 0x38
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	699a      	ldr	r2, [r3, #24]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d901      	bls.n	8001cf4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e06c      	b.n	8001dce <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d902      	bls.n	8001d10 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	3303      	adds	r3, #3
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d18:	e02b      	b.n	8001d72 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d902      	bls.n	8001d36 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3303      	adds	r3, #3
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	68d9      	ldr	r1, [r3, #12]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	4603      	mov	r3, r0
 8001d54:	6978      	ldr	r0, [r7, #20]
 8001d56:	f004 f972 	bl	800603e <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	441a      	add	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	699a      	ldr	r2, [r3, #24]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	441a      	add	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d809      	bhi.n	8001d9c <PCD_WriteEmptyTxFifo+0xe0>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d203      	bcs.n	8001d9c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1be      	bne.n	8001d1a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d811      	bhi.n	8001dcc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	2201      	movs	r2, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	6939      	ldr	r1, [r7, #16]
 8001dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001dc8:	4013      	ands	r3, r2
 8001dca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3720      	adds	r7, #32
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	333c      	adds	r3, #60	; 0x3c
 8001df0:	3304      	adds	r3, #4
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	f040 80a0 	bne.w	8001f50 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d015      	beq.n	8001e46 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4a72      	ldr	r2, [pc, #456]	; (8001fe8 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	f240 80dd 	bls.w	8001fde <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80d7 	beq.w	8001fde <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	015a      	lsls	r2, r3, #5
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e42:	6093      	str	r3, [r2, #8]
 8001e44:	e0cb      	b.n	8001fde <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d009      	beq.n	8001e64 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2320      	movs	r3, #32
 8001e60:	6093      	str	r3, [r2, #8]
 8001e62:	e0bc      	b.n	8001fde <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 80b7 	bne.w	8001fde <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4a5d      	ldr	r2, [pc, #372]	; (8001fe8 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d90f      	bls.n	8001e98 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e8e:	461a      	mov	r2, r3
 8001e90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e94:	6093      	str	r3, [r2, #8]
 8001e96:	e0a2      	b.n	8001fde <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001eaa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	0159      	lsls	r1, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001ebe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4403      	add	r3, r0
 8001ece:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001ed2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ee6:	6819      	ldr	r1, [r3, #0]
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4403      	add	r3, r0
 8001ef6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4419      	add	r1, r3
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4403      	add	r3, r0
 8001f0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f10:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d114      	bne.n	8001f42 <PCD_EP_OutXfrComplete_int+0x16a>
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d108      	bne.n	8001f42 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	f004 fb15 	bl	800656c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	4619      	mov	r1, r3
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f006 ff65 	bl	8008e18 <HAL_PCD_DataOutStageCallback>
 8001f4e:	e046      	b.n	8001fde <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4a26      	ldr	r2, [pc, #152]	; (8001fec <PCD_EP_OutXfrComplete_int+0x214>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d124      	bne.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f74:	6093      	str	r3, [r2, #8]
 8001f76:	e032      	b.n	8001fde <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d008      	beq.n	8001f94 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f8e:	461a      	mov	r2, r3
 8001f90:	2320      	movs	r3, #32
 8001f92:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f006 ff3c 	bl	8008e18 <HAL_PCD_DataOutStageCallback>
 8001fa0:	e01d      	b.n	8001fde <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d114      	bne.n	8001fd2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d108      	bne.n	8001fd2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fca:	461a      	mov	r2, r3
 8001fcc:	2100      	movs	r1, #0
 8001fce:	f004 facd 	bl	800656c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f006 ff1d 	bl	8008e18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	4f54300a 	.word	0x4f54300a
 8001fec:	4f54310a 	.word	0x4f54310a

08001ff0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	333c      	adds	r3, #60	; 0x3c
 8002008:	3304      	adds	r3, #4
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4413      	add	r3, r2
 8002016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4a15      	ldr	r2, [pc, #84]	; (8002078 <PCD_EP_OutSetupPacket_int+0x88>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d90e      	bls.n	8002044 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800202c:	2b00      	cmp	r3, #0
 800202e:	d009      	beq.n	8002044 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	015a      	lsls	r2, r3, #5
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4413      	add	r3, r2
 8002038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800203c:	461a      	mov	r2, r3
 800203e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002042:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f006 fed5 	bl	8008df4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <PCD_EP_OutSetupPacket_int+0x88>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d90c      	bls.n	800206c <PCD_EP_OutSetupPacket_int+0x7c>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d108      	bne.n	800206c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002064:	461a      	mov	r2, r3
 8002066:	2101      	movs	r1, #1
 8002068:	f004 fa80 	bl	800656c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	4f54300a 	.word	0x4f54300a

0800207c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	70fb      	strb	r3, [r7, #3]
 8002088:	4613      	mov	r3, r2
 800208a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d107      	bne.n	80020aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800209a:	883b      	ldrh	r3, [r7, #0]
 800209c:	0419      	lsls	r1, r3, #16
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28
 80020a8:	e028      	b.n	80020fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	0c1b      	lsrs	r3, r3, #16
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	4413      	add	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	e00d      	b.n	80020da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	3340      	adds	r3, #64	; 0x40
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	4413      	add	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	3301      	adds	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	3b01      	subs	r3, #1
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d3ec      	bcc.n	80020be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80020e4:	883b      	ldrh	r3, [r7, #0]
 80020e6:	0418      	lsls	r0, r3, #16
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6819      	ldr	r1, [r3, #0]
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	4302      	orrs	r2, r0
 80020f4:	3340      	adds	r3, #64	; 0x40
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	460b      	mov	r3, r1
 8002114:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e267      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d075      	beq.n	800224e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002162:	4b88      	ldr	r3, [pc, #544]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b04      	cmp	r3, #4
 800216c:	d00c      	beq.n	8002188 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800216e:	4b85      	ldr	r3, [pc, #532]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002176:	2b08      	cmp	r3, #8
 8002178:	d112      	bne.n	80021a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217a:	4b82      	ldr	r3, [pc, #520]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002186:	d10b      	bne.n	80021a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	4b7e      	ldr	r3, [pc, #504]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d05b      	beq.n	800224c <HAL_RCC_OscConfig+0x108>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d157      	bne.n	800224c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e242      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a8:	d106      	bne.n	80021b8 <HAL_RCC_OscConfig+0x74>
 80021aa:	4b76      	ldr	r3, [pc, #472]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a75      	ldr	r2, [pc, #468]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e01d      	b.n	80021f4 <HAL_RCC_OscConfig+0xb0>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x98>
 80021c2:	4b70      	ldr	r3, [pc, #448]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a6f      	ldr	r2, [pc, #444]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 80021c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b6d      	ldr	r3, [pc, #436]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a6c      	ldr	r2, [pc, #432]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e00b      	b.n	80021f4 <HAL_RCC_OscConfig+0xb0>
 80021dc:	4b69      	ldr	r3, [pc, #420]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a68      	ldr	r2, [pc, #416]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 80021e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b66      	ldr	r3, [pc, #408]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a65      	ldr	r2, [pc, #404]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 80021ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7fe f9c8 	bl	8000590 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002204:	f7fe f9c4 	bl	8000590 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e207      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b5b      	ldr	r3, [pc, #364]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0xc0>
 8002222:	e014      	b.n	800224e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7fe f9b4 	bl	8000590 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800222c:	f7fe f9b0 	bl	8000590 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e1f3      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	4b51      	ldr	r3, [pc, #324]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0xe8>
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d063      	beq.n	8002322 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800225a:	4b4a      	ldr	r3, [pc, #296]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002266:	4b47      	ldr	r3, [pc, #284]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800226e:	2b08      	cmp	r3, #8
 8002270:	d11c      	bne.n	80022ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002272:	4b44      	ldr	r3, [pc, #272]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d116      	bne.n	80022ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227e:	4b41      	ldr	r3, [pc, #260]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_RCC_OscConfig+0x152>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e1c7      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002296:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4937      	ldr	r1, [pc, #220]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022aa:	e03a      	b.n	8002322 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d020      	beq.n	80022f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b4:	4b34      	ldr	r3, [pc, #208]	; (8002388 <HAL_RCC_OscConfig+0x244>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ba:	f7fe f969 	bl	8000590 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c2:	f7fe f965 	bl	8000590 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e1a8      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d4:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e0:	4b28      	ldr	r3, [pc, #160]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4925      	ldr	r1, [pc, #148]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	600b      	str	r3, [r1, #0]
 80022f4:	e015      	b.n	8002322 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f6:	4b24      	ldr	r3, [pc, #144]	; (8002388 <HAL_RCC_OscConfig+0x244>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe f948 	bl	8000590 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002304:	f7fe f944 	bl	8000590 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e187      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002316:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d036      	beq.n	800239c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d016      	beq.n	8002364 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_RCC_OscConfig+0x248>)
 8002338:	2201      	movs	r2, #1
 800233a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233c:	f7fe f928 	bl	8000590 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002344:	f7fe f924 	bl	8000590 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e167      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCC_OscConfig+0x240>)
 8002358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x200>
 8002362:	e01b      	b.n	800239c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_RCC_OscConfig+0x248>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236a:	f7fe f911 	bl	8000590 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002370:	e00e      	b.n	8002390 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002372:	f7fe f90d 	bl	8000590 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d907      	bls.n	8002390 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e150      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
 8002384:	40023800 	.word	0x40023800
 8002388:	42470000 	.word	0x42470000
 800238c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002390:	4b88      	ldr	r3, [pc, #544]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1ea      	bne.n	8002372 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8097 	beq.w	80024d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ae:	4b81      	ldr	r3, [pc, #516]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10f      	bne.n	80023da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	4b7d      	ldr	r3, [pc, #500]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a7c      	ldr	r2, [pc, #496]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ca:	4b7a      	ldr	r3, [pc, #488]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d6:	2301      	movs	r3, #1
 80023d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b77      	ldr	r3, [pc, #476]	; (80025b8 <HAL_RCC_OscConfig+0x474>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d118      	bne.n	8002418 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e6:	4b74      	ldr	r3, [pc, #464]	; (80025b8 <HAL_RCC_OscConfig+0x474>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a73      	ldr	r2, [pc, #460]	; (80025b8 <HAL_RCC_OscConfig+0x474>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f2:	f7fe f8cd 	bl	8000590 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fa:	f7fe f8c9 	bl	8000590 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e10c      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	4b6a      	ldr	r3, [pc, #424]	; (80025b8 <HAL_RCC_OscConfig+0x474>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x2ea>
 8002420:	4b64      	ldr	r3, [pc, #400]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	4a63      	ldr	r2, [pc, #396]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6713      	str	r3, [r2, #112]	; 0x70
 800242c:	e01c      	b.n	8002468 <HAL_RCC_OscConfig+0x324>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b05      	cmp	r3, #5
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x30c>
 8002436:	4b5f      	ldr	r3, [pc, #380]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	4a5e      	ldr	r2, [pc, #376]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	6713      	str	r3, [r2, #112]	; 0x70
 8002442:	4b5c      	ldr	r3, [pc, #368]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	4a5b      	ldr	r2, [pc, #364]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6713      	str	r3, [r2, #112]	; 0x70
 800244e:	e00b      	b.n	8002468 <HAL_RCC_OscConfig+0x324>
 8002450:	4b58      	ldr	r3, [pc, #352]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	4a57      	ldr	r2, [pc, #348]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	6713      	str	r3, [r2, #112]	; 0x70
 800245c:	4b55      	ldr	r3, [pc, #340]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	4a54      	ldr	r2, [pc, #336]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002462:	f023 0304 	bic.w	r3, r3, #4
 8002466:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d015      	beq.n	800249c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002470:	f7fe f88e 	bl	8000590 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002476:	e00a      	b.n	800248e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002478:	f7fe f88a 	bl	8000590 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	; 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e0cb      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248e:	4b49      	ldr	r3, [pc, #292]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0ee      	beq.n	8002478 <HAL_RCC_OscConfig+0x334>
 800249a:	e014      	b.n	80024c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249c:	f7fe f878 	bl	8000590 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a2:	e00a      	b.n	80024ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a4:	f7fe f874 	bl	8000590 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e0b5      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ba:	4b3e      	ldr	r3, [pc, #248]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1ee      	bne.n	80024a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c6:	7dfb      	ldrb	r3, [r7, #23]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d105      	bne.n	80024d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024cc:	4b39      	ldr	r3, [pc, #228]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	4a38      	ldr	r2, [pc, #224]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 80024d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80a1 	beq.w	8002624 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024e2:	4b34      	ldr	r3, [pc, #208]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d05c      	beq.n	80025a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d141      	bne.n	800257a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f6:	4b31      	ldr	r3, [pc, #196]	; (80025bc <HAL_RCC_OscConfig+0x478>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7fe f848 	bl	8000590 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe f844 	bl	8000590 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e087      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002516:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69da      	ldr	r2, [r3, #28]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	019b      	lsls	r3, r3, #6
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	3b01      	subs	r3, #1
 800253c:	041b      	lsls	r3, r3, #16
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	061b      	lsls	r3, r3, #24
 8002546:	491b      	ldr	r1, [pc, #108]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_RCC_OscConfig+0x478>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7fe f81d 	bl	8000590 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255a:	f7fe f819 	bl	8000590 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e05c      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x416>
 8002578:	e054      	b.n	8002624 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_RCC_OscConfig+0x478>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe f806 	bl	8000590 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002588:	f7fe f802 	bl	8000590 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e045      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_RCC_OscConfig+0x470>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x444>
 80025a6:	e03d      	b.n	8002624 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d107      	bne.n	80025c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e038      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40007000 	.word	0x40007000
 80025bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_RCC_OscConfig+0x4ec>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d028      	beq.n	8002620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d121      	bne.n	8002620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d11a      	bne.n	8002620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025f0:	4013      	ands	r3, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d111      	bne.n	8002620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	3b01      	subs	r3, #1
 800260a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d107      	bne.n	8002620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800

08002634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0cc      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002648:	4b68      	ldr	r3, [pc, #416]	; (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d90c      	bls.n	8002670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b65      	ldr	r3, [pc, #404]	; (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b63      	ldr	r3, [pc, #396]	; (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0b8      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002688:	4b59      	ldr	r3, [pc, #356]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a58      	ldr	r2, [pc, #352]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002692:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a0:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4a52      	ldr	r2, [pc, #328]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ac:	4b50      	ldr	r3, [pc, #320]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	494d      	ldr	r1, [pc, #308]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d044      	beq.n	8002754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d119      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e07f      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d003      	beq.n	80026f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f2:	4b3f      	ldr	r3, [pc, #252]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e06f      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002702:	4b3b      	ldr	r3, [pc, #236]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e067      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002712:	4b37      	ldr	r3, [pc, #220]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f023 0203 	bic.w	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4934      	ldr	r1, [pc, #208]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	4313      	orrs	r3, r2
 8002722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002724:	f7fd ff34 	bl	8000590 <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	e00a      	b.n	8002742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272c:	f7fd ff30 	bl	8000590 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e04f      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	4b2b      	ldr	r3, [pc, #172]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 020c 	and.w	r2, r3, #12
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	429a      	cmp	r2, r3
 8002752:	d1eb      	bne.n	800272c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002754:	4b25      	ldr	r3, [pc, #148]	; (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d20c      	bcs.n	800277c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b22      	ldr	r3, [pc, #136]	; (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e032      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4916      	ldr	r1, [pc, #88]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	490e      	ldr	r1, [pc, #56]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ba:	f000 f821 	bl	8002800 <HAL_RCC_GetSysClockFreq>
 80027be:	4602      	mov	r2, r0
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	490a      	ldr	r1, [pc, #40]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 80027cc:	5ccb      	ldrb	r3, [r1, r3]
 80027ce:	fa22 f303 	lsr.w	r3, r2, r3
 80027d2:	4a09      	ldr	r2, [pc, #36]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fd fe94 	bl	8000508 <HAL_InitTick>

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023c00 	.word	0x40023c00
 80027f0:	40023800 	.word	0x40023800
 80027f4:	080096b4 	.word	0x080096b4
 80027f8:	20000118 	.word	0x20000118
 80027fc:	20000000 	.word	0x20000000

08002800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002804:	b094      	sub	sp, #80	; 0x50
 8002806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	647b      	str	r3, [r7, #68]	; 0x44
 800280c:	2300      	movs	r3, #0
 800280e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002810:	2300      	movs	r3, #0
 8002812:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002818:	4b79      	ldr	r3, [pc, #484]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b08      	cmp	r3, #8
 8002822:	d00d      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x40>
 8002824:	2b08      	cmp	r3, #8
 8002826:	f200 80e1 	bhi.w	80029ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x34>
 800282e:	2b04      	cmp	r3, #4
 8002830:	d003      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0x3a>
 8002832:	e0db      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002834:	4b73      	ldr	r3, [pc, #460]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002836:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002838:	e0db      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800283a:	4b73      	ldr	r3, [pc, #460]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x208>)
 800283c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800283e:	e0d8      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002840:	4b6f      	ldr	r3, [pc, #444]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002848:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800284a:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d063      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002856:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	099b      	lsrs	r3, r3, #6
 800285c:	2200      	movs	r2, #0
 800285e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002860:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
 800286a:	2300      	movs	r3, #0
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
 800286e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002872:	4622      	mov	r2, r4
 8002874:	462b      	mov	r3, r5
 8002876:	f04f 0000 	mov.w	r0, #0
 800287a:	f04f 0100 	mov.w	r1, #0
 800287e:	0159      	lsls	r1, r3, #5
 8002880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002884:	0150      	lsls	r0, r2, #5
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4621      	mov	r1, r4
 800288c:	1a51      	subs	r1, r2, r1
 800288e:	6139      	str	r1, [r7, #16]
 8002890:	4629      	mov	r1, r5
 8002892:	eb63 0301 	sbc.w	r3, r3, r1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028a4:	4659      	mov	r1, fp
 80028a6:	018b      	lsls	r3, r1, #6
 80028a8:	4651      	mov	r1, sl
 80028aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ae:	4651      	mov	r1, sl
 80028b0:	018a      	lsls	r2, r1, #6
 80028b2:	4651      	mov	r1, sl
 80028b4:	ebb2 0801 	subs.w	r8, r2, r1
 80028b8:	4659      	mov	r1, fp
 80028ba:	eb63 0901 	sbc.w	r9, r3, r1
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028d2:	4690      	mov	r8, r2
 80028d4:	4699      	mov	r9, r3
 80028d6:	4623      	mov	r3, r4
 80028d8:	eb18 0303 	adds.w	r3, r8, r3
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	462b      	mov	r3, r5
 80028e0:	eb49 0303 	adc.w	r3, r9, r3
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028f2:	4629      	mov	r1, r5
 80028f4:	024b      	lsls	r3, r1, #9
 80028f6:	4621      	mov	r1, r4
 80028f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028fc:	4621      	mov	r1, r4
 80028fe:	024a      	lsls	r2, r1, #9
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002906:	2200      	movs	r2, #0
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
 800290a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800290c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002910:	f7fd fc5a 	bl	80001c8 <__aeabi_uldivmod>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4613      	mov	r3, r2
 800291a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800291c:	e058      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291e:	4b38      	ldr	r3, [pc, #224]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	099b      	lsrs	r3, r3, #6
 8002924:	2200      	movs	r2, #0
 8002926:	4618      	mov	r0, r3
 8002928:	4611      	mov	r1, r2
 800292a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800292e:	623b      	str	r3, [r7, #32]
 8002930:	2300      	movs	r3, #0
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
 8002934:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002938:	4642      	mov	r2, r8
 800293a:	464b      	mov	r3, r9
 800293c:	f04f 0000 	mov.w	r0, #0
 8002940:	f04f 0100 	mov.w	r1, #0
 8002944:	0159      	lsls	r1, r3, #5
 8002946:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800294a:	0150      	lsls	r0, r2, #5
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4641      	mov	r1, r8
 8002952:	ebb2 0a01 	subs.w	sl, r2, r1
 8002956:	4649      	mov	r1, r9
 8002958:	eb63 0b01 	sbc.w	fp, r3, r1
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002968:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800296c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002970:	ebb2 040a 	subs.w	r4, r2, sl
 8002974:	eb63 050b 	sbc.w	r5, r3, fp
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	00eb      	lsls	r3, r5, #3
 8002982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002986:	00e2      	lsls	r2, r4, #3
 8002988:	4614      	mov	r4, r2
 800298a:	461d      	mov	r5, r3
 800298c:	4643      	mov	r3, r8
 800298e:	18e3      	adds	r3, r4, r3
 8002990:	603b      	str	r3, [r7, #0]
 8002992:	464b      	mov	r3, r9
 8002994:	eb45 0303 	adc.w	r3, r5, r3
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029a6:	4629      	mov	r1, r5
 80029a8:	028b      	lsls	r3, r1, #10
 80029aa:	4621      	mov	r1, r4
 80029ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029b0:	4621      	mov	r1, r4
 80029b2:	028a      	lsls	r2, r1, #10
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ba:	2200      	movs	r2, #0
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	61fa      	str	r2, [r7, #28]
 80029c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029c4:	f7fd fc00 	bl	80001c8 <__aeabi_uldivmod>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4613      	mov	r3, r2
 80029ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	3301      	adds	r3, #1
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80029e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029ea:	e002      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x204>)
 80029ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3750      	adds	r7, #80	; 0x50
 80029f8:	46bd      	mov	sp, r7
 80029fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	00f42400 	.word	0x00f42400
 8002a08:	007a1200 	.word	0x007a1200

08002a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a10:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a12:	681b      	ldr	r3, [r3, #0]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20000118 	.word	0x20000118

08002a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a28:	f7ff fff0 	bl	8002a0c <HAL_RCC_GetHCLKFreq>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	0a9b      	lsrs	r3, r3, #10
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	4903      	ldr	r1, [pc, #12]	; (8002a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a3a:	5ccb      	ldrb	r3, [r1, r3]
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40023800 	.word	0x40023800
 8002a48:	080096c4 	.word	0x080096c4

08002a4c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e022      	b.n	8002aa4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f005 ff61 	bl	8008938 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2203      	movs	r2, #3
 8002a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f814 	bl	8002aac <HAL_SD_InitCard>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00a      	b.n	8002aa4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002aac:	b5b0      	push	{r4, r5, r7, lr}
 8002aae:	b08e      	sub	sp, #56	; 0x38
 8002ab0:	af04      	add	r7, sp, #16
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002ac8:	2376      	movs	r3, #118	; 0x76
 8002aca:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681d      	ldr	r5, [r3, #0]
 8002ad0:	466c      	mov	r4, sp
 8002ad2:	f107 0314 	add.w	r3, r7, #20
 8002ad6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ada:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ade:	f107 0308 	add.w	r3, r7, #8
 8002ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae4:	4628      	mov	r0, r5
 8002ae6:	f001 fce3 	bl	80044b0 <SDIO_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e04c      	b.n	8002b96 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002afc:	4b28      	ldr	r3, [pc, #160]	; (8002ba0 <HAL_SD_InitCard+0xf4>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 fd1b 	bl	8004542 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002b0c:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <HAL_SD_InitCard+0xf4>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 ff04 	bl	8003920 <SD_PowerON>
 8002b18:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00b      	beq.n	8002b38 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e02e      	b.n	8002b96 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fe23 	bl	8003784 <SD_InitCard>
 8002b3e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00b      	beq.n	8002b5e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e01b      	b.n	8002b96 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 fd7e 	bl	8004668 <SDMMC_CmdBlockLength>
 8002b6c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00f      	beq.n	8002b94 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <HAL_SD_InitCard+0xf8>)
 8002b7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3728      	adds	r7, #40	; 0x28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	422580a0 	.word	0x422580a0
 8002ba4:	004005ff 	.word	0x004005ff

08002ba8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b092      	sub	sp, #72	; 0x48
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002bb6:	f7fd fceb 	bl	8000590 <HAL_GetTick>
 8002bba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d107      	bne.n	8002bda <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e1bd      	b.n	8002f56 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	f040 81b0 	bne.w	8002f48 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	441a      	add	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d907      	bls.n	8002c0c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c00:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e1a4      	b.n	8002f56 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2203      	movs	r2, #3
 8002c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d002      	beq.n	8002c2a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c26:	025b      	lsls	r3, r3, #9
 8002c28:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	025b      	lsls	r3, r3, #9
 8002c34:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002c36:	2390      	movs	r3, #144	; 0x90
 8002c38:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002c42:	2301      	movs	r3, #1
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f107 0214 	add.w	r2, r7, #20
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f001 fcdd 	bl	8004610 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d90a      	bls.n	8002c72 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f001 fd41 	bl	80046f0 <SDMMC_CmdReadMultiBlock>
 8002c6e:	6478      	str	r0, [r7, #68]	; 0x44
 8002c70:	e009      	b.n	8002c86 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f001 fd14 	bl	80046ac <SDMMC_CmdReadSingleBlock>
 8002c84:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d012      	beq.n	8002cb2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a7a      	ldr	r2, [pc, #488]	; (8002e7c <HAL_SD_ReadBlocks+0x2d4>)
 8002c92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e151      	b.n	8002f56 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002cb6:	e061      	b.n	8002d7c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d03c      	beq.n	8002d40 <HAL_SD_ReadBlocks+0x198>
 8002cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d039      	beq.n	8002d40 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	643b      	str	r3, [r7, #64]	; 0x40
 8002cd0:	e033      	b.n	8002d3a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 fc15 	bl	8004506 <SDIO_ReadFIFO>
 8002cdc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce8:	3301      	adds	r3, #1
 8002cea:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	0a1b      	lsrs	r3, r3, #8
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfe:	3301      	adds	r3, #1
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d04:	3b01      	subs	r3, #1
 8002d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0a:	0c1b      	lsrs	r3, r3, #16
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d14:	3301      	adds	r3, #1
 8002d16:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d20:	0e1b      	lsrs	r3, r3, #24
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d26:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d30:	3b01      	subs	r3, #1
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d36:	3301      	adds	r3, #1
 8002d38:	643b      	str	r3, [r7, #64]	; 0x40
 8002d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d3c:	2b07      	cmp	r3, #7
 8002d3e:	d9c8      	bls.n	8002cd2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002d40:	f7fd fc26 	bl	8000590 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d902      	bls.n	8002d56 <HAL_SD_ReadBlocks+0x1ae>
 8002d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d112      	bne.n	8002d7c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a48      	ldr	r2, [pc, #288]	; (8002e7c <HAL_SD_ReadBlocks+0x2d4>)
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e0ec      	b.n	8002f56 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d82:	f240 332a 	movw	r3, #810	; 0x32a
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d095      	beq.n	8002cb8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d022      	beq.n	8002de0 <HAL_SD_ReadBlocks+0x238>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d91f      	bls.n	8002de0 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d01b      	beq.n	8002de0 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f001 fd05 	bl	80047bc <SDMMC_CmdStopTransfer>
 8002db2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d012      	beq.n	8002de0 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a2f      	ldr	r2, [pc, #188]	; (8002e7c <HAL_SD_ReadBlocks+0x2d4>)
 8002dc0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0ba      	b.n	8002f56 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d012      	beq.n	8002e14 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <HAL_SD_ReadBlocks+0x2d4>)
 8002df4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	f043 0208 	orr.w	r2, r3, #8
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0a0      	b.n	8002f56 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d012      	beq.n	8002e48 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <HAL_SD_ReadBlocks+0x2d4>)
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	f043 0202 	orr.w	r2, r3, #2
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e086      	b.n	8002f56 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d063      	beq.n	8002f1e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <HAL_SD_ReadBlocks+0x2d4>)
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	f043 0220 	orr.w	r2, r3, #32
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e06c      	b.n	8002f56 <HAL_SD_ReadBlocks+0x3ae>
 8002e7c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 fb3e 	bl	8004506 <SDIO_ReadFIFO>
 8002e8a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e92:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e96:	3301      	adds	r3, #1
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	3301      	adds	r3, #1
 8002eae:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	0c1b      	lsrs	r3, r3, #16
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ece:	0e1b      	lsrs	r3, r3, #24
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed8:	3301      	adds	r3, #1
 8002eda:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002ee2:	f7fd fb55 	bl	8000590 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d902      	bls.n	8002ef8 <HAL_SD_ReadBlocks+0x350>
 8002ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d112      	bne.n	8002f1e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <HAL_SD_ReadBlocks+0x3b8>)
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e01b      	b.n	8002f56 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_SD_ReadBlocks+0x38a>
 8002f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1a6      	bne.n	8002e80 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f240 523a 	movw	r2, #1338	; 0x53a
 8002f3a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e006      	b.n	8002f56 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3748      	adds	r7, #72	; 0x48
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	004005ff 	.word	0x004005ff

08002f64 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b092      	sub	sp, #72	; 0x48
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002f72:	f7fd fb0d 	bl	8000590 <HAL_GetTick>
 8002f76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d107      	bne.n	8002f96 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e166      	b.n	8003264 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	f040 8159 	bne.w	8003256 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	441a      	add	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d907      	bls.n	8002fc8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e14d      	b.n	8003264 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2203      	movs	r2, #3
 8002fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d002      	beq.n	8002fe6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	025b      	lsls	r3, r3, #9
 8002fe4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	025b      	lsls	r3, r3, #9
 8002ff0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002ff2:	2390      	movs	r3, #144	; 0x90
 8002ff4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002ffe:	2301      	movs	r3, #1
 8003000:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f107 0218 	add.w	r2, r7, #24
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f001 faff 	bl	8004610 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d90a      	bls.n	800302e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003024:	4618      	mov	r0, r3
 8003026:	f001 fba7 	bl	8004778 <SDMMC_CmdWriteMultiBlock>
 800302a:	6478      	str	r0, [r7, #68]	; 0x44
 800302c:	e009      	b.n	8003042 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2210      	movs	r2, #16
 8003032:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800303a:	4618      	mov	r0, r3
 800303c:	f001 fb7a 	bl	8004734 <SDMMC_CmdWriteSingleBlock>
 8003040:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003044:	2b00      	cmp	r3, #0
 8003046:	d012      	beq.n	800306e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a87      	ldr	r2, [pc, #540]	; (800326c <HAL_SD_WriteBlocks+0x308>)
 800304e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003056:	431a      	orrs	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0fa      	b.n	8003264 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003072:	e065      	b.n	8003140 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d040      	beq.n	8003104 <HAL_SD_WriteBlocks+0x1a0>
 8003082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003084:	2b00      	cmp	r3, #0
 8003086:	d03d      	beq.n	8003104 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003088:	2300      	movs	r3, #0
 800308a:	643b      	str	r3, [r7, #64]	; 0x40
 800308c:	e037      	b.n	80030fe <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003096:	3301      	adds	r3, #1
 8003098:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800309a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309c:	3b01      	subs	r3, #1
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80030a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	021a      	lsls	r2, r3, #8
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80030ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ae:	3301      	adds	r3, #1
 80030b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80030b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b4:	3b01      	subs	r3, #1
 80030b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80030b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	041a      	lsls	r2, r3, #16
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80030c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c6:	3301      	adds	r3, #1
 80030c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80030ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030cc:	3b01      	subs	r3, #1
 80030ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80030d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	061a      	lsls	r2, r3, #24
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80030dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030de:	3301      	adds	r3, #1
 80030e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80030e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e4:	3b01      	subs	r3, #1
 80030e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f107 0214 	add.w	r2, r7, #20
 80030f0:	4611      	mov	r1, r2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f001 fa14 	bl	8004520 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80030f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030fa:	3301      	adds	r3, #1
 80030fc:	643b      	str	r3, [r7, #64]	; 0x40
 80030fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003100:	2b07      	cmp	r3, #7
 8003102:	d9c4      	bls.n	800308e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003104:	f7fd fa44 	bl	8000590 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003110:	429a      	cmp	r2, r3
 8003112:	d902      	bls.n	800311a <HAL_SD_WriteBlocks+0x1b6>
 8003114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003116:	2b00      	cmp	r3, #0
 8003118:	d112      	bne.n	8003140 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a53      	ldr	r2, [pc, #332]	; (800326c <HAL_SD_WriteBlocks+0x308>)
 8003120:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003128:	431a      	orrs	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e091      	b.n	8003264 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003146:	f240 331a 	movw	r3, #794	; 0x31a
 800314a:	4013      	ands	r3, r2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d091      	beq.n	8003074 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d022      	beq.n	80031a4 <HAL_SD_WriteBlocks+0x240>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d91f      	bls.n	80031a4 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	2b03      	cmp	r3, #3
 800316a:	d01b      	beq.n	80031a4 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f001 fb23 	bl	80047bc <SDMMC_CmdStopTransfer>
 8003176:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800317a:	2b00      	cmp	r3, #0
 800317c:	d012      	beq.n	80031a4 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a3a      	ldr	r2, [pc, #232]	; (800326c <HAL_SD_WriteBlocks+0x308>)
 8003184:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800318a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800318c:	431a      	orrs	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e05f      	b.n	8003264 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d012      	beq.n	80031d8 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2d      	ldr	r2, [pc, #180]	; (800326c <HAL_SD_WriteBlocks+0x308>)
 80031b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	f043 0208 	orr.w	r2, r3, #8
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e045      	b.n	8003264 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d012      	beq.n	800320c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a20      	ldr	r2, [pc, #128]	; (800326c <HAL_SD_WriteBlocks+0x308>)
 80031ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	f043 0202 	orr.w	r2, r3, #2
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e02b      	b.n	8003264 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2b00      	cmp	r3, #0
 8003218:	d012      	beq.n	8003240 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a13      	ldr	r2, [pc, #76]	; (800326c <HAL_SD_WriteBlocks+0x308>)
 8003220:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	f043 0210 	orr.w	r2, r3, #16
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e011      	b.n	8003264 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f240 523a 	movw	r2, #1338	; 0x53a
 8003248:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e006      	b.n	8003264 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
  }
}
 8003264:	4618      	mov	r0, r3
 8003266:	3748      	adds	r7, #72	; 0x48
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	004005ff 	.word	0x004005ff

08003270 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800327e:	0f9b      	lsrs	r3, r3, #30
 8003280:	b2da      	uxtb	r2, r3
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800328a:	0e9b      	lsrs	r3, r3, #26
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	b2da      	uxtb	r2, r3
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800329c:	0e1b      	lsrs	r3, r3, #24
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ae:	0c1b      	lsrs	r3, r3, #16
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d0:	0d1b      	lsrs	r3, r3, #20
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032dc:	0c1b      	lsrs	r3, r3, #16
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ee:	0bdb      	lsrs	r3, r3, #15
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003300:	0b9b      	lsrs	r3, r3, #14
 8003302:	b2db      	uxtb	r3, r3
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	b2da      	uxtb	r2, r3
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003312:	0b5b      	lsrs	r3, r3, #13
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	b2da      	uxtb	r2, r3
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003324:	0b1b      	lsrs	r3, r3, #12
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	b2da      	uxtb	r2, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2200      	movs	r2, #0
 8003336:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	2b00      	cmp	r3, #0
 800333e:	d163      	bne.n	8003408 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003344:	009a      	lsls	r2, r3, #2
 8003346:	f640 73fc 	movw	r3, #4092	; 0xffc
 800334a:	4013      	ands	r3, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003350:	0f92      	lsrs	r2, r2, #30
 8003352:	431a      	orrs	r2, r3
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800335c:	0edb      	lsrs	r3, r3, #27
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	b2da      	uxtb	r2, r3
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800336e:	0e1b      	lsrs	r3, r3, #24
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	b2da      	uxtb	r2, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003380:	0d5b      	lsrs	r3, r3, #21
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	b2da      	uxtb	r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003392:	0c9b      	lsrs	r3, r3, #18
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	b2da      	uxtb	r2, r3
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a4:	0bdb      	lsrs	r3, r3, #15
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	7e1b      	ldrb	r3, [r3, #24]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	3302      	adds	r3, #2
 80033c8:	2201      	movs	r2, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80033d2:	fb03 f202 	mul.w	r2, r3, r2
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	7a1b      	ldrb	r3, [r3, #8]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	2201      	movs	r2, #1
 80033e6:	409a      	lsls	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80033f4:	0a52      	lsrs	r2, r2, #9
 80033f6:	fb03 f202 	mul.w	r2, r3, r2
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003404:	661a      	str	r2, [r3, #96]	; 0x60
 8003406:	e031      	b.n	800346c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340c:	2b01      	cmp	r3, #1
 800340e:	d11d      	bne.n	800344c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341e:	0c1b      	lsrs	r3, r3, #16
 8003420:	431a      	orrs	r2, r3
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	3301      	adds	r3, #1
 800342c:	029a      	lsls	r2, r3, #10
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003440:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	661a      	str	r2, [r3, #96]	; 0x60
 800344a:	e00f      	b.n	800346c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a58      	ldr	r2, [pc, #352]	; (80035b4 <HAL_SD_GetCardCSD+0x344>)
 8003452:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e09d      	b.n	80035a8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003470:	0b9b      	lsrs	r3, r3, #14
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	b2da      	uxtb	r2, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003482:	09db      	lsrs	r3, r3, #7
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800348a:	b2da      	uxtb	r2, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800349a:	b2da      	uxtb	r2, r3
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	0fdb      	lsrs	r3, r3, #31
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	0f5b      	lsrs	r3, r3, #29
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	0e9b      	lsrs	r3, r3, #26
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	0d9b      	lsrs	r3, r3, #22
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	0d5b      	lsrs	r3, r3, #21
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	0c1b      	lsrs	r3, r3, #16
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	b2da      	uxtb	r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	0bdb      	lsrs	r3, r3, #15
 8003518:	b2db      	uxtb	r3, r3
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	b2da      	uxtb	r2, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	0b9b      	lsrs	r3, r3, #14
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	b2da      	uxtb	r2, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	0b5b      	lsrs	r3, r3, #13
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	b2da      	uxtb	r2, r3
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	0b1b      	lsrs	r3, r3, #12
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	b2da      	uxtb	r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003566:	0a9b      	lsrs	r3, r3, #10
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	b2da      	uxtb	r2, r3
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	b2da      	uxtb	r2, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	085b      	lsrs	r3, r3, #1
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003596:	b2da      	uxtb	r2, r3
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	004005ff 	.word	0x004005ff

080035b8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003610:	b5b0      	push	{r4, r5, r7, lr}
 8003612:	b08e      	sub	sp, #56	; 0x38
 8003614:	af04      	add	r7, sp, #16
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2203      	movs	r2, #3
 8003624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362c:	2b03      	cmp	r3, #3
 800362e:	d02e      	beq.n	800368e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003636:	d106      	bne.n	8003646 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	639a      	str	r2, [r3, #56]	; 0x38
 8003644:	e029      	b.n	800369a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800364c:	d10a      	bne.n	8003664 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa1c 	bl	8003a8c <SD_WideBus_Enable>
 8003654:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	639a      	str	r2, [r3, #56]	; 0x38
 8003662:	e01a      	b.n	800369a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fa59 	bl	8003b22 <SD_WideBus_Disable>
 8003670:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	639a      	str	r2, [r3, #56]	; 0x38
 800367e:	e00c      	b.n	800369a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
 800368c:	e005      	b.n	800369a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a26      	ldr	r2, [pc, #152]	; (8003740 <HAL_SD_ConfigWideBusOperation+0x130>)
 80036a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036b8:	e01f      	b.n	80036fa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681d      	ldr	r5, [r3, #0]
 80036e0:	466c      	mov	r4, sp
 80036e2:	f107 0314 	add.w	r3, r7, #20
 80036e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80036ee:	f107 0308 	add.w	r3, r7, #8
 80036f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036f4:	4628      	mov	r0, r5
 80036f6:	f000 fedb 	bl	80044b0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003702:	4618      	mov	r0, r3
 8003704:	f000 ffb0 	bl	8004668 <SDMMC_CmdBlockLength>
 8003708:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00c      	beq.n	800372a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003716:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003736:	4618      	mov	r0, r3
 8003738:	3728      	adds	r7, #40	; 0x28
 800373a:	46bd      	mov	sp, r7
 800373c:	bdb0      	pop	{r4, r5, r7, pc}
 800373e:	bf00      	nop
 8003740:	004005ff 	.word	0x004005ff

08003744 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003750:	f107 030c 	add.w	r3, r7, #12
 8003754:	4619      	mov	r1, r3
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f970 	bl	8003a3c <SD_SendStatus>
 800375c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	0a5b      	lsrs	r3, r3, #9
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800377a:	693b      	ldr	r3, [r7, #16]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003784:	b5b0      	push	{r4, r5, r7, lr}
 8003786:	b094      	sub	sp, #80	; 0x50
 8003788:	af04      	add	r7, sp, #16
 800378a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800378c:	2301      	movs	r3, #1
 800378e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fee3 	bl	8004560 <SDIO_GetPowerState>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80037a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80037a4:	e0b8      	b.n	8003918 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d02f      	beq.n	800380e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f001 f90c 	bl	80049d0 <SDMMC_CmdSendCID>
 80037b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80037ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <SD_InitCard+0x40>
    {
      return errorstate;
 80037c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c2:	e0a9      	b.n	8003918 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2100      	movs	r1, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 ff0d 	bl	80045ea <SDIO_GetResponse>
 80037d0:	4602      	mov	r2, r0
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2104      	movs	r1, #4
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 ff04 	bl	80045ea <SDIO_GetResponse>
 80037e2:	4602      	mov	r2, r0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2108      	movs	r1, #8
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fefb 	bl	80045ea <SDIO_GetResponse>
 80037f4:	4602      	mov	r2, r0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	210c      	movs	r1, #12
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fef2 	bl	80045ea <SDIO_GetResponse>
 8003806:	4602      	mov	r2, r0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	2b03      	cmp	r3, #3
 8003814:	d00d      	beq.n	8003832 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f107 020e 	add.w	r2, r7, #14
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f001 f912 	bl	8004a4a <SDMMC_CmdSetRelAdd>
 8003826:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <SD_InitCard+0xae>
    {
      return errorstate;
 800382e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003830:	e072      	b.n	8003918 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	2b03      	cmp	r3, #3
 8003838:	d036      	beq.n	80038a8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800383a:	89fb      	ldrh	r3, [r7, #14]
 800383c:	461a      	mov	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384a:	041b      	lsls	r3, r3, #16
 800384c:	4619      	mov	r1, r3
 800384e:	4610      	mov	r0, r2
 8003850:	f001 f8dc 	bl	8004a0c <SDMMC_CmdSendCSD>
 8003854:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <SD_InitCard+0xdc>
    {
      return errorstate;
 800385c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385e:	e05b      	b.n	8003918 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f000 febf 	bl	80045ea <SDIO_GetResponse>
 800386c:	4602      	mov	r2, r0
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2104      	movs	r1, #4
 8003878:	4618      	mov	r0, r3
 800387a:	f000 feb6 	bl	80045ea <SDIO_GetResponse>
 800387e:	4602      	mov	r2, r0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2108      	movs	r1, #8
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fead 	bl	80045ea <SDIO_GetResponse>
 8003890:	4602      	mov	r2, r0
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	210c      	movs	r1, #12
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fea4 	bl	80045ea <SDIO_GetResponse>
 80038a2:	4602      	mov	r2, r0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2104      	movs	r1, #4
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fe9b 	bl	80045ea <SDIO_GetResponse>
 80038b4:	4603      	mov	r3, r0
 80038b6:	0d1a      	lsrs	r2, r3, #20
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80038bc:	f107 0310 	add.w	r3, r7, #16
 80038c0:	4619      	mov	r1, r3
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff fcd4 	bl	8003270 <HAL_SD_GetCardCSD>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80038d2:	e021      	b.n	8003918 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6819      	ldr	r1, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038dc:	041b      	lsls	r3, r3, #16
 80038de:	2200      	movs	r2, #0
 80038e0:	461c      	mov	r4, r3
 80038e2:	4615      	mov	r5, r2
 80038e4:	4622      	mov	r2, r4
 80038e6:	462b      	mov	r3, r5
 80038e8:	4608      	mov	r0, r1
 80038ea:	f000 ff89 	bl	8004800 <SDMMC_CmdSelDesel>
 80038ee:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80038f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <SD_InitCard+0x176>
  {
    return errorstate;
 80038f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f8:	e00e      	b.n	8003918 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681d      	ldr	r5, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	466c      	mov	r4, sp
 8003902:	f103 0210 	add.w	r2, r3, #16
 8003906:	ca07      	ldmia	r2, {r0, r1, r2}
 8003908:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800390c:	3304      	adds	r3, #4
 800390e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003910:	4628      	mov	r0, r5
 8003912:	f000 fdcd 	bl	80044b0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3740      	adds	r7, #64	; 0x40
 800391c:	46bd      	mov	sp, r7
 800391e:	bdb0      	pop	{r4, r5, r7, pc}

08003920 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f000 ff84 	bl	8004846 <SDMMC_CmdGoIdleState>
 800393e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <SD_PowerON+0x2a>
  {
    return errorstate;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	e072      	b.n	8003a30 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f000 ff97 	bl	8004882 <SDMMC_CmdOperCond>
 8003954:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00d      	beq.n	8003978 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 ff6d 	bl	8004846 <SDMMC_CmdGoIdleState>
 800396c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d004      	beq.n	800397e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	e05b      	b.n	8003a30 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003982:	2b01      	cmp	r3, #1
 8003984:	d137      	bne.n	80039f6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2100      	movs	r1, #0
 800398c:	4618      	mov	r0, r3
 800398e:	f000 ff97 	bl	80048c0 <SDMMC_CmdAppCommand>
 8003992:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d02d      	beq.n	80039f6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800399a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800399e:	e047      	b.n	8003a30 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 ff8a 	bl	80048c0 <SDMMC_CmdAppCommand>
 80039ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <SD_PowerON+0x98>
    {
      return errorstate;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	e03b      	b.n	8003a30 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	491e      	ldr	r1, [pc, #120]	; (8003a38 <SD_PowerON+0x118>)
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 ffa0 	bl	8004904 <SDMMC_CmdAppOperCommand>
 80039c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80039cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80039d0:	e02e      	b.n	8003a30 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fe06 	bl	80045ea <SDIO_GetResponse>
 80039de:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	0fdb      	lsrs	r3, r3, #31
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <SD_PowerON+0xcc>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <SD_PowerON+0xce>
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]

    count++;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	3301      	adds	r3, #1
 80039f4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d802      	bhi.n	8003a06 <SD_PowerON+0xe6>
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0cc      	beq.n	80039a0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d902      	bls.n	8003a16 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a14:	e00c      	b.n	8003a30 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	645a      	str	r2, [r3, #68]	; 0x44
 8003a26:	e002      	b.n	8003a2e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	c1100000 	.word	0xc1100000

08003a3c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003a4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a50:	e018      	b.n	8003a84 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4610      	mov	r0, r2
 8003a60:	f001 f814 	bl	8004a8c <SDMMC_CmdSendStatus>
 8003a64:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	e009      	b.n	8003a84 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fdb7 	bl	80045ea <SDIO_GetResponse>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fda1 	bl	80045ea <SDIO_GetResponse>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ab2:	d102      	bne.n	8003aba <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003ab4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ab8:	e02f      	b.n	8003b1a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003aba:	f107 030c 	add.w	r3, r7, #12
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f879 	bl	8003bb8 <SD_FindSCR>
 8003ac6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	e023      	b.n	8003b1a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01c      	beq.n	8003b16 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae4:	041b      	lsls	r3, r3, #16
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f000 fee9 	bl	80048c0 <SDMMC_CmdAppCommand>
 8003aee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	e00f      	b.n	8003b1a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2102      	movs	r1, #2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 ff22 	bl	800494a <SDMMC_CmdBusWidth>
 8003b06:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	e003      	b.n	8003b1a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e001      	b.n	8003b1a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003b16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b086      	sub	sp, #24
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fd56 	bl	80045ea <SDIO_GetResponse>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b48:	d102      	bne.n	8003b50 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003b4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b4e:	e02f      	b.n	8003bb0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003b50:	f107 030c 	add.w	r3, r7, #12
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f82e 	bl	8003bb8 <SD_FindSCR>
 8003b5c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	e023      	b.n	8003bb0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01c      	beq.n	8003bac <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7a:	041b      	lsls	r3, r3, #16
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4610      	mov	r0, r2
 8003b80:	f000 fe9e 	bl	80048c0 <SDMMC_CmdAppCommand>
 8003b84:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	e00f      	b.n	8003bb0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fed7 	bl	800494a <SDMMC_CmdBusWidth>
 8003b9c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	e003      	b.n	8003bb0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e001      	b.n	8003bb0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003bac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003bb8:	b590      	push	{r4, r7, lr}
 8003bba:	b08f      	sub	sp, #60	; 0x3c
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003bc2:	f7fc fce5 	bl	8000590 <HAL_GetTick>
 8003bc6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2108      	movs	r1, #8
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fd42 	bl	8004668 <SDMMC_CmdBlockLength>
 8003be4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	e0b2      	b.n	8003d56 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf8:	041b      	lsls	r3, r3, #16
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f000 fe5f 	bl	80048c0 <SDMMC_CmdAppCommand>
 8003c02:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <SD_FindSCR+0x56>
  {
    return errorstate;
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	e0a3      	b.n	8003d56 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c12:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003c14:	2308      	movs	r3, #8
 8003c16:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003c18:	2330      	movs	r3, #48	; 0x30
 8003c1a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003c24:	2301      	movs	r3, #1
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f107 0210 	add.w	r2, r7, #16
 8003c30:	4611      	mov	r1, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fcec 	bl	8004610 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fea6 	bl	800498e <SDMMC_CmdSendSCR>
 8003c42:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d02a      	beq.n	8003ca0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	e083      	b.n	8003d56 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00f      	beq.n	8003c7c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6819      	ldr	r1, [r3, #0]
 8003c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	f107 0208 	add.w	r2, r7, #8
 8003c68:	18d4      	adds	r4, r2, r3
 8003c6a:	4608      	mov	r0, r1
 8003c6c:	f000 fc4b 	bl	8004506 <SDIO_ReadFIFO>
 8003c70:	4603      	mov	r3, r0
 8003c72:	6023      	str	r3, [r4, #0]
      index++;
 8003c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c76:	3301      	adds	r3, #1
 8003c78:	637b      	str	r3, [r7, #52]	; 0x34
 8003c7a:	e006      	b.n	8003c8a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d012      	beq.n	8003cb0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003c8a:	f7fc fc81 	bl	8000590 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d102      	bne.n	8003ca0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003c9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c9e:	e05a      	b.n	8003d56 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0cf      	beq.n	8003c4e <SD_FindSCR+0x96>
 8003cae:	e000      	b.n	8003cb2 <SD_FindSCR+0xfa>
      break;
 8003cb0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003cc8:	2308      	movs	r3, #8
 8003cca:	e044      	b.n	8003d56 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e037      	b.n	8003d56 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003cfc:	2320      	movs	r3, #32
 8003cfe:	e02a      	b.n	8003d56 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f240 523a 	movw	r2, #1338	; 0x53a
 8003d08:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	061a      	lsls	r2, r3, #24
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d16:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003d20:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	0e1b      	lsrs	r3, r3, #24
 8003d26:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2a:	601a      	str	r2, [r3, #0]
    scr++;
 8003d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2e:	3304      	adds	r3, #4
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	061a      	lsls	r2, r3, #24
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d3e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003d48:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	0e1b      	lsrs	r3, r3, #24
 8003d4e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d52:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	373c      	adds	r7, #60	; 0x3c
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd90      	pop	{r4, r7, pc}

08003d5e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e07b      	b.n	8003e68 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d108      	bne.n	8003d8a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d80:	d009      	beq.n	8003d96 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	61da      	str	r2, [r3, #28]
 8003d88:	e005      	b.n	8003d96 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d106      	bne.n	8003db6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f004 fe3b 	bl	8008a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2202      	movs	r2, #2
 8003dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dcc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1a:	ea42 0103 	orr.w	r1, r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	0c1b      	lsrs	r3, r3, #16
 8003e34:	f003 0104 	and.w	r1, r3, #4
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	f003 0210 	and.w	r2, r3, #16
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69da      	ldr	r2, [r3, #28]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e041      	b.n	8003f06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f004 fe10 	bl	8008abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4619      	mov	r1, r3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	f000 f9ce 	bl	8004250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d001      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e04e      	b.n	8003fc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a23      	ldr	r2, [pc, #140]	; (8003fd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d022      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x80>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f52:	d01d      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x80>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1f      	ldr	r2, [pc, #124]	; (8003fd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d018      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x80>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1e      	ldr	r2, [pc, #120]	; (8003fdc <HAL_TIM_Base_Start_IT+0xcc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d013      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x80>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00e      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x80>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d009      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x80>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a19      	ldr	r2, [pc, #100]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d004      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x80>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a18      	ldr	r2, [pc, #96]	; (8003fec <HAL_TIM_Base_Start_IT+0xdc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d111      	bne.n	8003fb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d010      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0201 	orr.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb2:	e007      	b.n	8003fc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	40000c00 	.word	0x40000c00
 8003fe4:	40010400 	.word	0x40010400
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	40001800 	.word	0x40001800

08003ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b02      	cmp	r3, #2
 8004004:	d122      	bne.n	800404c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b02      	cmp	r3, #2
 8004012:	d11b      	bne.n	800404c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0202 	mvn.w	r2, #2
 800401c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f8ee 	bl	8004214 <HAL_TIM_IC_CaptureCallback>
 8004038:	e005      	b.n	8004046 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8e0 	bl	8004200 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f8f1 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b04      	cmp	r3, #4
 8004058:	d122      	bne.n	80040a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b04      	cmp	r3, #4
 8004066:	d11b      	bne.n	80040a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0204 	mvn.w	r2, #4
 8004070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f8c4 	bl	8004214 <HAL_TIM_IC_CaptureCallback>
 800408c:	e005      	b.n	800409a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f8b6 	bl	8004200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f8c7 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d122      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d11b      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0208 	mvn.w	r2, #8
 80040c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2204      	movs	r2, #4
 80040ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f89a 	bl	8004214 <HAL_TIM_IC_CaptureCallback>
 80040e0:	e005      	b.n	80040ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f88c 	bl	8004200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f89d 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d122      	bne.n	8004148 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b10      	cmp	r3, #16
 800410e:	d11b      	bne.n	8004148 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0210 	mvn.w	r2, #16
 8004118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2208      	movs	r2, #8
 800411e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f870 	bl	8004214 <HAL_TIM_IC_CaptureCallback>
 8004134:	e005      	b.n	8004142 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f862 	bl	8004200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f873 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b01      	cmp	r3, #1
 8004154:	d10e      	bne.n	8004174 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d107      	bne.n	8004174 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0201 	mvn.w	r2, #1
 800416c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f004 fa70 	bl	8008654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	d10e      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b80      	cmp	r3, #128	; 0x80
 800418e:	d107      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f97e 	bl	800449c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041aa:	2b40      	cmp	r3, #64	; 0x40
 80041ac:	d10e      	bne.n	80041cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b40      	cmp	r3, #64	; 0x40
 80041ba:	d107      	bne.n	80041cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f838 	bl	800423c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d10e      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d107      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0220 	mvn.w	r2, #32
 80041f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f948 	bl	8004488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041f8:	bf00      	nop
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a40      	ldr	r2, [pc, #256]	; (8004364 <TIM_Base_SetConfig+0x114>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426e:	d00f      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a3d      	ldr	r2, [pc, #244]	; (8004368 <TIM_Base_SetConfig+0x118>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00b      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a3c      	ldr	r2, [pc, #240]	; (800436c <TIM_Base_SetConfig+0x11c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a3b      	ldr	r2, [pc, #236]	; (8004370 <TIM_Base_SetConfig+0x120>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a3a      	ldr	r2, [pc, #232]	; (8004374 <TIM_Base_SetConfig+0x124>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d108      	bne.n	80042a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a2f      	ldr	r2, [pc, #188]	; (8004364 <TIM_Base_SetConfig+0x114>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d02b      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b0:	d027      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a2c      	ldr	r2, [pc, #176]	; (8004368 <TIM_Base_SetConfig+0x118>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d023      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a2b      	ldr	r2, [pc, #172]	; (800436c <TIM_Base_SetConfig+0x11c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d01f      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a2a      	ldr	r2, [pc, #168]	; (8004370 <TIM_Base_SetConfig+0x120>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d01b      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a29      	ldr	r2, [pc, #164]	; (8004374 <TIM_Base_SetConfig+0x124>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d017      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a28      	ldr	r2, [pc, #160]	; (8004378 <TIM_Base_SetConfig+0x128>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d013      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a27      	ldr	r2, [pc, #156]	; (800437c <TIM_Base_SetConfig+0x12c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00f      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a26      	ldr	r2, [pc, #152]	; (8004380 <TIM_Base_SetConfig+0x130>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00b      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a25      	ldr	r2, [pc, #148]	; (8004384 <TIM_Base_SetConfig+0x134>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d007      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a24      	ldr	r2, [pc, #144]	; (8004388 <TIM_Base_SetConfig+0x138>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a23      	ldr	r2, [pc, #140]	; (800438c <TIM_Base_SetConfig+0x13c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d108      	bne.n	8004314 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <TIM_Base_SetConfig+0x114>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_Base_SetConfig+0xf8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a0c      	ldr	r2, [pc, #48]	; (8004374 <TIM_Base_SetConfig+0x124>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d103      	bne.n	8004350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	615a      	str	r2, [r3, #20]
}
 8004356:	bf00      	nop
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40010000 	.word	0x40010000
 8004368:	40000400 	.word	0x40000400
 800436c:	40000800 	.word	0x40000800
 8004370:	40000c00 	.word	0x40000c00
 8004374:	40010400 	.word	0x40010400
 8004378:	40014000 	.word	0x40014000
 800437c:	40014400 	.word	0x40014400
 8004380:	40014800 	.word	0x40014800
 8004384:	40001800 	.word	0x40001800
 8004388:	40001c00 	.word	0x40001c00
 800438c:	40002000 	.word	0x40002000

08004390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e05a      	b.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a21      	ldr	r2, [pc, #132]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d022      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f4:	d01d      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1d      	ldr	r2, [pc, #116]	; (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d018      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1b      	ldr	r2, [pc, #108]	; (8004474 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d013      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1a      	ldr	r2, [pc, #104]	; (8004478 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00e      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a18      	ldr	r2, [pc, #96]	; (800447c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d009      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a17      	ldr	r2, [pc, #92]	; (8004480 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a15      	ldr	r2, [pc, #84]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d10c      	bne.n	800444c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	4313      	orrs	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40010000 	.word	0x40010000
 8004470:	40000400 	.word	0x40000400
 8004474:	40000800 	.word	0x40000800
 8004478:	40000c00 	.word	0x40000c00
 800447c:	40010400 	.word	0x40010400
 8004480:	40014000 	.word	0x40014000
 8004484:	40001800 	.word	0x40001800

08004488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80044b0:	b084      	sub	sp, #16
 80044b2:	b480      	push	{r7}
 80044b4:	b085      	sub	sp, #20
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	f107 001c 	add.w	r0, r7, #28
 80044be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80044c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80044c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80044ca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80044ce:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80044d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80044d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80044d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80044da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80044ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	b004      	add	sp, #16
 8004504:	4770      	bx	lr

08004506 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2203      	movs	r2, #3
 800454e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004550:	2002      	movs	r0, #2
 8004552:	f7fc f829 	bl	80005a8 <HAL_Delay>
  
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0303 	and.w	r3, r3, #3
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800459a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80045a0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80045a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80045b6:	f023 030f 	bic.w	r3, r3, #15
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	b2db      	uxtb	r3, r3
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3314      	adds	r3, #20
 80045f8:	461a      	mov	r2, r3
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	4413      	add	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
}  
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004636:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800463c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004642:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800465a:	2300      	movs	r3, #0

}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004676:	2310      	movs	r3, #16
 8004678:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800467a:	2340      	movs	r3, #64	; 0x40
 800467c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800467e:	2300      	movs	r3, #0
 8004680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004686:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004688:	f107 0308 	add.w	r3, r7, #8
 800468c:	4619      	mov	r1, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff ff74 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004694:	f241 3288 	movw	r2, #5000	; 0x1388
 8004698:	2110      	movs	r1, #16
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fa44 	bl	8004b28 <SDMMC_GetCmdResp1>
 80046a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046a2:	69fb      	ldr	r3, [r7, #28]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3720      	adds	r7, #32
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b088      	sub	sp, #32
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80046ba:	2311      	movs	r3, #17
 80046bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046be:	2340      	movs	r3, #64	; 0x40
 80046c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046cc:	f107 0308 	add.w	r3, r7, #8
 80046d0:	4619      	mov	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff ff52 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80046d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046dc:	2111      	movs	r1, #17
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fa22 	bl	8004b28 <SDMMC_GetCmdResp1>
 80046e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046e6:	69fb      	ldr	r3, [r7, #28]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80046fe:	2312      	movs	r3, #18
 8004700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004702:	2340      	movs	r3, #64	; 0x40
 8004704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800470a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800470e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004710:	f107 0308 	add.w	r3, r7, #8
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff ff30 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800471c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004720:	2112      	movs	r1, #18
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fa00 	bl	8004b28 <SDMMC_GetCmdResp1>
 8004728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800472a:	69fb      	ldr	r3, [r7, #28]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3720      	adds	r7, #32
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004742:	2318      	movs	r3, #24
 8004744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004746:	2340      	movs	r3, #64	; 0x40
 8004748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800474e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004752:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004754:	f107 0308 	add.w	r3, r7, #8
 8004758:	4619      	mov	r1, r3
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff ff0e 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	2118      	movs	r1, #24
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f9de 	bl	8004b28 <SDMMC_GetCmdResp1>
 800476c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800476e:	69fb      	ldr	r3, [r7, #28]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3720      	adds	r7, #32
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004786:	2319      	movs	r3, #25
 8004788:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800478a:	2340      	movs	r3, #64	; 0x40
 800478c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004796:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004798:	f107 0308 	add.w	r3, r7, #8
 800479c:	4619      	mov	r1, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff feec 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80047a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a8:	2119      	movs	r1, #25
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f9bc 	bl	8004b28 <SDMMC_GetCmdResp1>
 80047b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047b2:	69fb      	ldr	r3, [r7, #28]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3720      	adds	r7, #32
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80047c8:	230c      	movs	r3, #12
 80047ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047cc:	2340      	movs	r3, #64	; 0x40
 80047ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047da:	f107 0308 	add.w	r3, r7, #8
 80047de:	4619      	mov	r1, r3
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff fecb 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80047e6:	4a05      	ldr	r2, [pc, #20]	; (80047fc <SDMMC_CmdStopTransfer+0x40>)
 80047e8:	210c      	movs	r1, #12
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f99c 	bl	8004b28 <SDMMC_GetCmdResp1>
 80047f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047f2:	69fb      	ldr	r3, [r7, #28]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3720      	adds	r7, #32
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	05f5e100 	.word	0x05f5e100

08004800 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	; 0x28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004810:	2307      	movs	r3, #7
 8004812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004814:	2340      	movs	r3, #64	; 0x40
 8004816:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004818:	2300      	movs	r3, #0
 800481a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800481c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004820:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004822:	f107 0310 	add.w	r3, r7, #16
 8004826:	4619      	mov	r1, r3
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f7ff fea7 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800482e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004832:	2107      	movs	r1, #7
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f977 	bl	8004b28 <SDMMC_GetCmdResp1>
 800483a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800483e:	4618      	mov	r0, r3
 8004840:	3728      	adds	r7, #40	; 0x28
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b088      	sub	sp, #32
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800485e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004862:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004864:	f107 0308 	add.w	r3, r7, #8
 8004868:	4619      	mov	r1, r3
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7ff fe86 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f92d 	bl	8004ad0 <SDMMC_GetCmdError>
 8004876:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004878:	69fb      	ldr	r3, [r7, #28]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3720      	adds	r7, #32
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b088      	sub	sp, #32
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800488a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800488e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004890:	2308      	movs	r3, #8
 8004892:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004894:	2340      	movs	r3, #64	; 0x40
 8004896:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800489c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048a2:	f107 0308 	add.w	r3, r7, #8
 80048a6:	4619      	mov	r1, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff fe67 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fb24 	bl	8004efc <SDMMC_GetCmdResp7>
 80048b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048b6:	69fb      	ldr	r3, [r7, #28]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3720      	adds	r7, #32
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80048ce:	2337      	movs	r3, #55	; 0x37
 80048d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048d2:	2340      	movs	r3, #64	; 0x40
 80048d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048e0:	f107 0308 	add.w	r3, r7, #8
 80048e4:	4619      	mov	r1, r3
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff fe48 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80048ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f0:	2137      	movs	r1, #55	; 0x37
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f918 	bl	8004b28 <SDMMC_GetCmdResp1>
 80048f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048fa:	69fb      	ldr	r3, [r7, #28]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3720      	adds	r7, #32
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004918:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800491a:	2329      	movs	r3, #41	; 0x29
 800491c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800491e:	2340      	movs	r3, #64	; 0x40
 8004920:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800492a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800492c:	f107 0308 	add.w	r3, r7, #8
 8004930:	4619      	mov	r1, r3
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff fe22 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fa2b 	bl	8004d94 <SDMMC_GetCmdResp3>
 800493e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004940:	69fb      	ldr	r3, [r7, #28]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3720      	adds	r7, #32
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b088      	sub	sp, #32
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004958:	2306      	movs	r3, #6
 800495a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800495c:	2340      	movs	r3, #64	; 0x40
 800495e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004968:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800496a:	f107 0308 	add.w	r3, r7, #8
 800496e:	4619      	mov	r1, r3
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff fe03 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004976:	f241 3288 	movw	r2, #5000	; 0x1388
 800497a:	2106      	movs	r1, #6
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f8d3 	bl	8004b28 <SDMMC_GetCmdResp1>
 8004982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004984:	69fb      	ldr	r3, [r7, #28]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b088      	sub	sp, #32
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800499a:	2333      	movs	r3, #51	; 0x33
 800499c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800499e:	2340      	movs	r3, #64	; 0x40
 80049a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049ac:	f107 0308 	add.w	r3, r7, #8
 80049b0:	4619      	mov	r1, r3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff fde2 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80049b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049bc:	2133      	movs	r1, #51	; 0x33
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f8b2 	bl	8004b28 <SDMMC_GetCmdResp1>
 80049c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049c6:	69fb      	ldr	r3, [r7, #28]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3720      	adds	r7, #32
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80049dc:	2302      	movs	r3, #2
 80049de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80049e0:	23c0      	movs	r3, #192	; 0xc0
 80049e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049ee:	f107 0308 	add.w	r3, r7, #8
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff fdc1 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f982 	bl	8004d04 <SDMMC_GetCmdResp2>
 8004a00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a02:	69fb      	ldr	r3, [r7, #28]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004a1a:	2309      	movs	r3, #9
 8004a1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004a1e:	23c0      	movs	r3, #192	; 0xc0
 8004a20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a2c:	f107 0308 	add.w	r3, r7, #8
 8004a30:	4619      	mov	r1, r3
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff fda2 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f963 	bl	8004d04 <SDMMC_GetCmdResp2>
 8004a3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a40:	69fb      	ldr	r3, [r7, #28]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3720      	adds	r7, #32
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b088      	sub	sp, #32
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a5c:	2340      	movs	r3, #64	; 0x40
 8004a5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a6a:	f107 0308 	add.w	r3, r7, #8
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fd83 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	2103      	movs	r1, #3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f9c8 	bl	8004e10 <SDMMC_GetCmdResp6>
 8004a80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a82:	69fb      	ldr	r3, [r7, #28]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3720      	adds	r7, #32
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004a9a:	230d      	movs	r3, #13
 8004a9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a9e:	2340      	movs	r3, #64	; 0x40
 8004aa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004aac:	f107 0308 	add.w	r3, r7, #8
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff fd62 	bl	800457c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abc:	210d      	movs	r1, #13
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f832 	bl	8004b28 <SDMMC_GetCmdResp1>
 8004ac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3720      	adds	r7, #32
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ad8:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <SDMMC_GetCmdError+0x50>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a11      	ldr	r2, [pc, #68]	; (8004b24 <SDMMC_GetCmdError+0x54>)
 8004ade:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae2:	0a5b      	lsrs	r3, r3, #9
 8004ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae8:	fb02 f303 	mul.w	r3, r2, r3
 8004aec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1e5a      	subs	r2, r3, #1
 8004af2:	60fa      	str	r2, [r7, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004af8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004afc:	e009      	b.n	8004b12 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f1      	beq.n	8004aee <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	22c5      	movs	r2, #197	; 0xc5
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	20000118 	.word	0x20000118
 8004b24:	10624dd3 	.word	0x10624dd3

08004b28 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	460b      	mov	r3, r1
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004b36:	4b70      	ldr	r3, [pc, #448]	; (8004cf8 <SDMMC_GetCmdResp1+0x1d0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a70      	ldr	r2, [pc, #448]	; (8004cfc <SDMMC_GetCmdResp1+0x1d4>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	0a5a      	lsrs	r2, r3, #9
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	1e5a      	subs	r2, r3, #1
 8004b4e:	61fa      	str	r2, [r7, #28]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d102      	bne.n	8004b5a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b58:	e0c9      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0ef      	beq.n	8004b4a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1ea      	bne.n	8004b4a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2204      	movs	r2, #4
 8004b84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b86:	2304      	movs	r3, #4
 8004b88:	e0b1      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d004      	beq.n	8004ba0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0a6      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	22c5      	movs	r2, #197	; 0xc5
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f7ff fd12 	bl	80045d0 <SDIO_GetCommandResponse>
 8004bac:	4603      	mov	r3, r0
 8004bae:	461a      	mov	r2, r3
 8004bb0:	7afb      	ldrb	r3, [r7, #11]
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d001      	beq.n	8004bba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e099      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004bba:	2100      	movs	r1, #0
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7ff fd14 	bl	80045ea <SDIO_GetResponse>
 8004bc2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	4b4e      	ldr	r3, [pc, #312]	; (8004d00 <SDMMC_GetCmdResp1+0x1d8>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	e08d      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	da02      	bge.n	8004bde <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004bd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bdc:	e087      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004be8:	2340      	movs	r3, #64	; 0x40
 8004bea:	e080      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	e079      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c08:	e071      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c18:	e069      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c28:	e061      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004c34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c38:	e059      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c48:	e051      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c58:	e049      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004c64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c68:	e041      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c78:	e039      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004c84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c88:	e031      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004c94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c98:	e029      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004ca4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004ca8:	e021      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004cb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004cb8:	e019      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004cc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004cc8:	e011      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004cd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004cd8:	e009      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004ce4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004ce8:	e001      	b.n	8004cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000118 	.word	0x20000118
 8004cfc:	10624dd3 	.word	0x10624dd3
 8004d00:	fdffe008 	.word	0xfdffe008

08004d04 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d0c:	4b1f      	ldr	r3, [pc, #124]	; (8004d8c <SDMMC_GetCmdResp2+0x88>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1f      	ldr	r2, [pc, #124]	; (8004d90 <SDMMC_GetCmdResp2+0x8c>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	0a5b      	lsrs	r3, r3, #9
 8004d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1c:	fb02 f303 	mul.w	r3, r2, r3
 8004d20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1e5a      	subs	r2, r3, #1
 8004d26:	60fa      	str	r2, [r7, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d30:	e026      	b.n	8004d80 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0ef      	beq.n	8004d22 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1ea      	bne.n	8004d22 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d004      	beq.n	8004d62 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2204      	movs	r2, #4
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d5e:	2304      	movs	r3, #4
 8004d60:	e00e      	b.n	8004d80 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d004      	beq.n	8004d78 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e003      	b.n	8004d80 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	22c5      	movs	r2, #197	; 0xc5
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	20000118 	.word	0x20000118
 8004d90:	10624dd3 	.word	0x10624dd3

08004d94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d9c:	4b1a      	ldr	r3, [pc, #104]	; (8004e08 <SDMMC_GetCmdResp3+0x74>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1a      	ldr	r2, [pc, #104]	; (8004e0c <SDMMC_GetCmdResp3+0x78>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	0a5b      	lsrs	r3, r3, #9
 8004da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dac:	fb02 f303 	mul.w	r3, r2, r3
 8004db0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1e5a      	subs	r2, r3, #1
 8004db6:	60fa      	str	r2, [r7, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d102      	bne.n	8004dc2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004dbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004dc0:	e01b      	b.n	8004dfa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0ef      	beq.n	8004db2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1ea      	bne.n	8004db2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2204      	movs	r2, #4
 8004dec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004dee:	2304      	movs	r3, #4
 8004df0:	e003      	b.n	8004dfa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	22c5      	movs	r2, #197	; 0xc5
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000118 	.word	0x20000118
 8004e0c:	10624dd3 	.word	0x10624dd3

08004e10 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e1e:	4b35      	ldr	r3, [pc, #212]	; (8004ef4 <SDMMC_GetCmdResp6+0xe4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a35      	ldr	r2, [pc, #212]	; (8004ef8 <SDMMC_GetCmdResp6+0xe8>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	0a5b      	lsrs	r3, r3, #9
 8004e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	1e5a      	subs	r2, r3, #1
 8004e38:	61fa      	str	r2, [r7, #28]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d102      	bne.n	8004e44 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e42:	e052      	b.n	8004eea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e48:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ef      	beq.n	8004e34 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1ea      	bne.n	8004e34 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d004      	beq.n	8004e74 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2204      	movs	r2, #4
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e70:	2304      	movs	r3, #4
 8004e72:	e03a      	b.n	8004eea <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d004      	beq.n	8004e8a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2201      	movs	r2, #1
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e02f      	b.n	8004eea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7ff fba0 	bl	80045d0 <SDIO_GetCommandResponse>
 8004e90:	4603      	mov	r3, r0
 8004e92:	461a      	mov	r2, r3
 8004e94:	7afb      	ldrb	r3, [r7, #11]
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d001      	beq.n	8004e9e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e025      	b.n	8004eea <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	22c5      	movs	r2, #197	; 0xc5
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f7ff fb9f 	bl	80045ea <SDIO_GetResponse>
 8004eac:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	0c1b      	lsrs	r3, r3, #16
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e011      	b.n	8004eea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ed4:	e009      	b.n	8004eea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ee4:	e001      	b.n	8004eea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004ee6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3720      	adds	r7, #32
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000118 	.word	0x20000118
 8004ef8:	10624dd3 	.word	0x10624dd3

08004efc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f04:	4b22      	ldr	r3, [pc, #136]	; (8004f90 <SDMMC_GetCmdResp7+0x94>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a22      	ldr	r2, [pc, #136]	; (8004f94 <SDMMC_GetCmdResp7+0x98>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	0a5b      	lsrs	r3, r3, #9
 8004f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f14:	fb02 f303 	mul.w	r3, r2, r3
 8004f18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1e5a      	subs	r2, r3, #1
 8004f1e:	60fa      	str	r2, [r7, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f28:	e02c      	b.n	8004f84 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0ef      	beq.n	8004f1a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1ea      	bne.n	8004f1a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d004      	beq.n	8004f5a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2204      	movs	r2, #4
 8004f54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f56:	2304      	movs	r3, #4
 8004f58:	e014      	b.n	8004f84 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d004      	beq.n	8004f70 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e009      	b.n	8004f84 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2240      	movs	r2, #64	; 0x40
 8004f80:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004f82:	2300      	movs	r3, #0
  
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	20000118 	.word	0x20000118
 8004f94:	10624dd3 	.word	0x10624dd3

08004f98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f98:	b084      	sub	sp, #16
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	f107 001c 	add.w	r0, r7, #28
 8004fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d122      	bne.n	8004ff6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d105      	bne.n	8004fea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f001 fb1c 	bl	8006628 <USB_CoreReset>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	73fb      	strb	r3, [r7, #15]
 8004ff4:	e01a      	b.n	800502c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f001 fb10 	bl	8006628 <USB_CoreReset>
 8005008:	4603      	mov	r3, r0
 800500a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800500c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d106      	bne.n	8005020 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	639a      	str	r2, [r3, #56]	; 0x38
 800501e:	e005      	b.n	800502c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	2b01      	cmp	r3, #1
 8005030:	d10b      	bne.n	800504a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f043 0206 	orr.w	r2, r3, #6
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f043 0220 	orr.w	r2, r3, #32
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800504a:	7bfb      	ldrb	r3, [r7, #15]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005056:	b004      	add	sp, #16
 8005058:	4770      	bx	lr
	...

0800505c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	4613      	mov	r3, r2
 8005068:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d165      	bne.n	800513c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4a41      	ldr	r2, [pc, #260]	; (8005178 <USB_SetTurnaroundTime+0x11c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d906      	bls.n	8005086 <USB_SetTurnaroundTime+0x2a>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4a40      	ldr	r2, [pc, #256]	; (800517c <USB_SetTurnaroundTime+0x120>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d202      	bcs.n	8005086 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005080:	230f      	movs	r3, #15
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e062      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4a3c      	ldr	r2, [pc, #240]	; (800517c <USB_SetTurnaroundTime+0x120>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d306      	bcc.n	800509c <USB_SetTurnaroundTime+0x40>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4a3b      	ldr	r2, [pc, #236]	; (8005180 <USB_SetTurnaroundTime+0x124>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d202      	bcs.n	800509c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005096:	230e      	movs	r3, #14
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	e057      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4a38      	ldr	r2, [pc, #224]	; (8005180 <USB_SetTurnaroundTime+0x124>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d306      	bcc.n	80050b2 <USB_SetTurnaroundTime+0x56>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4a37      	ldr	r2, [pc, #220]	; (8005184 <USB_SetTurnaroundTime+0x128>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d202      	bcs.n	80050b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050ac:	230d      	movs	r3, #13
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e04c      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4a33      	ldr	r2, [pc, #204]	; (8005184 <USB_SetTurnaroundTime+0x128>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d306      	bcc.n	80050c8 <USB_SetTurnaroundTime+0x6c>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4a32      	ldr	r2, [pc, #200]	; (8005188 <USB_SetTurnaroundTime+0x12c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d802      	bhi.n	80050c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050c2:	230c      	movs	r3, #12
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e041      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4a2f      	ldr	r2, [pc, #188]	; (8005188 <USB_SetTurnaroundTime+0x12c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d906      	bls.n	80050de <USB_SetTurnaroundTime+0x82>
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4a2e      	ldr	r2, [pc, #184]	; (800518c <USB_SetTurnaroundTime+0x130>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d802      	bhi.n	80050de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050d8:	230b      	movs	r3, #11
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e036      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4a2a      	ldr	r2, [pc, #168]	; (800518c <USB_SetTurnaroundTime+0x130>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d906      	bls.n	80050f4 <USB_SetTurnaroundTime+0x98>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	4a29      	ldr	r2, [pc, #164]	; (8005190 <USB_SetTurnaroundTime+0x134>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d802      	bhi.n	80050f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050ee:	230a      	movs	r3, #10
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e02b      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4a26      	ldr	r2, [pc, #152]	; (8005190 <USB_SetTurnaroundTime+0x134>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d906      	bls.n	800510a <USB_SetTurnaroundTime+0xae>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4a25      	ldr	r2, [pc, #148]	; (8005194 <USB_SetTurnaroundTime+0x138>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d202      	bcs.n	800510a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005104:	2309      	movs	r3, #9
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e020      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4a21      	ldr	r2, [pc, #132]	; (8005194 <USB_SetTurnaroundTime+0x138>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d306      	bcc.n	8005120 <USB_SetTurnaroundTime+0xc4>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4a20      	ldr	r2, [pc, #128]	; (8005198 <USB_SetTurnaroundTime+0x13c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d802      	bhi.n	8005120 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800511a:	2308      	movs	r3, #8
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e015      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4a1d      	ldr	r2, [pc, #116]	; (8005198 <USB_SetTurnaroundTime+0x13c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d906      	bls.n	8005136 <USB_SetTurnaroundTime+0xda>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4a1c      	ldr	r2, [pc, #112]	; (800519c <USB_SetTurnaroundTime+0x140>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d202      	bcs.n	8005136 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005130:	2307      	movs	r3, #7
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e00a      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005136:	2306      	movs	r3, #6
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	e007      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005142:	2309      	movs	r3, #9
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	e001      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005148:	2309      	movs	r3, #9
 800514a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	029b      	lsls	r3, r3, #10
 8005160:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005164:	431a      	orrs	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	00d8acbf 	.word	0x00d8acbf
 800517c:	00e4e1c0 	.word	0x00e4e1c0
 8005180:	00f42400 	.word	0x00f42400
 8005184:	01067380 	.word	0x01067380
 8005188:	011a499f 	.word	0x011a499f
 800518c:	01312cff 	.word	0x01312cff
 8005190:	014ca43f 	.word	0x014ca43f
 8005194:	016e3600 	.word	0x016e3600
 8005198:	01a6ab1f 	.word	0x01a6ab1f
 800519c:	01e84800 	.word	0x01e84800

080051a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f043 0201 	orr.w	r2, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f023 0201 	bic.w	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d115      	bne.n	8005232 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005212:	2001      	movs	r0, #1
 8005214:	f7fb f9c8 	bl	80005a8 <HAL_Delay>
      ms++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f001 f972 	bl	8006508 <USB_GetMode>
 8005224:	4603      	mov	r3, r0
 8005226:	2b01      	cmp	r3, #1
 8005228:	d01e      	beq.n	8005268 <USB_SetCurrentMode+0x84>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b31      	cmp	r3, #49	; 0x31
 800522e:	d9f0      	bls.n	8005212 <USB_SetCurrentMode+0x2e>
 8005230:	e01a      	b.n	8005268 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d115      	bne.n	8005264 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005244:	2001      	movs	r0, #1
 8005246:	f7fb f9af 	bl	80005a8 <HAL_Delay>
      ms++;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3301      	adds	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f001 f959 	bl	8006508 <USB_GetMode>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <USB_SetCurrentMode+0x84>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b31      	cmp	r3, #49	; 0x31
 8005260:	d9f0      	bls.n	8005244 <USB_SetCurrentMode+0x60>
 8005262:	e001      	b.n	8005268 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e005      	b.n	8005274 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b32      	cmp	r3, #50	; 0x32
 800526c:	d101      	bne.n	8005272 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800527c:	b084      	sub	sp, #16
 800527e:	b580      	push	{r7, lr}
 8005280:	b086      	sub	sp, #24
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800528a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005296:	2300      	movs	r3, #0
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	e009      	b.n	80052b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	3340      	adds	r3, #64	; 0x40
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	2200      	movs	r2, #0
 80052a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	3301      	adds	r3, #1
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	2b0e      	cmp	r3, #14
 80052b4:	d9f2      	bls.n	800529c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d11c      	bne.n	80052f6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ca:	f043 0302 	orr.w	r3, r3, #2
 80052ce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
 80052f4:	e00b      	b.n	800530e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005314:	461a      	mov	r2, r3
 8005316:	2300      	movs	r3, #0
 8005318:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005320:	4619      	mov	r1, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005328:	461a      	mov	r2, r3
 800532a:	680b      	ldr	r3, [r1, #0]
 800532c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	2b01      	cmp	r3, #1
 8005332:	d10c      	bne.n	800534e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005336:	2b00      	cmp	r3, #0
 8005338:	d104      	bne.n	8005344 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800533a:	2100      	movs	r1, #0
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f945 	bl	80055cc <USB_SetDevSpeed>
 8005342:	e008      	b.n	8005356 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005344:	2101      	movs	r1, #1
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f940 	bl	80055cc <USB_SetDevSpeed>
 800534c:	e003      	b.n	8005356 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800534e:	2103      	movs	r1, #3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f93b 	bl	80055cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005356:	2110      	movs	r1, #16
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f8f3 	bl	8005544 <USB_FlushTxFifo>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f90f 	bl	800558c <USB_FlushRxFifo>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537e:	461a      	mov	r2, r3
 8005380:	2300      	movs	r3, #0
 8005382:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	461a      	mov	r2, r3
 800538c:	2300      	movs	r3, #0
 800538e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005396:	461a      	mov	r2, r3
 8005398:	2300      	movs	r3, #0
 800539a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800539c:	2300      	movs	r3, #0
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	e043      	b.n	800542a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053b8:	d118      	bne.n	80053ec <USB_DevInit+0x170>
    {
      if (i == 0U)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10a      	bne.n	80053d6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053cc:	461a      	mov	r2, r3
 80053ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	e013      	b.n	80053fe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	461a      	mov	r2, r3
 80053e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	e008      	b.n	80053fe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f8:	461a      	mov	r2, r3
 80053fa:	2300      	movs	r3, #0
 80053fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540a:	461a      	mov	r2, r3
 800540c:	2300      	movs	r3, #0
 800540e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541c:	461a      	mov	r2, r3
 800541e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005422:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	3301      	adds	r3, #1
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	429a      	cmp	r2, r3
 8005430:	d3b7      	bcc.n	80053a2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005432:	2300      	movs	r3, #0
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	e043      	b.n	80054c0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800544a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800544e:	d118      	bne.n	8005482 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10a      	bne.n	800546c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005462:	461a      	mov	r2, r3
 8005464:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	e013      	b.n	8005494 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005478:	461a      	mov	r2, r3
 800547a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	e008      	b.n	8005494 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548e:	461a      	mov	r2, r3
 8005490:	2300      	movs	r3, #0
 8005492:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a0:	461a      	mov	r2, r3
 80054a2:	2300      	movs	r3, #0
 80054a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b2:	461a      	mov	r2, r3
 80054b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	3301      	adds	r3, #1
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d3b7      	bcc.n	8005438 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d105      	bne.n	80054fc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f043 0210 	orr.w	r2, r3, #16
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699a      	ldr	r2, [r3, #24]
 8005500:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <USB_DevInit+0x2c4>)
 8005502:	4313      	orrs	r3, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	f043 0208 	orr.w	r2, r3, #8
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800551a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d107      	bne.n	8005530 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005528:	f043 0304 	orr.w	r3, r3, #4
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005530:	7dfb      	ldrb	r3, [r7, #23]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800553c:	b004      	add	sp, #16
 800553e:	4770      	bx	lr
 8005540:	803c3800 	.word	0x803c3800

08005544 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	019b      	lsls	r3, r3, #6
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3301      	adds	r3, #1
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	4a08      	ldr	r2, [pc, #32]	; (8005588 <USB_FlushTxFifo+0x44>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e006      	b.n	800557c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b20      	cmp	r3, #32
 8005578:	d0f1      	beq.n	800555e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	00030d40 	.word	0x00030d40

0800558c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2210      	movs	r2, #16
 800559c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3301      	adds	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	4a08      	ldr	r2, [pc, #32]	; (80055c8 <USB_FlushRxFifo+0x3c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d901      	bls.n	80055ae <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e006      	b.n	80055bc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	2b10      	cmp	r3, #16
 80055b8:	d0f1      	beq.n	800559e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	00030d40 	.word	0x00030d40

080055cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ec:	4313      	orrs	r3, r2
 80055ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80055fe:	b480      	push	{r7}
 8005600:	b087      	sub	sp, #28
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0306 	and.w	r3, r3, #6
 8005616:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800561e:	2300      	movs	r3, #0
 8005620:	75fb      	strb	r3, [r7, #23]
 8005622:	e00a      	b.n	800563a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d002      	beq.n	8005630 <USB_GetDevSpeed+0x32>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b06      	cmp	r3, #6
 800562e:	d102      	bne.n	8005636 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005630:	2302      	movs	r3, #2
 8005632:	75fb      	strb	r3, [r7, #23]
 8005634:	e001      	b.n	800563a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005636:	230f      	movs	r3, #15
 8005638:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800563a:	7dfb      	ldrb	r3, [r7, #23]
}
 800563c:	4618      	mov	r0, r3
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d13a      	bne.n	80056da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	2101      	movs	r1, #1
 8005676:	fa01 f303 	lsl.w	r3, r1, r3
 800567a:	b29b      	uxth	r3, r3
 800567c:	68f9      	ldr	r1, [r7, #12]
 800567e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005682:	4313      	orrs	r3, r2
 8005684:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d155      	bne.n	8005748 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	78db      	ldrb	r3, [r3, #3]
 80056b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	059b      	lsls	r3, r3, #22
 80056be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056c0:	4313      	orrs	r3, r2
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e036      	b.n	8005748 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	2101      	movs	r1, #1
 80056ec:	fa01 f303 	lsl.w	r3, r1, r3
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056f8:	4313      	orrs	r3, r2
 80056fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d11a      	bne.n	8005748 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	78db      	ldrb	r3, [r3, #3]
 800572c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800572e:	430b      	orrs	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005746:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d161      	bne.n	8005838 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800578a:	d11f      	bne.n	80057cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	2101      	movs	r1, #1
 80057de:	fa01 f303 	lsl.w	r3, r1, r3
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	43db      	mvns	r3, r3
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ec:	4013      	ands	r3, r2
 80057ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	2101      	movs	r1, #1
 8005802:	fa01 f303 	lsl.w	r3, r1, r3
 8005806:	b29b      	uxth	r3, r3
 8005808:	43db      	mvns	r3, r3
 800580a:	68f9      	ldr	r1, [r7, #12]
 800580c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005810:	4013      	ands	r3, r2
 8005812:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	0159      	lsls	r1, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	440b      	add	r3, r1
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	4619      	mov	r1, r3
 8005830:	4b35      	ldr	r3, [pc, #212]	; (8005908 <USB_DeactivateEndpoint+0x1b0>)
 8005832:	4013      	ands	r3, r2
 8005834:	600b      	str	r3, [r1, #0]
 8005836:	e060      	b.n	80058fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800584a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800584e:	d11f      	bne.n	8005890 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	0151      	lsls	r1, r2, #5
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	440a      	add	r2, r1
 8005866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800586e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800588e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	2101      	movs	r1, #1
 80058a2:	fa01 f303 	lsl.w	r3, r1, r3
 80058a6:	041b      	lsls	r3, r3, #16
 80058a8:	43db      	mvns	r3, r3
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b0:	4013      	ands	r3, r2
 80058b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f003 030f 	and.w	r3, r3, #15
 80058c4:	2101      	movs	r1, #1
 80058c6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	43db      	mvns	r3, r3
 80058ce:	68f9      	ldr	r1, [r7, #12]
 80058d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d4:	4013      	ands	r3, r2
 80058d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	0159      	lsls	r1, r3, #5
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	440b      	add	r3, r1
 80058ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f2:	4619      	mov	r1, r3
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <USB_DeactivateEndpoint+0x1b4>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	ec337800 	.word	0xec337800
 800590c:	eff37800 	.word	0xeff37800

08005910 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	; 0x28
 8005914:	af02      	add	r7, sp, #8
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	785b      	ldrb	r3, [r3, #1]
 800592c:	2b01      	cmp	r3, #1
 800592e:	f040 815c 	bne.w	8005bea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d132      	bne.n	80059a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005954:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005958:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800595c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	0151      	lsls	r1, r2, #5
 8005970:	69fa      	ldr	r2, [r7, #28]
 8005972:	440a      	add	r2, r1
 8005974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005978:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800597c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	440a      	add	r2, r1
 8005994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005998:	0cdb      	lsrs	r3, r3, #19
 800599a:	04db      	lsls	r3, r3, #19
 800599c:	6113      	str	r3, [r2, #16]
 800599e:	e074      	b.n	8005a8a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ba:	0cdb      	lsrs	r3, r3, #19
 80059bc:	04db      	lsls	r3, r3, #19
 80059be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	6959      	ldr	r1, [r3, #20]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	440b      	add	r3, r1
 80059fc:	1e59      	subs	r1, r3, #1
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a06:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a08:	4b9d      	ldr	r3, [pc, #628]	; (8005c80 <USB_EPStartXfer+0x370>)
 8005a0a:	400b      	ands	r3, r1
 8005a0c:	69b9      	ldr	r1, [r7, #24]
 8005a0e:	0148      	lsls	r0, r1, #5
 8005a10:	69f9      	ldr	r1, [r7, #28]
 8005a12:	4401      	add	r1, r0
 8005a14:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a32:	69b9      	ldr	r1, [r7, #24]
 8005a34:	0148      	lsls	r0, r1, #5
 8005a36:	69f9      	ldr	r1, [r7, #28]
 8005a38:	4401      	add	r1, r0
 8005a3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	78db      	ldrb	r3, [r3, #3]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d11f      	bne.n	8005a8a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a64:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a68:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	0151      	lsls	r1, r2, #5
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	440a      	add	r2, r1
 8005a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a88:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d14b      	bne.n	8005b28 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d009      	beq.n	8005aac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	78db      	ldrb	r3, [r3, #3]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d128      	bne.n	8005b06 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d110      	bne.n	8005ae6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	0151      	lsls	r1, r2, #5
 8005ad6:	69fa      	ldr	r2, [r7, #28]
 8005ad8:	440a      	add	r2, r1
 8005ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ade:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	e00f      	b.n	8005b06 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b04:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	0151      	lsls	r1, r2, #5
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	440a      	add	r2, r1
 8005b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	e12f      	b.n	8005d88 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	69fa      	ldr	r2, [r7, #28]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b46:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	78db      	ldrb	r3, [r3, #3]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d015      	beq.n	8005b7c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 8117 	beq.w	8005d88 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b70:	69f9      	ldr	r1, [r7, #28]
 8005b72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b76:	4313      	orrs	r3, r2
 8005b78:	634b      	str	r3, [r1, #52]	; 0x34
 8005b7a:	e105      	b.n	8005d88 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d110      	bne.n	8005bae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	0151      	lsls	r1, r2, #5
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	e00f      	b.n	8005bce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	68d9      	ldr	r1, [r3, #12]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	781a      	ldrb	r2, [r3, #0]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	b298      	uxth	r0, r3
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	4603      	mov	r3, r0
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 fa2b 	bl	800603e <USB_WritePacket>
 8005be8:	e0ce      	b.n	8005d88 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c04:	0cdb      	lsrs	r3, r3, #19
 8005c06:	04db      	lsls	r3, r3, #19
 8005c08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d126      	bne.n	8005c84 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c4c:	69b9      	ldr	r1, [r7, #24]
 8005c4e:	0148      	lsls	r0, r1, #5
 8005c50:	69f9      	ldr	r1, [r7, #28]
 8005c52:	4401      	add	r1, r0
 8005c54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	0151      	lsls	r1, r2, #5
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	440a      	add	r2, r1
 8005c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c7a:	6113      	str	r3, [r2, #16]
 8005c7c:	e036      	b.n	8005cec <USB_EPStartXfer+0x3dc>
 8005c7e:	bf00      	nop
 8005c80:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	1e5a      	subs	r2, r3, #1
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c98:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	8afb      	ldrh	r3, [r7, #22]
 8005caa:	04d9      	lsls	r1, r3, #19
 8005cac:	4b39      	ldr	r3, [pc, #228]	; (8005d94 <USB_EPStartXfer+0x484>)
 8005cae:	400b      	ands	r3, r1
 8005cb0:	69b9      	ldr	r1, [r7, #24]
 8005cb2:	0148      	lsls	r0, r1, #5
 8005cb4:	69f9      	ldr	r1, [r7, #28]
 8005cb6:	4401      	add	r1, r0
 8005cb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ccc:	691a      	ldr	r2, [r3, #16]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	8af9      	ldrh	r1, [r7, #22]
 8005cd4:	fb01 f303 	mul.w	r3, r1, r3
 8005cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cdc:	69b9      	ldr	r1, [r7, #24]
 8005cde:	0148      	lsls	r0, r1, #5
 8005ce0:	69f9      	ldr	r1, [r7, #28]
 8005ce2:	4401      	add	r1, r0
 8005ce4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cec:	79fb      	ldrb	r3, [r7, #7]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d10d      	bne.n	8005d0e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d009      	beq.n	8005d0e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	68d9      	ldr	r1, [r3, #12]
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0a:	460a      	mov	r2, r1
 8005d0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	78db      	ldrb	r3, [r3, #3]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d128      	bne.n	8005d68 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d110      	bne.n	8005d48 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	e00f      	b.n	8005d68 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	0151      	lsls	r1, r2, #5
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	440a      	add	r2, r1
 8005d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	1ff80000 	.word	0x1ff80000

08005d98 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	4613      	mov	r3, r2
 8005da4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	f040 80cd 	bne.w	8005f54 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d132      	bne.n	8005e28 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ddc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005de0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005de4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	0151      	lsls	r1, r2, #5
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	440a      	add	r2, r1
 8005dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	0151      	lsls	r1, r2, #5
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e20:	0cdb      	lsrs	r3, r3, #19
 8005e22:	04db      	lsls	r3, r3, #19
 8005e24:	6113      	str	r3, [r2, #16]
 8005e26:	e04e      	b.n	8005ec6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	0151      	lsls	r1, r2, #5
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	440a      	add	r2, r1
 8005e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e42:	0cdb      	lsrs	r3, r3, #19
 8005e44:	04db      	lsls	r3, r3, #19
 8005e46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	0151      	lsls	r1, r2, #5
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	440a      	add	r2, r1
 8005e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e6a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	695a      	ldr	r2, [r3, #20]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d903      	bls.n	8005e80 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	0151      	lsls	r1, r2, #5
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	440a      	add	r2, r1
 8005e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eb6:	6939      	ldr	r1, [r7, #16]
 8005eb8:	0148      	lsls	r0, r1, #5
 8005eba:	6979      	ldr	r1, [r7, #20]
 8005ebc:	4401      	add	r1, r0
 8005ebe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d11e      	bne.n	8005f0a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d009      	beq.n	8005ee8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	e092      	b.n	8006030 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	0151      	lsls	r1, r2, #5
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	440a      	add	r2, r1
 8005f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f28:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d07e      	beq.n	8006030 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	2101      	movs	r1, #1
 8005f44:	fa01 f303 	lsl.w	r3, r1, r3
 8005f48:	6979      	ldr	r1, [r7, #20]
 8005f4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	634b      	str	r3, [r1, #52]	; 0x34
 8005f52:	e06d      	b.n	8006030 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f6e:	0cdb      	lsrs	r3, r3, #19
 8005f70:	04db      	lsls	r3, r3, #19
 8005f72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f96:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd4:	691a      	ldr	r2, [r3, #16]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fde:	6939      	ldr	r1, [r7, #16]
 8005fe0:	0148      	lsls	r0, r1, #5
 8005fe2:	6979      	ldr	r1, [r7, #20]
 8005fe4:	4401      	add	r1, r0
 8005fe6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fea:	4313      	orrs	r3, r2
 8005fec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005fee:	79fb      	ldrb	r3, [r7, #7]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d10d      	bne.n	8006010 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d009      	beq.n	8006010 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	68d9      	ldr	r1, [r3, #12]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600c:	460a      	mov	r2, r1
 800600e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	440a      	add	r2, r1
 8006026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800602a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800602e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800603e:	b480      	push	{r7}
 8006040:	b089      	sub	sp, #36	; 0x24
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	4611      	mov	r1, r2
 800604a:	461a      	mov	r2, r3
 800604c:	460b      	mov	r3, r1
 800604e:	71fb      	strb	r3, [r7, #7]
 8006050:	4613      	mov	r3, r2
 8006052:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800605c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006060:	2b00      	cmp	r3, #0
 8006062:	d123      	bne.n	80060ac <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006064:	88bb      	ldrh	r3, [r7, #4]
 8006066:	3303      	adds	r3, #3
 8006068:	089b      	lsrs	r3, r3, #2
 800606a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800606c:	2300      	movs	r3, #0
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	e018      	b.n	80060a4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	031a      	lsls	r2, r3, #12
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	4413      	add	r3, r2
 800607a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800607e:	461a      	mov	r2, r3
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	3301      	adds	r3, #1
 800608a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	3301      	adds	r3, #1
 8006090:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	3301      	adds	r3, #1
 8006096:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	3301      	adds	r3, #1
 800609c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	3301      	adds	r3, #1
 80060a2:	61bb      	str	r3, [r7, #24]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d3e2      	bcc.n	8006072 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3724      	adds	r7, #36	; 0x24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b08b      	sub	sp, #44	; 0x2c
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	4613      	mov	r3, r2
 80060c6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060d0:	88fb      	ldrh	r3, [r7, #6]
 80060d2:	089b      	lsrs	r3, r3, #2
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060d8:	88fb      	ldrh	r3, [r7, #6]
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060e0:	2300      	movs	r3, #0
 80060e2:	623b      	str	r3, [r7, #32]
 80060e4:	e014      	b.n	8006110 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	601a      	str	r2, [r3, #0]
    pDest++;
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	3301      	adds	r3, #1
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	3301      	adds	r3, #1
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	3301      	adds	r3, #1
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	3301      	adds	r3, #1
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	3301      	adds	r3, #1
 800610e:	623b      	str	r3, [r7, #32]
 8006110:	6a3a      	ldr	r2, [r7, #32]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	429a      	cmp	r2, r3
 8006116:	d3e6      	bcc.n	80060e6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006118:	8bfb      	ldrh	r3, [r7, #30]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01e      	beq.n	800615c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006128:	461a      	mov	r2, r3
 800612a:	f107 0310 	add.w	r3, r7, #16
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	fa22 f303 	lsr.w	r3, r2, r3
 800613e:	b2da      	uxtb	r2, r3
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	701a      	strb	r2, [r3, #0]
      i++;
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	3301      	adds	r3, #1
 8006148:	623b      	str	r3, [r7, #32]
      pDest++;
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	3301      	adds	r3, #1
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006150:	8bfb      	ldrh	r3, [r7, #30]
 8006152:	3b01      	subs	r3, #1
 8006154:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006156:	8bfb      	ldrh	r3, [r7, #30]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1ea      	bne.n	8006132 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800615e:	4618      	mov	r0, r3
 8006160:	372c      	adds	r7, #44	; 0x2c
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d12c      	bne.n	80061e0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	db12      	blt.n	80061be <USB_EPSetStall+0x54>
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00f      	beq.n	80061be <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061bc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	0151      	lsls	r1, r2, #5
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	440a      	add	r2, r1
 80061d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	e02b      	b.n	8006238 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	db12      	blt.n	8006218 <USB_EPSetStall+0xae>
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00f      	beq.n	8006218 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	440a      	add	r2, r1
 800620e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006212:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006216:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006232:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006236:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	785b      	ldrb	r3, [r3, #1]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d128      	bne.n	80062b4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	0151      	lsls	r1, r2, #5
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	440a      	add	r2, r1
 8006278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006280:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	78db      	ldrb	r3, [r3, #3]
 8006286:	2b03      	cmp	r3, #3
 8006288:	d003      	beq.n	8006292 <USB_EPClearStall+0x4c>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	78db      	ldrb	r3, [r3, #3]
 800628e:	2b02      	cmp	r3, #2
 8006290:	d138      	bne.n	8006304 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	0151      	lsls	r1, r2, #5
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	440a      	add	r2, r1
 80062a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	e027      	b.n	8006304 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	0151      	lsls	r1, r2, #5
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	440a      	add	r2, r1
 80062ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	78db      	ldrb	r3, [r3, #3]
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d003      	beq.n	80062e4 <USB_EPClearStall+0x9e>
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	78db      	ldrb	r3, [r3, #3]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d10f      	bne.n	8006304 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	0151      	lsls	r1, r2, #5
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	440a      	add	r2, r1
 80062fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006302:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	460b      	mov	r3, r1
 800631c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006330:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006334:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	011b      	lsls	r3, r3, #4
 8006342:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006346:	68f9      	ldr	r1, [r7, #12]
 8006348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800634c:	4313      	orrs	r3, r2
 800634e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006378:	f023 0303 	bic.w	r3, r3, #3
 800637c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800638c:	f023 0302 	bic.w	r3, r3, #2
 8006390:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063ce:	f043 0302 	orr.w	r3, r3, #2
 80063d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4013      	ands	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063fa:	68fb      	ldr	r3, [r7, #12]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	4013      	ands	r3, r2
 800642a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	0c1b      	lsrs	r3, r3, #16
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	4013      	ands	r3, r2
 800645e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	b29b      	uxth	r3, r3
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	4013      	ands	r3, r2
 800649c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800649e:	68bb      	ldr	r3, [r7, #8]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ce:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	fa22 f303 	lsr.w	r3, r2, r3
 80064dc:	01db      	lsls	r3, r3, #7
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064e6:	78fb      	ldrb	r3, [r7, #3]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4013      	ands	r3, r2
 80064f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064fa:	68bb      	ldr	r3, [r7, #8]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	f003 0301 	and.w	r3, r3, #1
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006542:	f023 0307 	bic.w	r3, r3, #7
 8006546:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800655a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
	...

0800656c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	460b      	mov	r3, r1
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	333c      	adds	r3, #60	; 0x3c
 8006582:	3304      	adds	r3, #4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	4a26      	ldr	r2, [pc, #152]	; (8006624 <USB_EP0_OutStart+0xb8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d90a      	bls.n	80065a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800659c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a0:	d101      	bne.n	80065a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	e037      	b.n	8006616 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ac:	461a      	mov	r2, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d4:	f043 0318 	orr.w	r3, r3, #24
 80065d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80065ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065ee:	7afb      	ldrb	r3, [r7, #11]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d10f      	bne.n	8006614 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fa:	461a      	mov	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800660e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006612:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	4f54300a 	.word	0x4f54300a

08006628 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3301      	adds	r3, #1
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	4a13      	ldr	r2, [pc, #76]	; (8006688 <USB_CoreReset+0x60>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d901      	bls.n	8006644 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e01a      	b.n	800667a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	daf3      	bge.n	8006634 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f043 0201 	orr.w	r2, r3, #1
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3301      	adds	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	4a09      	ldr	r2, [pc, #36]	; (8006688 <USB_CoreReset+0x60>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d901      	bls.n	800666c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e006      	b.n	800667a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b01      	cmp	r3, #1
 8006676:	d0f1      	beq.n	800665c <USB_CoreReset+0x34>

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	00030d40 	.word	0x00030d40

0800668c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006698:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800669c:	f002 fe26 	bl	80092ec <USBD_static_malloc>
 80066a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d105      	bne.n	80066b4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80066b0:	2302      	movs	r3, #2
 80066b2:	e066      	b.n	8006782 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	7c1b      	ldrb	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d119      	bne.n	80066f8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066c8:	2202      	movs	r2, #2
 80066ca:	2181      	movs	r1, #129	; 0x81
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f002 fcea 	bl	80090a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066dc:	2202      	movs	r2, #2
 80066de:	2101      	movs	r1, #1
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f002 fce0 	bl	80090a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2210      	movs	r2, #16
 80066f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80066f6:	e016      	b.n	8006726 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066f8:	2340      	movs	r3, #64	; 0x40
 80066fa:	2202      	movs	r2, #2
 80066fc:	2181      	movs	r1, #129	; 0x81
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f002 fcd1 	bl	80090a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800670a:	2340      	movs	r3, #64	; 0x40
 800670c:	2202      	movs	r2, #2
 800670e:	2101      	movs	r1, #1
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f002 fcc8 	bl	80090a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2210      	movs	r2, #16
 8006722:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006726:	2308      	movs	r3, #8
 8006728:	2203      	movs	r2, #3
 800672a:	2182      	movs	r1, #130	; 0x82
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f002 fcba 	bl	80090a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	7c1b      	ldrb	r3, [r3, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d109      	bne.n	8006770 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006766:	2101      	movs	r1, #1
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f002 fd8b 	bl	8009284 <USBD_LL_PrepareReceive>
 800676e:	e007      	b.n	8006780 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006776:	2340      	movs	r3, #64	; 0x40
 8006778:	2101      	movs	r1, #1
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f002 fd82 	bl	8009284 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b082      	sub	sp, #8
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006796:	2181      	movs	r1, #129	; 0x81
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f002 fcaa 	bl	80090f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80067a4:	2101      	movs	r1, #1
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f002 fca3 	bl	80090f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80067b4:	2182      	movs	r1, #130	; 0x82
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f002 fc9b 	bl	80090f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00e      	beq.n	80067f4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067e6:	4618      	mov	r0, r3
 80067e8:	f002 fd8e 	bl	8009308 <USBD_static_free>
    pdev->pClassData = NULL;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006810:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006824:	2303      	movs	r3, #3
 8006826:	e0af      	b.n	8006988 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006830:	2b00      	cmp	r3, #0
 8006832:	d03f      	beq.n	80068b4 <USBD_CDC_Setup+0xb4>
 8006834:	2b20      	cmp	r3, #32
 8006836:	f040 809f 	bne.w	8006978 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	88db      	ldrh	r3, [r3, #6]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d02e      	beq.n	80068a0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	b25b      	sxtb	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	da16      	bge.n	800687a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006858:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	88d2      	ldrh	r2, [r2, #6]
 800685e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	88db      	ldrh	r3, [r3, #6]
 8006864:	2b07      	cmp	r3, #7
 8006866:	bf28      	it	cs
 8006868:	2307      	movcs	r3, #7
 800686a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	89fa      	ldrh	r2, [r7, #14]
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 fae9 	bl	8007e4a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006878:	e085      	b.n	8006986 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	785a      	ldrb	r2, [r3, #1]
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	88db      	ldrh	r3, [r3, #6]
 8006888:	b2da      	uxtb	r2, r3
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006890:	6939      	ldr	r1, [r7, #16]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	88db      	ldrh	r3, [r3, #6]
 8006896:	461a      	mov	r2, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 fb02 	bl	8007ea2 <USBD_CtlPrepareRx>
      break;
 800689e:	e072      	b.n	8006986 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	7850      	ldrb	r0, [r2, #1]
 80068ac:	2200      	movs	r2, #0
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	4798      	blx	r3
      break;
 80068b2:	e068      	b.n	8006986 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	785b      	ldrb	r3, [r3, #1]
 80068b8:	2b0b      	cmp	r3, #11
 80068ba:	d852      	bhi.n	8006962 <USBD_CDC_Setup+0x162>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <USBD_CDC_Setup+0xc4>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068f5 	.word	0x080068f5
 80068c8:	08006971 	.word	0x08006971
 80068cc:	08006963 	.word	0x08006963
 80068d0:	08006963 	.word	0x08006963
 80068d4:	08006963 	.word	0x08006963
 80068d8:	08006963 	.word	0x08006963
 80068dc:	08006963 	.word	0x08006963
 80068e0:	08006963 	.word	0x08006963
 80068e4:	08006963 	.word	0x08006963
 80068e8:	08006963 	.word	0x08006963
 80068ec:	0800691f 	.word	0x0800691f
 80068f0:	08006949 	.word	0x08006949
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d107      	bne.n	8006910 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006900:	f107 030a 	add.w	r3, r7, #10
 8006904:	2202      	movs	r2, #2
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 fa9e 	bl	8007e4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800690e:	e032      	b.n	8006976 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 fa28 	bl	8007d68 <USBD_CtlError>
            ret = USBD_FAIL;
 8006918:	2303      	movs	r3, #3
 800691a:	75fb      	strb	r3, [r7, #23]
          break;
 800691c:	e02b      	b.n	8006976 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b03      	cmp	r3, #3
 8006928:	d107      	bne.n	800693a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800692a:	f107 030d 	add.w	r3, r7, #13
 800692e:	2201      	movs	r2, #1
 8006930:	4619      	mov	r1, r3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f001 fa89 	bl	8007e4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006938:	e01d      	b.n	8006976 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 fa13 	bl	8007d68 <USBD_CtlError>
            ret = USBD_FAIL;
 8006942:	2303      	movs	r3, #3
 8006944:	75fb      	strb	r3, [r7, #23]
          break;
 8006946:	e016      	b.n	8006976 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b03      	cmp	r3, #3
 8006952:	d00f      	beq.n	8006974 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f001 fa06 	bl	8007d68 <USBD_CtlError>
            ret = USBD_FAIL;
 800695c:	2303      	movs	r3, #3
 800695e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006960:	e008      	b.n	8006974 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 f9ff 	bl	8007d68 <USBD_CtlError>
          ret = USBD_FAIL;
 800696a:	2303      	movs	r3, #3
 800696c:	75fb      	strb	r3, [r7, #23]
          break;
 800696e:	e002      	b.n	8006976 <USBD_CDC_Setup+0x176>
          break;
 8006970:	bf00      	nop
 8006972:	e008      	b.n	8006986 <USBD_CDC_Setup+0x186>
          break;
 8006974:	bf00      	nop
      }
      break;
 8006976:	e006      	b.n	8006986 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f001 f9f4 	bl	8007d68 <USBD_CtlError>
      ret = USBD_FAIL;
 8006980:	2303      	movs	r3, #3
 8006982:	75fb      	strb	r3, [r7, #23]
      break;
 8006984:	bf00      	nop
  }

  return (uint8_t)ret;
 8006986:	7dfb      	ldrb	r3, [r7, #23]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80069a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e04f      	b.n	8006a52 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80069ba:	78fa      	ldrb	r2, [r7, #3]
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	440b      	add	r3, r1
 80069c8:	3318      	adds	r3, #24
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d029      	beq.n	8006a24 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80069d0:	78fa      	ldrb	r2, [r7, #3]
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	440b      	add	r3, r1
 80069de:	3318      	adds	r3, #24
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	78f9      	ldrb	r1, [r7, #3]
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	460b      	mov	r3, r1
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	1a5b      	subs	r3, r3, r1
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4403      	add	r3, r0
 80069f0:	3344      	adds	r3, #68	; 0x44
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80069f8:	fb01 f303 	mul.w	r3, r1, r3
 80069fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d110      	bne.n	8006a24 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006a02:	78fa      	ldrb	r2, [r7, #3]
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	440b      	add	r3, r1
 8006a10:	3318      	adds	r3, #24
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a16:	78f9      	ldrb	r1, [r7, #3]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f002 fc10 	bl	8009242 <USBD_LL_Transmit>
 8006a22:	e015      	b.n	8006a50 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006a4c:	78fa      	ldrb	r2, [r7, #3]
 8006a4e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	460b      	mov	r3, r1
 8006a64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e015      	b.n	8006aa8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f002 fc20 	bl	80092c6 <USBD_LL_GetRxDataSize>
 8006a86:	4602      	mov	r2, r0
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006abe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e01b      	b.n	8006b02 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d015      	beq.n	8006b00 <USBD_CDC_EP0_RxReady+0x50>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ada:	2bff      	cmp	r3, #255	; 0xff
 8006adc:	d010      	beq.n	8006b00 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006aec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006af4:	b292      	uxth	r2, r2
 8006af6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	22ff      	movs	r2, #255	; 0xff
 8006afc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2243      	movs	r2, #67	; 0x43
 8006b18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006b1a:	4b03      	ldr	r3, [pc, #12]	; (8006b28 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	20000090 	.word	0x20000090

08006b2c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2243      	movs	r2, #67	; 0x43
 8006b38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006b3a:	4b03      	ldr	r3, [pc, #12]	; (8006b48 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	2000004c 	.word	0x2000004c

08006b4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2243      	movs	r2, #67	; 0x43
 8006b58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006b5a:	4b03      	ldr	r3, [pc, #12]	; (8006b68 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	200000d4 	.word	0x200000d4

08006b6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	220a      	movs	r2, #10
 8006b78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b7a:	4b03      	ldr	r3, [pc, #12]	; (8006b88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	20000008 	.word	0x20000008

08006b8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e004      	b.n	8006baa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b087      	sub	sp, #28
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bc8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e008      	b.n	8006be6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	371c      	adds	r7, #28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c02:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e004      	b.n	8006c18 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e016      	b.n	8006c70 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	7c1b      	ldrb	r3, [r3, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d109      	bne.n	8006c5e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c54:	2101      	movs	r1, #1
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f002 fb14 	bl	8009284 <USBD_LL_PrepareReceive>
 8006c5c:	e007      	b.n	8006c6e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c64:	2340      	movs	r3, #64	; 0x40
 8006c66:	2101      	movs	r1, #1
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f002 fb0b 	bl	8009284 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	4613      	mov	r3, r2
 8006c84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e01f      	b.n	8006cd0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	79fa      	ldrb	r2, [r7, #7]
 8006cc2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f002 f987 	bl	8008fd8 <USBD_LL_Init>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e016      	b.n	8006d1e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	f107 020e 	add.w	r2, r7, #14
 8006d10:	4610      	mov	r0, r2
 8006d12:	4798      	blx	r3
 8006d14:	4602      	mov	r2, r0
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f002 f99e 	bl	8009070 <USBD_LL_Start>
 8006d34:	4603      	mov	r3, r0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d60:	2303      	movs	r3, #3
 8006d62:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d009      	beq.n	8006d82 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	78fa      	ldrb	r2, [r7, #3]
 8006d78:	4611      	mov	r1, r2
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	4798      	blx	r3
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	460b      	mov	r3, r1
 8006d96:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d007      	beq.n	8006db2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	78fa      	ldrb	r2, [r7, #3]
 8006dac:	4611      	mov	r1, r2
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4798      	blx	r3
  }

  return USBD_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 ff90 	bl	8007cf4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006de2:	461a      	mov	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006df0:	f003 031f 	and.w	r3, r3, #31
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d01a      	beq.n	8006e2e <USBD_LL_SetupStage+0x72>
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d822      	bhi.n	8006e42 <USBD_LL_SetupStage+0x86>
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <USBD_LL_SetupStage+0x4a>
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d00a      	beq.n	8006e1a <USBD_LL_SetupStage+0x5e>
 8006e04:	e01d      	b.n	8006e42 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fa62 	bl	80072d8 <USBD_StdDevReq>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73fb      	strb	r3, [r7, #15]
      break;
 8006e18:	e020      	b.n	8006e5c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fac6 	bl	80073b4 <USBD_StdItfReq>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e2c:	e016      	b.n	8006e5c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fb05 	bl	8007446 <USBD_StdEPReq>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e40:	e00c      	b.n	8006e5c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f002 f96d 	bl	8009130 <USBD_LL_StallEP>
 8006e56:	4603      	mov	r3, r0
 8006e58:	73fb      	strb	r3, [r7, #15]
      break;
 8006e5a:	bf00      	nop
  }

  return ret;
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b086      	sub	sp, #24
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	607a      	str	r2, [r7, #4]
 8006e72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006e74:	7afb      	ldrb	r3, [r7, #11]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d138      	bne.n	8006eec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e80:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d14a      	bne.n	8006f22 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d913      	bls.n	8006ec0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	1ad2      	subs	r2, r2, r3
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	bf28      	it	cs
 8006eb2:	4613      	movcs	r3, r2
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6879      	ldr	r1, [r7, #4]
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f001 f80f 	bl	8007edc <USBD_CtlContinueRx>
 8006ebe:	e030      	b.n	8006f22 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d10b      	bne.n	8006ee4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f001 f80a 	bl	8007efe <USBD_CtlSendStatus>
 8006eea:	e01a      	b.n	8006f22 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d114      	bne.n	8006f22 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00e      	beq.n	8006f22 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	7afa      	ldrb	r2, [r7, #11]
 8006f0e:	4611      	mov	r1, r2
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	4798      	blx	r3
 8006f14:	4603      	mov	r3, r0
 8006f16:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	e000      	b.n	8006f24 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	460b      	mov	r3, r1
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f3a:	7afb      	ldrb	r3, [r7, #11]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d16b      	bne.n	8007018 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3314      	adds	r3, #20
 8006f44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d156      	bne.n	8006ffe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d914      	bls.n	8006f86 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	1ad2      	subs	r2, r2, r3
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	6879      	ldr	r1, [r7, #4]
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 ff84 	bl	8007e80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f78:	2300      	movs	r3, #0
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f002 f980 	bl	8009284 <USBD_LL_PrepareReceive>
 8006f84:	e03b      	b.n	8006ffe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d11c      	bne.n	8006fcc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d316      	bcc.n	8006fcc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d20f      	bcs.n	8006fcc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fac:	2200      	movs	r2, #0
 8006fae:	2100      	movs	r1, #0
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 ff65 	bl	8007e80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f002 f95d 	bl	8009284 <USBD_LL_PrepareReceive>
 8006fca:	e018      	b.n	8006ffe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d10b      	bne.n	8006ff0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ff0:	2180      	movs	r1, #128	; 0x80
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f002 f89c 	bl	8009130 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 ff93 	bl	8007f24 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007004:	2b01      	cmp	r3, #1
 8007006:	d122      	bne.n	800704e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f7ff fe98 	bl	8006d3e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007016:	e01a      	b.n	800704e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b03      	cmp	r3, #3
 8007022:	d114      	bne.n	800704e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00e      	beq.n	800704e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	7afa      	ldrb	r2, [r7, #11]
 800703a:	4611      	mov	r1, r2
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	4798      	blx	r3
 8007040:	4603      	mov	r3, r0
 8007042:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	e000      	b.n	8007050 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007088:	2303      	movs	r3, #3
 800708a:	e02f      	b.n	80070ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00f      	beq.n	80070b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6852      	ldr	r2, [r2, #4]
 80070ae:	b2d2      	uxtb	r2, r2
 80070b0:	4611      	mov	r1, r2
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070b6:	2340      	movs	r3, #64	; 0x40
 80070b8:	2200      	movs	r2, #0
 80070ba:	2100      	movs	r1, #0
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 fff2 	bl	80090a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2240      	movs	r2, #64	; 0x40
 80070ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070d2:	2340      	movs	r3, #64	; 0x40
 80070d4:	2200      	movs	r2, #0
 80070d6:	2180      	movs	r1, #128	; 0x80
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 ffe4 	bl	80090a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2240      	movs	r2, #64	; 0x40
 80070e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	78fa      	ldrb	r2, [r7, #3]
 8007104:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007122:	b2da      	uxtb	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2204      	movs	r2, #4
 800712e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b04      	cmp	r3, #4
 8007152:	d106      	bne.n	8007162 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800715a:	b2da      	uxtb	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007182:	2303      	movs	r3, #3
 8007184:	e012      	b.n	80071ac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b03      	cmp	r3, #3
 8007190:	d10b      	bne.n	80071aa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e014      	b.n	80071f8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d10d      	bne.n	80071f6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d007      	beq.n	80071f6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	78fa      	ldrb	r2, [r7, #3]
 80071f0:	4611      	mov	r1, r2
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007216:	2303      	movs	r3, #3
 8007218:	e014      	b.n	8007244 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b03      	cmp	r3, #3
 8007224:	d10d      	bne.n	8007242 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	2b00      	cmp	r3, #0
 8007230:	d007      	beq.n	8007242 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	78fa      	ldrb	r2, [r7, #3]
 800723c:	4611      	mov	r1, r2
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007278:	2b00      	cmp	r3, #0
 800727a:	d009      	beq.n	8007290 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6852      	ldr	r2, [r2, #4]
 8007288:	b2d2      	uxtb	r2, r2
 800728a:	4611      	mov	r1, r2
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	4798      	blx	r3
  }

  return USBD_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800729a:	b480      	push	{r7}
 800729c:	b087      	sub	sp, #28
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	3301      	adds	r3, #1
 80072b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80072b8:	8a3b      	ldrh	r3, [r7, #16]
 80072ba:	021b      	lsls	r3, r3, #8
 80072bc:	b21a      	sxth	r2, r3
 80072be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	b21b      	sxth	r3, r3
 80072c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80072c8:	89fb      	ldrh	r3, [r7, #14]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	371c      	adds	r7, #28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
	...

080072d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ee:	2b40      	cmp	r3, #64	; 0x40
 80072f0:	d005      	beq.n	80072fe <USBD_StdDevReq+0x26>
 80072f2:	2b40      	cmp	r3, #64	; 0x40
 80072f4:	d853      	bhi.n	800739e <USBD_StdDevReq+0xc6>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00b      	beq.n	8007312 <USBD_StdDevReq+0x3a>
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	d14f      	bne.n	800739e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	4798      	blx	r3
 800730c:	4603      	mov	r3, r0
 800730e:	73fb      	strb	r3, [r7, #15]
      break;
 8007310:	e04a      	b.n	80073a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	785b      	ldrb	r3, [r3, #1]
 8007316:	2b09      	cmp	r3, #9
 8007318:	d83b      	bhi.n	8007392 <USBD_StdDevReq+0xba>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <USBD_StdDevReq+0x48>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007375 	.word	0x08007375
 8007324:	08007389 	.word	0x08007389
 8007328:	08007393 	.word	0x08007393
 800732c:	0800737f 	.word	0x0800737f
 8007330:	08007393 	.word	0x08007393
 8007334:	08007353 	.word	0x08007353
 8007338:	08007349 	.word	0x08007349
 800733c:	08007393 	.word	0x08007393
 8007340:	0800736b 	.word	0x0800736b
 8007344:	0800735d 	.word	0x0800735d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f9de 	bl	800770c <USBD_GetDescriptor>
          break;
 8007350:	e024      	b.n	800739c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fb43 	bl	80079e0 <USBD_SetAddress>
          break;
 800735a:	e01f      	b.n	800739c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fb82 	bl	8007a68 <USBD_SetConfig>
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]
          break;
 8007368:	e018      	b.n	800739c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fc21 	bl	8007bb4 <USBD_GetConfig>
          break;
 8007372:	e013      	b.n	800739c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fc52 	bl	8007c20 <USBD_GetStatus>
          break;
 800737c:	e00e      	b.n	800739c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fc81 	bl	8007c88 <USBD_SetFeature>
          break;
 8007386:	e009      	b.n	800739c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fc90 	bl	8007cb0 <USBD_ClrFeature>
          break;
 8007390:	e004      	b.n	800739c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fce7 	bl	8007d68 <USBD_CtlError>
          break;
 800739a:	bf00      	nop
      }
      break;
 800739c:	e004      	b.n	80073a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fce1 	bl	8007d68 <USBD_CtlError>
      break;
 80073a6:	bf00      	nop
  }

  return ret;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop

080073b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073ca:	2b40      	cmp	r3, #64	; 0x40
 80073cc:	d005      	beq.n	80073da <USBD_StdItfReq+0x26>
 80073ce:	2b40      	cmp	r3, #64	; 0x40
 80073d0:	d82f      	bhi.n	8007432 <USBD_StdItfReq+0x7e>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <USBD_StdItfReq+0x26>
 80073d6:	2b20      	cmp	r3, #32
 80073d8:	d12b      	bne.n	8007432 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d81d      	bhi.n	8007424 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	889b      	ldrh	r3, [r3, #4]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d813      	bhi.n	800741a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	4798      	blx	r3
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	88db      	ldrh	r3, [r3, #6]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d110      	bne.n	800742e <USBD_StdItfReq+0x7a>
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10d      	bne.n	800742e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fd73 	bl	8007efe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007418:	e009      	b.n	800742e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fca3 	bl	8007d68 <USBD_CtlError>
          break;
 8007422:	e004      	b.n	800742e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fc9e 	bl	8007d68 <USBD_CtlError>
          break;
 800742c:	e000      	b.n	8007430 <USBD_StdItfReq+0x7c>
          break;
 800742e:	bf00      	nop
      }
      break;
 8007430:	e004      	b.n	800743c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fc97 	bl	8007d68 <USBD_CtlError>
      break;
 800743a:	bf00      	nop
  }

  return ret;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	889b      	ldrh	r3, [r3, #4]
 8007458:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007462:	2b40      	cmp	r3, #64	; 0x40
 8007464:	d007      	beq.n	8007476 <USBD_StdEPReq+0x30>
 8007466:	2b40      	cmp	r3, #64	; 0x40
 8007468:	f200 8145 	bhi.w	80076f6 <USBD_StdEPReq+0x2b0>
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00c      	beq.n	800748a <USBD_StdEPReq+0x44>
 8007470:	2b20      	cmp	r3, #32
 8007472:	f040 8140 	bne.w	80076f6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	4798      	blx	r3
 8007484:	4603      	mov	r3, r0
 8007486:	73fb      	strb	r3, [r7, #15]
      break;
 8007488:	e13a      	b.n	8007700 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	785b      	ldrb	r3, [r3, #1]
 800748e:	2b03      	cmp	r3, #3
 8007490:	d007      	beq.n	80074a2 <USBD_StdEPReq+0x5c>
 8007492:	2b03      	cmp	r3, #3
 8007494:	f300 8129 	bgt.w	80076ea <USBD_StdEPReq+0x2a4>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d07f      	beq.n	800759c <USBD_StdEPReq+0x156>
 800749c:	2b01      	cmp	r3, #1
 800749e:	d03c      	beq.n	800751a <USBD_StdEPReq+0xd4>
 80074a0:	e123      	b.n	80076ea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d002      	beq.n	80074b4 <USBD_StdEPReq+0x6e>
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d016      	beq.n	80074e0 <USBD_StdEPReq+0x9a>
 80074b2:	e02c      	b.n	800750e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00d      	beq.n	80074d6 <USBD_StdEPReq+0x90>
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	2b80      	cmp	r3, #128	; 0x80
 80074be:	d00a      	beq.n	80074d6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 fe33 	bl	8009130 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074ca:	2180      	movs	r1, #128	; 0x80
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f001 fe2f 	bl	8009130 <USBD_LL_StallEP>
 80074d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074d4:	e020      	b.n	8007518 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fc45 	bl	8007d68 <USBD_CtlError>
              break;
 80074de:	e01b      	b.n	8007518 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	885b      	ldrh	r3, [r3, #2]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10e      	bne.n	8007506 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00b      	beq.n	8007506 <USBD_StdEPReq+0xc0>
 80074ee:	7bbb      	ldrb	r3, [r7, #14]
 80074f0:	2b80      	cmp	r3, #128	; 0x80
 80074f2:	d008      	beq.n	8007506 <USBD_StdEPReq+0xc0>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	88db      	ldrh	r3, [r3, #6]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f001 fe15 	bl	8009130 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fcf9 	bl	8007efe <USBD_CtlSendStatus>

              break;
 800750c:	e004      	b.n	8007518 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fc29 	bl	8007d68 <USBD_CtlError>
              break;
 8007516:	bf00      	nop
          }
          break;
 8007518:	e0ec      	b.n	80076f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d002      	beq.n	800752c <USBD_StdEPReq+0xe6>
 8007526:	2b03      	cmp	r3, #3
 8007528:	d016      	beq.n	8007558 <USBD_StdEPReq+0x112>
 800752a:	e030      	b.n	800758e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00d      	beq.n	800754e <USBD_StdEPReq+0x108>
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	2b80      	cmp	r3, #128	; 0x80
 8007536:	d00a      	beq.n	800754e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f001 fdf7 	bl	8009130 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007542:	2180      	movs	r1, #128	; 0x80
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f001 fdf3 	bl	8009130 <USBD_LL_StallEP>
 800754a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800754c:	e025      	b.n	800759a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fc09 	bl	8007d68 <USBD_CtlError>
              break;
 8007556:	e020      	b.n	800759a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	885b      	ldrh	r3, [r3, #2]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d11b      	bne.n	8007598 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007566:	2b00      	cmp	r3, #0
 8007568:	d004      	beq.n	8007574 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 fdfd 	bl	800916e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fcc2 	bl	8007efe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	4798      	blx	r3
 8007588:	4603      	mov	r3, r0
 800758a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800758c:	e004      	b.n	8007598 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fbe9 	bl	8007d68 <USBD_CtlError>
              break;
 8007596:	e000      	b.n	800759a <USBD_StdEPReq+0x154>
              break;
 8007598:	bf00      	nop
          }
          break;
 800759a:	e0ab      	b.n	80076f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d002      	beq.n	80075ae <USBD_StdEPReq+0x168>
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d032      	beq.n	8007612 <USBD_StdEPReq+0x1cc>
 80075ac:	e097      	b.n	80076de <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075ae:	7bbb      	ldrb	r3, [r7, #14]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d007      	beq.n	80075c4 <USBD_StdEPReq+0x17e>
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
 80075b6:	2b80      	cmp	r3, #128	; 0x80
 80075b8:	d004      	beq.n	80075c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fbd3 	bl	8007d68 <USBD_CtlError>
                break;
 80075c2:	e091      	b.n	80076e8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	da0b      	bge.n	80075e4 <USBD_StdEPReq+0x19e>
 80075cc:	7bbb      	ldrb	r3, [r7, #14]
 80075ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075d2:	4613      	mov	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	3310      	adds	r3, #16
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	4413      	add	r3, r2
 80075e0:	3304      	adds	r3, #4
 80075e2:	e00b      	b.n	80075fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075ea:	4613      	mov	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	4413      	add	r3, r2
 80075fa:	3304      	adds	r3, #4
 80075fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2202      	movs	r2, #2
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fc1d 	bl	8007e4a <USBD_CtlSendData>
              break;
 8007610:	e06a      	b.n	80076e8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007612:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007616:	2b00      	cmp	r3, #0
 8007618:	da11      	bge.n	800763e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800761a:	7bbb      	ldrb	r3, [r7, #14]
 800761c:	f003 020f 	and.w	r2, r3, #15
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	440b      	add	r3, r1
 800762c:	3324      	adds	r3, #36	; 0x24
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d117      	bne.n	8007664 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fb96 	bl	8007d68 <USBD_CtlError>
                  break;
 800763c:	e054      	b.n	80076e8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	f003 020f 	and.w	r2, r3, #15
 8007644:	6879      	ldr	r1, [r7, #4]
 8007646:	4613      	mov	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	440b      	add	r3, r1
 8007650:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d104      	bne.n	8007664 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fb83 	bl	8007d68 <USBD_CtlError>
                  break;
 8007662:	e041      	b.n	80076e8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007664:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007668:	2b00      	cmp	r3, #0
 800766a:	da0b      	bge.n	8007684 <USBD_StdEPReq+0x23e>
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	3310      	adds	r3, #16
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	4413      	add	r3, r2
 8007680:	3304      	adds	r3, #4
 8007682:	e00b      	b.n	800769c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	4413      	add	r3, r2
 800769a:	3304      	adds	r3, #4
 800769c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <USBD_StdEPReq+0x264>
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	2b80      	cmp	r3, #128	; 0x80
 80076a8:	d103      	bne.n	80076b2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2200      	movs	r2, #0
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	e00e      	b.n	80076d0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f001 fd78 	bl	80091ac <USBD_LL_IsStallEP>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2201      	movs	r2, #1
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	e002      	b.n	80076d0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2202      	movs	r2, #2
 80076d4:	4619      	mov	r1, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fbb7 	bl	8007e4a <USBD_CtlSendData>
              break;
 80076dc:	e004      	b.n	80076e8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fb41 	bl	8007d68 <USBD_CtlError>
              break;
 80076e6:	bf00      	nop
          }
          break;
 80076e8:	e004      	b.n	80076f4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fb3b 	bl	8007d68 <USBD_CtlError>
          break;
 80076f2:	bf00      	nop
      }
      break;
 80076f4:	e004      	b.n	8007700 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fb35 	bl	8007d68 <USBD_CtlError>
      break;
 80076fe:	bf00      	nop
  }

  return ret;
 8007700:	7bfb      	ldrb	r3, [r7, #15]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	885b      	ldrh	r3, [r3, #2]
 8007726:	0a1b      	lsrs	r3, r3, #8
 8007728:	b29b      	uxth	r3, r3
 800772a:	3b01      	subs	r3, #1
 800772c:	2b06      	cmp	r3, #6
 800772e:	f200 8128 	bhi.w	8007982 <USBD_GetDescriptor+0x276>
 8007732:	a201      	add	r2, pc, #4	; (adr r2, 8007738 <USBD_GetDescriptor+0x2c>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	08007755 	.word	0x08007755
 800773c:	0800776d 	.word	0x0800776d
 8007740:	080077ad 	.word	0x080077ad
 8007744:	08007983 	.word	0x08007983
 8007748:	08007983 	.word	0x08007983
 800774c:	08007923 	.word	0x08007923
 8007750:	0800794f 	.word	0x0800794f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	7c12      	ldrb	r2, [r2, #16]
 8007760:	f107 0108 	add.w	r1, r7, #8
 8007764:	4610      	mov	r0, r2
 8007766:	4798      	blx	r3
 8007768:	60f8      	str	r0, [r7, #12]
      break;
 800776a:	e112      	b.n	8007992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	7c1b      	ldrb	r3, [r3, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10d      	bne.n	8007790 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	f107 0208 	add.w	r2, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3301      	adds	r3, #1
 800778a:	2202      	movs	r2, #2
 800778c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800778e:	e100      	b.n	8007992 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	f107 0208 	add.w	r2, r7, #8
 800779c:	4610      	mov	r0, r2
 800779e:	4798      	blx	r3
 80077a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3301      	adds	r3, #1
 80077a6:	2202      	movs	r2, #2
 80077a8:	701a      	strb	r2, [r3, #0]
      break;
 80077aa:	e0f2      	b.n	8007992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	885b      	ldrh	r3, [r3, #2]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b05      	cmp	r3, #5
 80077b4:	f200 80ac 	bhi.w	8007910 <USBD_GetDescriptor+0x204>
 80077b8:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <USBD_GetDescriptor+0xb4>)
 80077ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077be:	bf00      	nop
 80077c0:	080077d9 	.word	0x080077d9
 80077c4:	0800780d 	.word	0x0800780d
 80077c8:	08007841 	.word	0x08007841
 80077cc:	08007875 	.word	0x08007875
 80077d0:	080078a9 	.word	0x080078a9
 80077d4:	080078dd 	.word	0x080078dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	7c12      	ldrb	r2, [r2, #16]
 80077f0:	f107 0108 	add.w	r1, r7, #8
 80077f4:	4610      	mov	r0, r2
 80077f6:	4798      	blx	r3
 80077f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077fa:	e091      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fab2 	bl	8007d68 <USBD_CtlError>
            err++;
 8007804:	7afb      	ldrb	r3, [r7, #11]
 8007806:	3301      	adds	r3, #1
 8007808:	72fb      	strb	r3, [r7, #11]
          break;
 800780a:	e089      	b.n	8007920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00b      	beq.n	8007830 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	7c12      	ldrb	r2, [r2, #16]
 8007824:	f107 0108 	add.w	r1, r7, #8
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800782e:	e077      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fa98 	bl	8007d68 <USBD_CtlError>
            err++;
 8007838:	7afb      	ldrb	r3, [r7, #11]
 800783a:	3301      	adds	r3, #1
 800783c:	72fb      	strb	r3, [r7, #11]
          break;
 800783e:	e06f      	b.n	8007920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	7c12      	ldrb	r2, [r2, #16]
 8007858:	f107 0108 	add.w	r1, r7, #8
 800785c:	4610      	mov	r0, r2
 800785e:	4798      	blx	r3
 8007860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007862:	e05d      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fa7e 	bl	8007d68 <USBD_CtlError>
            err++;
 800786c:	7afb      	ldrb	r3, [r7, #11]
 800786e:	3301      	adds	r3, #1
 8007870:	72fb      	strb	r3, [r7, #11]
          break;
 8007872:	e055      	b.n	8007920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00b      	beq.n	8007898 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	7c12      	ldrb	r2, [r2, #16]
 800788c:	f107 0108 	add.w	r1, r7, #8
 8007890:	4610      	mov	r0, r2
 8007892:	4798      	blx	r3
 8007894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007896:	e043      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa64 	bl	8007d68 <USBD_CtlError>
            err++;
 80078a0:	7afb      	ldrb	r3, [r7, #11]
 80078a2:	3301      	adds	r3, #1
 80078a4:	72fb      	strb	r3, [r7, #11]
          break;
 80078a6:	e03b      	b.n	8007920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00b      	beq.n	80078cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	7c12      	ldrb	r2, [r2, #16]
 80078c0:	f107 0108 	add.w	r1, r7, #8
 80078c4:	4610      	mov	r0, r2
 80078c6:	4798      	blx	r3
 80078c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ca:	e029      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fa4a 	bl	8007d68 <USBD_CtlError>
            err++;
 80078d4:	7afb      	ldrb	r3, [r7, #11]
 80078d6:	3301      	adds	r3, #1
 80078d8:	72fb      	strb	r3, [r7, #11]
          break;
 80078da:	e021      	b.n	8007920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00b      	beq.n	8007900 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	7c12      	ldrb	r2, [r2, #16]
 80078f4:	f107 0108 	add.w	r1, r7, #8
 80078f8:	4610      	mov	r0, r2
 80078fa:	4798      	blx	r3
 80078fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078fe:	e00f      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fa30 	bl	8007d68 <USBD_CtlError>
            err++;
 8007908:	7afb      	ldrb	r3, [r7, #11]
 800790a:	3301      	adds	r3, #1
 800790c:	72fb      	strb	r3, [r7, #11]
          break;
 800790e:	e007      	b.n	8007920 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fa28 	bl	8007d68 <USBD_CtlError>
          err++;
 8007918:	7afb      	ldrb	r3, [r7, #11]
 800791a:	3301      	adds	r3, #1
 800791c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800791e:	bf00      	nop
      }
      break;
 8007920:	e037      	b.n	8007992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	7c1b      	ldrb	r3, [r3, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007932:	f107 0208 	add.w	r2, r7, #8
 8007936:	4610      	mov	r0, r2
 8007938:	4798      	blx	r3
 800793a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800793c:	e029      	b.n	8007992 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fa11 	bl	8007d68 <USBD_CtlError>
        err++;
 8007946:	7afb      	ldrb	r3, [r7, #11]
 8007948:	3301      	adds	r3, #1
 800794a:	72fb      	strb	r3, [r7, #11]
      break;
 800794c:	e021      	b.n	8007992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	7c1b      	ldrb	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10d      	bne.n	8007972 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	f107 0208 	add.w	r2, r7, #8
 8007962:	4610      	mov	r0, r2
 8007964:	4798      	blx	r3
 8007966:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3301      	adds	r3, #1
 800796c:	2207      	movs	r2, #7
 800796e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007970:	e00f      	b.n	8007992 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f9f7 	bl	8007d68 <USBD_CtlError>
        err++;
 800797a:	7afb      	ldrb	r3, [r7, #11]
 800797c:	3301      	adds	r3, #1
 800797e:	72fb      	strb	r3, [r7, #11]
      break;
 8007980:	e007      	b.n	8007992 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f9ef 	bl	8007d68 <USBD_CtlError>
      err++;
 800798a:	7afb      	ldrb	r3, [r7, #11]
 800798c:	3301      	adds	r3, #1
 800798e:	72fb      	strb	r3, [r7, #11]
      break;
 8007990:	bf00      	nop
  }

  if (err != 0U)
 8007992:	7afb      	ldrb	r3, [r7, #11]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d11e      	bne.n	80079d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	88db      	ldrh	r3, [r3, #6]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d016      	beq.n	80079ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80079a0:	893b      	ldrh	r3, [r7, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00e      	beq.n	80079c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	88da      	ldrh	r2, [r3, #6]
 80079aa:	893b      	ldrh	r3, [r7, #8]
 80079ac:	4293      	cmp	r3, r2
 80079ae:	bf28      	it	cs
 80079b0:	4613      	movcs	r3, r2
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079b6:	893b      	ldrh	r3, [r7, #8]
 80079b8:	461a      	mov	r2, r3
 80079ba:	68f9      	ldr	r1, [r7, #12]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fa44 	bl	8007e4a <USBD_CtlSendData>
 80079c2:	e009      	b.n	80079d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f9ce 	bl	8007d68 <USBD_CtlError>
 80079cc:	e004      	b.n	80079d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa95 	bl	8007efe <USBD_CtlSendStatus>
 80079d4:	e000      	b.n	80079d8 <USBD_GetDescriptor+0x2cc>
    return;
 80079d6:	bf00      	nop
  }
}
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop

080079e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	889b      	ldrh	r3, [r3, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d131      	bne.n	8007a56 <USBD_SetAddress+0x76>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	88db      	ldrh	r3, [r3, #6]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d12d      	bne.n	8007a56 <USBD_SetAddress+0x76>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	885b      	ldrh	r3, [r3, #2]
 80079fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007a00:	d829      	bhi.n	8007a56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	885b      	ldrh	r3, [r3, #2]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d104      	bne.n	8007a24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f9a3 	bl	8007d68 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a22:	e01d      	b.n	8007a60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	7bfa      	ldrb	r2, [r7, #15]
 8007a28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 fbe7 	bl	8009204 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fa61 	bl	8007efe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d004      	beq.n	8007a4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2202      	movs	r2, #2
 8007a46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a4a:	e009      	b.n	8007a60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a54:	e004      	b.n	8007a60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f985 	bl	8007d68 <USBD_CtlError>
  }
}
 8007a5e:	bf00      	nop
 8007a60:	bf00      	nop
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	885b      	ldrh	r3, [r3, #2]
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	4b4c      	ldr	r3, [pc, #304]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007a7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a80:	4b4b      	ldr	r3, [pc, #300]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d905      	bls.n	8007a94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f96c 	bl	8007d68 <USBD_CtlError>
    return USBD_FAIL;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e088      	b.n	8007ba6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d002      	beq.n	8007aa6 <USBD_SetConfig+0x3e>
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d025      	beq.n	8007af0 <USBD_SetConfig+0x88>
 8007aa4:	e071      	b.n	8007b8a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007aa6:	4b42      	ldr	r3, [pc, #264]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d01c      	beq.n	8007ae8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007aae:	4b40      	ldr	r3, [pc, #256]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ab8:	4b3d      	ldr	r3, [pc, #244]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff f948 	bl	8006d54 <USBD_SetClassConfig>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d004      	beq.n	8007ad8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f949 	bl	8007d68 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ad6:	e065      	b.n	8007ba4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fa10 	bl	8007efe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2203      	movs	r2, #3
 8007ae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ae6:	e05d      	b.n	8007ba4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fa08 	bl	8007efe <USBD_CtlSendStatus>
      break;
 8007aee:	e059      	b.n	8007ba4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007af0:	4b2f      	ldr	r3, [pc, #188]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d112      	bne.n	8007b1e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007b00:	4b2b      	ldr	r3, [pc, #172]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	461a      	mov	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b0a:	4b29      	ldr	r3, [pc, #164]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7ff f93b 	bl	8006d8c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f9f1 	bl	8007efe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b1c:	e042      	b.n	8007ba4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007b1e:	4b24      	ldr	r3, [pc, #144]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d02a      	beq.n	8007b82 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7ff f929 	bl	8006d8c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b3a:	4b1d      	ldr	r3, [pc, #116]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b44:	4b1a      	ldr	r3, [pc, #104]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff f902 	bl	8006d54 <USBD_SetClassConfig>
 8007b50:	4603      	mov	r3, r0
 8007b52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00f      	beq.n	8007b7a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f903 	bl	8007d68 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff f90e 	bl	8006d8c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b78:	e014      	b.n	8007ba4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f9bf 	bl	8007efe <USBD_CtlSendStatus>
      break;
 8007b80:	e010      	b.n	8007ba4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f9bb 	bl	8007efe <USBD_CtlSendStatus>
      break;
 8007b88:	e00c      	b.n	8007ba4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f8eb 	bl	8007d68 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b92:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7ff f8f7 	bl	8006d8c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba2:	bf00      	nop
  }

  return ret;
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	200001a0 	.word	0x200001a0

08007bb4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	88db      	ldrh	r3, [r3, #6]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d004      	beq.n	8007bd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f8cd 	bl	8007d68 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bce:	e023      	b.n	8007c18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	dc02      	bgt.n	8007be2 <USBD_GetConfig+0x2e>
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dc03      	bgt.n	8007be8 <USBD_GetConfig+0x34>
 8007be0:	e015      	b.n	8007c0e <USBD_GetConfig+0x5a>
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d00b      	beq.n	8007bfe <USBD_GetConfig+0x4a>
 8007be6:	e012      	b.n	8007c0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f927 	bl	8007e4a <USBD_CtlSendData>
        break;
 8007bfc:	e00c      	b.n	8007c18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3304      	adds	r3, #4
 8007c02:	2201      	movs	r2, #1
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f91f 	bl	8007e4a <USBD_CtlSendData>
        break;
 8007c0c:	e004      	b.n	8007c18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f8a9 	bl	8007d68 <USBD_CtlError>
        break;
 8007c16:	bf00      	nop
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d81e      	bhi.n	8007c76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	88db      	ldrh	r3, [r3, #6]
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d004      	beq.n	8007c4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f890 	bl	8007d68 <USBD_CtlError>
        break;
 8007c48:	e01a      	b.n	8007c80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d005      	beq.n	8007c66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f043 0202 	orr.w	r2, r3, #2
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	330c      	adds	r3, #12
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f8eb 	bl	8007e4a <USBD_CtlSendData>
      break;
 8007c74:	e004      	b.n	8007c80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f875 	bl	8007d68 <USBD_CtlError>
      break;
 8007c7e:	bf00      	nop
  }
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	885b      	ldrh	r3, [r3, #2]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d106      	bne.n	8007ca8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f92b 	bl	8007efe <USBD_CtlSendStatus>
  }
}
 8007ca8:	bf00      	nop
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d80b      	bhi.n	8007ce0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	885b      	ldrh	r3, [r3, #2]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d10c      	bne.n	8007cea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f910 	bl	8007efe <USBD_CtlSendStatus>
      }
      break;
 8007cde:	e004      	b.n	8007cea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f840 	bl	8007d68 <USBD_CtlError>
      break;
 8007ce8:	e000      	b.n	8007cec <USBD_ClrFeature+0x3c>
      break;
 8007cea:	bf00      	nop
  }
}
 8007cec:	bf00      	nop
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	781a      	ldrb	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	781a      	ldrb	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff fabb 	bl	800729a <SWAPBYTE>
 8007d24:	4603      	mov	r3, r0
 8007d26:	461a      	mov	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3301      	adds	r3, #1
 8007d36:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f7ff faae 	bl	800729a <SWAPBYTE>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	461a      	mov	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f7ff faa1 	bl	800729a <SWAPBYTE>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	80da      	strh	r2, [r3, #6]
}
 8007d60:	bf00      	nop
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d72:	2180      	movs	r1, #128	; 0x80
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f001 f9db 	bl	8009130 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f001 f9d7 	bl	8009130 <USBD_LL_StallEP>
}
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b086      	sub	sp, #24
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d036      	beq.n	8007e0e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007da4:	6938      	ldr	r0, [r7, #16]
 8007da6:	f000 f836 	bl	8007e16 <USBD_GetLen>
 8007daa:	4603      	mov	r3, r0
 8007dac:	3301      	adds	r3, #1
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	005b      	lsls	r3, r3, #1
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	7812      	ldrb	r2, [r2, #0]
 8007dc2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	4413      	add	r3, r2
 8007dd0:	2203      	movs	r2, #3
 8007dd2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007dda:	e013      	b.n	8007e04 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	4413      	add	r3, r2
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	7812      	ldrb	r2, [r2, #0]
 8007de6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	3301      	adds	r3, #1
 8007dec:	613b      	str	r3, [r7, #16]
    idx++;
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	3301      	adds	r3, #1
 8007df2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	4413      	add	r3, r2
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	701a      	strb	r2, [r3, #0]
    idx++;
 8007dfe:	7dfb      	ldrb	r3, [r7, #23]
 8007e00:	3301      	adds	r3, #1
 8007e02:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1e7      	bne.n	8007ddc <USBD_GetString+0x52>
 8007e0c:	e000      	b.n	8007e10 <USBD_GetString+0x86>
    return;
 8007e0e:	bf00      	nop
  }
}
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e26:	e005      	b.n	8007e34 <USBD_GetLen+0x1e>
  {
    len++;
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	3301      	adds	r3, #1
 8007e32:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1f5      	bne.n	8007e28 <USBD_GetLen+0x12>
  }

  return len;
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2202      	movs	r2, #2
 8007e5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	2100      	movs	r1, #0
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f001 f9e6 	bl	8009242 <USBD_LL_Transmit>

  return USBD_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	2100      	movs	r1, #0
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f001 f9d5 	bl	8009242 <USBD_LL_Transmit>

  return USBD_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2203      	movs	r2, #3
 8007eb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	2100      	movs	r1, #0
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f001 f9d9 	bl	8009284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	2100      	movs	r1, #0
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f001 f9c8 	bl	8009284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b082      	sub	sp, #8
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2204      	movs	r2, #4
 8007f0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f0e:	2300      	movs	r3, #0
 8007f10:	2200      	movs	r2, #0
 8007f12:	2100      	movs	r1, #0
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f001 f994 	bl	8009242 <USBD_LL_Transmit>

  return USBD_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2205      	movs	r2, #5
 8007f30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f34:	2300      	movs	r3, #0
 8007f36:	2200      	movs	r2, #0
 8007f38:	2100      	movs	r1, #0
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 f9a2 	bl	8009284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007f62:	4b1f      	ldr	r3, [pc, #124]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f64:	7a5b      	ldrb	r3, [r3, #9]
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d131      	bne.n	8007fd0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007f6c:	4b1c      	ldr	r3, [pc, #112]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f6e:	7a5b      	ldrb	r3, [r3, #9]
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	461a      	mov	r2, r3
 8007f74:	4b1a      	ldr	r3, [pc, #104]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f76:	2100      	movs	r1, #0
 8007f78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007f7a:	4b19      	ldr	r3, [pc, #100]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f7c:	7a5b      	ldrb	r3, [r3, #9]
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	4a17      	ldr	r2, [pc, #92]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007f8a:	4b15      	ldr	r3, [pc, #84]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f8c:	7a5b      	ldrb	r3, [r3, #9]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	461a      	mov	r2, r3
 8007f92:	4b13      	ldr	r3, [pc, #76]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f94:	4413      	add	r3, r2
 8007f96:	79fa      	ldrb	r2, [r7, #7]
 8007f98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007f9a:	4b11      	ldr	r3, [pc, #68]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007f9c:	7a5b      	ldrb	r3, [r3, #9]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	b2d1      	uxtb	r1, r2
 8007fa4:	4a0e      	ldr	r2, [pc, #56]	; (8007fe0 <FATFS_LinkDriverEx+0x94>)
 8007fa6:	7251      	strb	r1, [r2, #9]
 8007fa8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007faa:	7dbb      	ldrb	r3, [r7, #22]
 8007fac:	3330      	adds	r3, #48	; 0x30
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	223a      	movs	r2, #58	; 0x3a
 8007fba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	3302      	adds	r3, #2
 8007fc0:	222f      	movs	r2, #47	; 0x2f
 8007fc2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	3303      	adds	r3, #3
 8007fc8:	2200      	movs	r2, #0
 8007fca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	200001a4 	.word	0x200001a4

08007fe4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007fee:	2200      	movs	r2, #0
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7ff ffaa 	bl	8007f4c <FATFS_LinkDriverEx>
 8007ff8:	4603      	mov	r3, r0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
	...

08008004 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800800e:	f000 f879 	bl	8008104 <BSP_SD_IsDetected>
 8008012:	4603      	mov	r3, r0
 8008014:	2b01      	cmp	r3, #1
 8008016:	d001      	beq.n	800801c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e012      	b.n	8008042 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800801c:	480b      	ldr	r0, [pc, #44]	; (800804c <BSP_SD_Init+0x48>)
 800801e:	f7fa fd15 	bl	8002a4c <HAL_SD_Init>
 8008022:	4603      	mov	r3, r0
 8008024:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008026:	79fb      	ldrb	r3, [r7, #7]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d109      	bne.n	8008040 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800802c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008030:	4806      	ldr	r0, [pc, #24]	; (800804c <BSP_SD_Init+0x48>)
 8008032:	f7fb faed 	bl	8003610 <HAL_SD_ConfigWideBusOperation>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008040:	79fb      	ldrb	r3, [r7, #7]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	2000020c 	.word	0x2000020c

08008050 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af02      	add	r7, sp, #8
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	68f9      	ldr	r1, [r7, #12]
 800806c:	4806      	ldr	r0, [pc, #24]	; (8008088 <BSP_SD_ReadBlocks+0x38>)
 800806e:	f7fa fd9b 	bl	8002ba8 <HAL_SD_ReadBlocks>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800807c:	7dfb      	ldrb	r3, [r7, #23]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	2000020c 	.word	0x2000020c

0800808c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b088      	sub	sp, #32
 8008090:	af02      	add	r7, sp, #8
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	68f9      	ldr	r1, [r7, #12]
 80080a8:	4806      	ldr	r0, [pc, #24]	; (80080c4 <BSP_SD_WriteBlocks+0x38>)
 80080aa:	f7fa ff5b 	bl	8002f64 <HAL_SD_WriteBlocks>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	2000020c 	.word	0x2000020c

080080c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80080cc:	4805      	ldr	r0, [pc, #20]	; (80080e4 <BSP_SD_GetCardState+0x1c>)
 80080ce:	f7fb fb39 	bl	8003744 <HAL_SD_GetCardState>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	bf14      	ite	ne
 80080d8:	2301      	movne	r3, #1
 80080da:	2300      	moveq	r3, #0
 80080dc:	b2db      	uxtb	r3, r3
}
 80080de:	4618      	mov	r0, r3
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	2000020c 	.word	0x2000020c

080080e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80080f0:	6879      	ldr	r1, [r7, #4]
 80080f2:	4803      	ldr	r0, [pc, #12]	; (8008100 <BSP_SD_GetCardInfo+0x18>)
 80080f4:	f7fb fa60 	bl	80035b8 <HAL_SD_GetCardInfo>
}
 80080f8:	bf00      	nop
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	2000020c 	.word	0x2000020c

08008104 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800810a:	2301      	movs	r3, #1
 800810c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800810e:	79fb      	ldrb	r3, [r7, #7]
 8008110:	b2db      	uxtb	r3, r3
}
 8008112:	4618      	mov	r0, r3
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
	...

08008120 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008124:	4904      	ldr	r1, [pc, #16]	; (8008138 <MX_FATFS_Init+0x18>)
 8008126:	4805      	ldr	r0, [pc, #20]	; (800813c <MX_FATFS_Init+0x1c>)
 8008128:	f7ff ff5c 	bl	8007fe4 <FATFS_LinkDriver>
 800812c:	4603      	mov	r3, r0
 800812e:	461a      	mov	r2, r3
 8008130:	4b03      	ldr	r3, [pc, #12]	; (8008140 <MX_FATFS_Init+0x20>)
 8008132:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008134:	bf00      	nop
 8008136:	bd80      	pop	{r7, pc}
 8008138:	200001b4 	.word	0x200001b4
 800813c:	080096a0 	.word	0x080096a0
 8008140:	200001b0 	.word	0x200001b0

08008144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008148:	f7f8 f9bc 	bl	80004c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800814c:	f000 f824 	bl	8008198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008150:	f000 f944 	bl	80083dc <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8008154:	f000 f8b8 	bl	80082c8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8008158:	f7ff ffe2 	bl	8008120 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800815c:	f000 fd26 	bl	8008bac <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8008160:	f000 f884 	bl	800826c <MX_I2C1_Init>
  MX_SPI1_Init();
 8008164:	f000 f8d0 	bl	8008308 <MX_SPI1_Init>
  MX_TIM6_Init();
 8008168:	f000 f904 	bl	8008374 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Start timer (1us interrupt start)
  HAL_TIM_Base_Start_IT(&htim6);
 800816c:	4807      	ldr	r0, [pc, #28]	; (800818c <main+0x48>)
 800816e:	f7fb fecf 	bl	8003f10 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // 1 us
	  if(timer_1us_u16)
 8008172:	4b07      	ldr	r3, [pc, #28]	; (8008190 <main+0x4c>)
 8008174:	881b      	ldrh	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0fb      	beq.n	8008172 <main+0x2e>
	  {
		  timer_1us_u16 = 0;
 800817a:	4b05      	ldr	r3, [pc, #20]	; (8008190 <main+0x4c>)
 800817c:	2200      	movs	r2, #0
 800817e:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8008180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008184:	4803      	ldr	r0, [pc, #12]	; (8008194 <main+0x50>)
 8008186:	f7f8 fcfa 	bl	8000b7e <HAL_GPIO_TogglePin>
	  if(timer_1us_u16)
 800818a:	e7f2      	b.n	8008172 <main+0x2e>
 800818c:	200002e8 	.word	0x200002e8
 8008190:	20000330 	.word	0x20000330
 8008194:	40021400 	.word	0x40021400

08008198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b094      	sub	sp, #80	; 0x50
 800819c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800819e:	f107 0320 	add.w	r3, r7, #32
 80081a2:	2230      	movs	r2, #48	; 0x30
 80081a4:	2100      	movs	r1, #0
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 fa1d 	bl	80095e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80081ac:	f107 030c 	add.w	r3, r7, #12
 80081b0:	2200      	movs	r2, #0
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	605a      	str	r2, [r3, #4]
 80081b6:	609a      	str	r2, [r3, #8]
 80081b8:	60da      	str	r2, [r3, #12]
 80081ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80081bc:	2300      	movs	r3, #0
 80081be:	60bb      	str	r3, [r7, #8]
 80081c0:	4b28      	ldr	r3, [pc, #160]	; (8008264 <SystemClock_Config+0xcc>)
 80081c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c4:	4a27      	ldr	r2, [pc, #156]	; (8008264 <SystemClock_Config+0xcc>)
 80081c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081ca:	6413      	str	r3, [r2, #64]	; 0x40
 80081cc:	4b25      	ldr	r3, [pc, #148]	; (8008264 <SystemClock_Config+0xcc>)
 80081ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081d4:	60bb      	str	r3, [r7, #8]
 80081d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80081d8:	2300      	movs	r3, #0
 80081da:	607b      	str	r3, [r7, #4]
 80081dc:	4b22      	ldr	r3, [pc, #136]	; (8008268 <SystemClock_Config+0xd0>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a21      	ldr	r2, [pc, #132]	; (8008268 <SystemClock_Config+0xd0>)
 80081e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081e6:	6013      	str	r3, [r2, #0]
 80081e8:	4b1f      	ldr	r3, [pc, #124]	; (8008268 <SystemClock_Config+0xd0>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081f0:	607b      	str	r3, [r7, #4]
 80081f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80081f4:	2301      	movs	r3, #1
 80081f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80081f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80081fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80081fe:	2302      	movs	r3, #2
 8008200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008202:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008206:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008208:	2304      	movs	r3, #4
 800820a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800820c:	23a8      	movs	r3, #168	; 0xa8
 800820e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008210:	2302      	movs	r3, #2
 8008212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008214:	2307      	movs	r3, #7
 8008216:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008218:	f107 0320 	add.w	r3, r7, #32
 800821c:	4618      	mov	r0, r3
 800821e:	f7f9 ff91 	bl	8002144 <HAL_RCC_OscConfig>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008228:	f000 fa2c 	bl	8008684 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800822c:	230f      	movs	r3, #15
 800822e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008230:	2302      	movs	r3, #2
 8008232:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008234:	2300      	movs	r3, #0
 8008236:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008238:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800823c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800823e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008242:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008244:	f107 030c 	add.w	r3, r7, #12
 8008248:	2105      	movs	r1, #5
 800824a:	4618      	mov	r0, r3
 800824c:	f7fa f9f2 	bl	8002634 <HAL_RCC_ClockConfig>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8008256:	f000 fa15 	bl	8008684 <Error_Handler>
  }
}
 800825a:	bf00      	nop
 800825c:	3750      	adds	r7, #80	; 0x50
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	40023800 	.word	0x40023800
 8008268:	40007000 	.word	0x40007000

0800826c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008270:	4b12      	ldr	r3, [pc, #72]	; (80082bc <MX_I2C1_Init+0x50>)
 8008272:	4a13      	ldr	r2, [pc, #76]	; (80082c0 <MX_I2C1_Init+0x54>)
 8008274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008276:	4b11      	ldr	r3, [pc, #68]	; (80082bc <MX_I2C1_Init+0x50>)
 8008278:	4a12      	ldr	r2, [pc, #72]	; (80082c4 <MX_I2C1_Init+0x58>)
 800827a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800827c:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <MX_I2C1_Init+0x50>)
 800827e:	2200      	movs	r2, #0
 8008280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008282:	4b0e      	ldr	r3, [pc, #56]	; (80082bc <MX_I2C1_Init+0x50>)
 8008284:	2200      	movs	r2, #0
 8008286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008288:	4b0c      	ldr	r3, [pc, #48]	; (80082bc <MX_I2C1_Init+0x50>)
 800828a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800828e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008290:	4b0a      	ldr	r3, [pc, #40]	; (80082bc <MX_I2C1_Init+0x50>)
 8008292:	2200      	movs	r2, #0
 8008294:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008296:	4b09      	ldr	r3, [pc, #36]	; (80082bc <MX_I2C1_Init+0x50>)
 8008298:	2200      	movs	r2, #0
 800829a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800829c:	4b07      	ldr	r3, [pc, #28]	; (80082bc <MX_I2C1_Init+0x50>)
 800829e:	2200      	movs	r2, #0
 80082a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80082a2:	4b06      	ldr	r3, [pc, #24]	; (80082bc <MX_I2C1_Init+0x50>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80082a8:	4804      	ldr	r0, [pc, #16]	; (80082bc <MX_I2C1_Init+0x50>)
 80082aa:	f7f8 fc83 	bl	8000bb4 <HAL_I2C_Init>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80082b4:	f000 f9e6 	bl	8008684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80082b8:	bf00      	nop
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	200001b8 	.word	0x200001b8
 80082c0:	40005400 	.word	0x40005400
 80082c4:	00061a80 	.word	0x00061a80

080082c8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80082c8:	b480      	push	{r7}
 80082ca:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80082cc:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <MX_SDIO_SD_Init+0x38>)
 80082ce:	4a0d      	ldr	r2, [pc, #52]	; (8008304 <MX_SDIO_SD_Init+0x3c>)
 80082d0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80082d2:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <MX_SDIO_SD_Init+0x38>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80082d8:	4b09      	ldr	r3, [pc, #36]	; (8008300 <MX_SDIO_SD_Init+0x38>)
 80082da:	2200      	movs	r2, #0
 80082dc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80082de:	4b08      	ldr	r3, [pc, #32]	; (8008300 <MX_SDIO_SD_Init+0x38>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80082e4:	4b06      	ldr	r3, [pc, #24]	; (8008300 <MX_SDIO_SD_Init+0x38>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80082ea:	4b05      	ldr	r3, [pc, #20]	; (8008300 <MX_SDIO_SD_Init+0x38>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80082f0:	4b03      	ldr	r3, [pc, #12]	; (8008300 <MX_SDIO_SD_Init+0x38>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80082f6:	bf00      	nop
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	2000020c 	.word	0x2000020c
 8008304:	40012c00 	.word	0x40012c00

08008308 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800830c:	4b17      	ldr	r3, [pc, #92]	; (800836c <MX_SPI1_Init+0x64>)
 800830e:	4a18      	ldr	r2, [pc, #96]	; (8008370 <MX_SPI1_Init+0x68>)
 8008310:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008312:	4b16      	ldr	r3, [pc, #88]	; (800836c <MX_SPI1_Init+0x64>)
 8008314:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008318:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800831a:	4b14      	ldr	r3, [pc, #80]	; (800836c <MX_SPI1_Init+0x64>)
 800831c:	2200      	movs	r2, #0
 800831e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008320:	4b12      	ldr	r3, [pc, #72]	; (800836c <MX_SPI1_Init+0x64>)
 8008322:	2200      	movs	r2, #0
 8008324:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008326:	4b11      	ldr	r3, [pc, #68]	; (800836c <MX_SPI1_Init+0x64>)
 8008328:	2200      	movs	r2, #0
 800832a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800832c:	4b0f      	ldr	r3, [pc, #60]	; (800836c <MX_SPI1_Init+0x64>)
 800832e:	2200      	movs	r2, #0
 8008330:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008332:	4b0e      	ldr	r3, [pc, #56]	; (800836c <MX_SPI1_Init+0x64>)
 8008334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008338:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800833a:	4b0c      	ldr	r3, [pc, #48]	; (800836c <MX_SPI1_Init+0x64>)
 800833c:	2210      	movs	r2, #16
 800833e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008340:	4b0a      	ldr	r3, [pc, #40]	; (800836c <MX_SPI1_Init+0x64>)
 8008342:	2200      	movs	r2, #0
 8008344:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008346:	4b09      	ldr	r3, [pc, #36]	; (800836c <MX_SPI1_Init+0x64>)
 8008348:	2200      	movs	r2, #0
 800834a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800834c:	4b07      	ldr	r3, [pc, #28]	; (800836c <MX_SPI1_Init+0x64>)
 800834e:	2200      	movs	r2, #0
 8008350:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008352:	4b06      	ldr	r3, [pc, #24]	; (800836c <MX_SPI1_Init+0x64>)
 8008354:	220a      	movs	r2, #10
 8008356:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008358:	4804      	ldr	r0, [pc, #16]	; (800836c <MX_SPI1_Init+0x64>)
 800835a:	f7fb fd00 	bl	8003d5e <HAL_SPI_Init>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008364:	f000 f98e 	bl	8008684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008368:	bf00      	nop
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20000290 	.word	0x20000290
 8008370:	40013000 	.word	0x40013000

08008374 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800837a:	463b      	mov	r3, r7
 800837c:	2200      	movs	r2, #0
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8008382:	4b14      	ldr	r3, [pc, #80]	; (80083d4 <MX_TIM6_Init+0x60>)
 8008384:	4a14      	ldr	r2, [pc, #80]	; (80083d8 <MX_TIM6_Init+0x64>)
 8008386:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8008388:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <MX_TIM6_Init+0x60>)
 800838a:	2200      	movs	r2, #0
 800838c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800838e:	4b11      	ldr	r3, [pc, #68]	; (80083d4 <MX_TIM6_Init+0x60>)
 8008390:	2200      	movs	r2, #0
 8008392:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 167;
 8008394:	4b0f      	ldr	r3, [pc, #60]	; (80083d4 <MX_TIM6_Init+0x60>)
 8008396:	22a7      	movs	r2, #167	; 0xa7
 8008398:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800839a:	4b0e      	ldr	r3, [pc, #56]	; (80083d4 <MX_TIM6_Init+0x60>)
 800839c:	2200      	movs	r2, #0
 800839e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80083a0:	480c      	ldr	r0, [pc, #48]	; (80083d4 <MX_TIM6_Init+0x60>)
 80083a2:	f7fb fd65 	bl	8003e70 <HAL_TIM_Base_Init>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80083ac:	f000 f96a 	bl	8008684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80083b0:	2300      	movs	r3, #0
 80083b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80083b4:	2300      	movs	r3, #0
 80083b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80083b8:	463b      	mov	r3, r7
 80083ba:	4619      	mov	r1, r3
 80083bc:	4805      	ldr	r0, [pc, #20]	; (80083d4 <MX_TIM6_Init+0x60>)
 80083be:	f7fb ffe7 	bl	8004390 <HAL_TIMEx_MasterConfigSynchronization>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80083c8:	f000 f95c 	bl	8008684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80083cc:	bf00      	nop
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	200002e8 	.word	0x200002e8
 80083d8:	40001000 	.word	0x40001000

080083dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08e      	sub	sp, #56	; 0x38
 80083e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083e6:	2200      	movs	r2, #0
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	605a      	str	r2, [r3, #4]
 80083ec:	609a      	str	r2, [r3, #8]
 80083ee:	60da      	str	r2, [r3, #12]
 80083f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80083f2:	2300      	movs	r3, #0
 80083f4:	623b      	str	r3, [r7, #32]
 80083f6:	4b8f      	ldr	r3, [pc, #572]	; (8008634 <MX_GPIO_Init+0x258>)
 80083f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fa:	4a8e      	ldr	r2, [pc, #568]	; (8008634 <MX_GPIO_Init+0x258>)
 80083fc:	f043 0310 	orr.w	r3, r3, #16
 8008400:	6313      	str	r3, [r2, #48]	; 0x30
 8008402:	4b8c      	ldr	r3, [pc, #560]	; (8008634 <MX_GPIO_Init+0x258>)
 8008404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008406:	f003 0310 	and.w	r3, r3, #16
 800840a:	623b      	str	r3, [r7, #32]
 800840c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800840e:	2300      	movs	r3, #0
 8008410:	61fb      	str	r3, [r7, #28]
 8008412:	4b88      	ldr	r3, [pc, #544]	; (8008634 <MX_GPIO_Init+0x258>)
 8008414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008416:	4a87      	ldr	r2, [pc, #540]	; (8008634 <MX_GPIO_Init+0x258>)
 8008418:	f043 0304 	orr.w	r3, r3, #4
 800841c:	6313      	str	r3, [r2, #48]	; 0x30
 800841e:	4b85      	ldr	r3, [pc, #532]	; (8008634 <MX_GPIO_Init+0x258>)
 8008420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008422:	f003 0304 	and.w	r3, r3, #4
 8008426:	61fb      	str	r3, [r7, #28]
 8008428:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800842a:	2300      	movs	r3, #0
 800842c:	61bb      	str	r3, [r7, #24]
 800842e:	4b81      	ldr	r3, [pc, #516]	; (8008634 <MX_GPIO_Init+0x258>)
 8008430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008432:	4a80      	ldr	r2, [pc, #512]	; (8008634 <MX_GPIO_Init+0x258>)
 8008434:	f043 0320 	orr.w	r3, r3, #32
 8008438:	6313      	str	r3, [r2, #48]	; 0x30
 800843a:	4b7e      	ldr	r3, [pc, #504]	; (8008634 <MX_GPIO_Init+0x258>)
 800843c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843e:	f003 0320 	and.w	r3, r3, #32
 8008442:	61bb      	str	r3, [r7, #24]
 8008444:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008446:	2300      	movs	r3, #0
 8008448:	617b      	str	r3, [r7, #20]
 800844a:	4b7a      	ldr	r3, [pc, #488]	; (8008634 <MX_GPIO_Init+0x258>)
 800844c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844e:	4a79      	ldr	r2, [pc, #484]	; (8008634 <MX_GPIO_Init+0x258>)
 8008450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008454:	6313      	str	r3, [r2, #48]	; 0x30
 8008456:	4b77      	ldr	r3, [pc, #476]	; (8008634 <MX_GPIO_Init+0x258>)
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845e:	617b      	str	r3, [r7, #20]
 8008460:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008462:	2300      	movs	r3, #0
 8008464:	613b      	str	r3, [r7, #16]
 8008466:	4b73      	ldr	r3, [pc, #460]	; (8008634 <MX_GPIO_Init+0x258>)
 8008468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846a:	4a72      	ldr	r2, [pc, #456]	; (8008634 <MX_GPIO_Init+0x258>)
 800846c:	f043 0301 	orr.w	r3, r3, #1
 8008470:	6313      	str	r3, [r2, #48]	; 0x30
 8008472:	4b70      	ldr	r3, [pc, #448]	; (8008634 <MX_GPIO_Init+0x258>)
 8008474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	613b      	str	r3, [r7, #16]
 800847c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800847e:	2300      	movs	r3, #0
 8008480:	60fb      	str	r3, [r7, #12]
 8008482:	4b6c      	ldr	r3, [pc, #432]	; (8008634 <MX_GPIO_Init+0x258>)
 8008484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008486:	4a6b      	ldr	r2, [pc, #428]	; (8008634 <MX_GPIO_Init+0x258>)
 8008488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800848c:	6313      	str	r3, [r2, #48]	; 0x30
 800848e:	4b69      	ldr	r3, [pc, #420]	; (8008634 <MX_GPIO_Init+0x258>)
 8008490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800849a:	2300      	movs	r3, #0
 800849c:	60bb      	str	r3, [r7, #8]
 800849e:	4b65      	ldr	r3, [pc, #404]	; (8008634 <MX_GPIO_Init+0x258>)
 80084a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a2:	4a64      	ldr	r2, [pc, #400]	; (8008634 <MX_GPIO_Init+0x258>)
 80084a4:	f043 0302 	orr.w	r3, r3, #2
 80084a8:	6313      	str	r3, [r2, #48]	; 0x30
 80084aa:	4b62      	ldr	r3, [pc, #392]	; (8008634 <MX_GPIO_Init+0x258>)
 80084ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ae:	f003 0302 	and.w	r3, r3, #2
 80084b2:	60bb      	str	r3, [r7, #8]
 80084b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80084b6:	2300      	movs	r3, #0
 80084b8:	607b      	str	r3, [r7, #4]
 80084ba:	4b5e      	ldr	r3, [pc, #376]	; (8008634 <MX_GPIO_Init+0x258>)
 80084bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084be:	4a5d      	ldr	r2, [pc, #372]	; (8008634 <MX_GPIO_Init+0x258>)
 80084c0:	f043 0308 	orr.w	r3, r3, #8
 80084c4:	6313      	str	r3, [r2, #48]	; 0x30
 80084c6:	4b5b      	ldr	r3, [pc, #364]	; (8008634 <MX_GPIO_Init+0x258>)
 80084c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ca:	f003 0308 	and.w	r3, r3, #8
 80084ce:	607b      	str	r3, [r7, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PAD2_Pin|PAD3_Pin|PAD4_Pin|PAD5_Pin
 80084d2:	2200      	movs	r2, #0
 80084d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80084d8:	4857      	ldr	r0, [pc, #348]	; (8008638 <MX_GPIO_Init+0x25c>)
 80084da:	f7f8 fb37 	bl	8000b4c <HAL_GPIO_WritePin>
                          |PAD6_Pin|PAD7_Pin|PA8_Pin|PA9_Pin
                          |PA10_Pin|PA11_Pin|A0_Pin|A1_Pin
                          |POE_Pin|PMPX_Pin|PAD0_Pin|PAD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RD_GPIO_Port, RD_Pin, GPIO_PIN_RESET);
 80084de:	2200      	movs	r2, #0
 80084e0:	2101      	movs	r1, #1
 80084e2:	4856      	ldr	r0, [pc, #344]	; (800863c <MX_GPIO_Init+0x260>)
 80084e4:	f7f8 fb32 	bl	8000b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MUTE_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80084e8:	2201      	movs	r2, #1
 80084ea:	f240 6102 	movw	r1, #1538	; 0x602
 80084ee:	4853      	ldr	r0, [pc, #332]	; (800863c <MX_GPIO_Init+0x260>)
 80084f0:	f7f8 fb2c 	bl	8000b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RAD0_Pin|RAD1_Pin|RAD2_Pin|RAD3_Pin
 80084f4:	2200      	movs	r2, #0
 80084f6:	21ff      	movs	r1, #255	; 0xff
 80084f8:	4851      	ldr	r0, [pc, #324]	; (8008640 <MX_GPIO_Init+0x264>)
 80084fa:	f7f8 fb27 	bl	8000b4c <HAL_GPIO_WritePin>
                          |RAD4_Pin|RAD5_Pin|RAD6_Pin|RAD7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RA8_Pin|RA9_Pin|RA20_Pin|RA21_Pin
 80084fe:	2200      	movs	r2, #0
 8008500:	f240 711f 	movw	r1, #1823	; 0x71f
 8008504:	484f      	ldr	r0, [pc, #316]	; (8008644 <MX_GPIO_Init+0x268>)
 8008506:	f7f8 fb21 	bl	8000b4c <HAL_GPIO_WritePin>
                          |RA22_Pin|IC_Pin|CS_Pin|WR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800850a:	2200      	movs	r2, #0
 800850c:	21ff      	movs	r1, #255	; 0xff
 800850e:	484e      	ldr	r0, [pc, #312]	; (8008648 <MX_GPIO_Init+0x26c>)
 8008510:	f7f8 fb1c 	bl	8000b4c <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8008514:	2200      	movs	r2, #0
 8008516:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800851a:	484c      	ldr	r0, [pc, #304]	; (800864c <MX_GPIO_Init+0x270>)
 800851c:	f7f8 fb16 	bl	8000b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROE_Pin|RMPX_Pin|RA23_Pin, GPIO_PIN_RESET);
 8008520:	2200      	movs	r2, #0
 8008522:	210b      	movs	r1, #11
 8008524:	484a      	ldr	r0, [pc, #296]	; (8008650 <MX_GPIO_Init+0x274>)
 8008526:	f7f8 fb11 	bl	8000b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAD2_Pin PAD3_Pin PAD4_Pin PAD5_Pin
                           PAD6_Pin PAD7_Pin PA8_Pin PA9_Pin
                           PA10_Pin PA11_Pin A0_Pin A1_Pin
                           POE_Pin PMPX_Pin PAD0_Pin PAD1_Pin */
  GPIO_InitStruct.Pin = PAD2_Pin|PAD3_Pin|PAD4_Pin|PAD5_Pin
 800852a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAD6_Pin|PAD7_Pin|PA8_Pin|PA9_Pin
                          |PA10_Pin|PA11_Pin|A0_Pin|A1_Pin
                          |POE_Pin|PMPX_Pin|PAD0_Pin|PAD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008530:	2301      	movs	r3, #1
 8008532:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008534:	2300      	movs	r3, #0
 8008536:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008538:	2300      	movs	r3, #0
 800853a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800853c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008540:	4619      	mov	r1, r3
 8008542:	483d      	ldr	r0, [pc, #244]	; (8008638 <MX_GPIO_Init+0x25c>)
 8008544:	f7f8 f966 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : RD_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RD_Pin|LED1_Pin|LED2_Pin;
 8008548:	f240 6301 	movw	r3, #1537	; 0x601
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800854e:	2301      	movs	r3, #1
 8008550:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008552:	2300      	movs	r3, #0
 8008554:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008556:	2300      	movs	r3, #0
 8008558:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800855a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800855e:	4619      	mov	r1, r3
 8008560:	4836      	ldr	r0, [pc, #216]	; (800863c <MX_GPIO_Init+0x260>)
 8008562:	f7f8 f957 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : MUTE_Pin */
  GPIO_InitStruct.Pin = MUTE_Pin;
 8008566:	2302      	movs	r3, #2
 8008568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800856a:	2301      	movs	r3, #1
 800856c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800856e:	2301      	movs	r3, #1
 8008570:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008572:	2300      	movs	r3, #0
 8008574:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MUTE_GPIO_Port, &GPIO_InitStruct);
 8008576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800857a:	4619      	mov	r1, r3
 800857c:	482f      	ldr	r0, [pc, #188]	; (800863c <MX_GPIO_Init+0x260>)
 800857e:	f7f8 f949 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : RAD0_Pin RAD1_Pin RAD2_Pin RAD3_Pin
                           RAD4_Pin RAD5_Pin RAD6_Pin RAD7_Pin */
  GPIO_InitStruct.Pin = RAD0_Pin|RAD1_Pin|RAD2_Pin|RAD3_Pin
 8008582:	23ff      	movs	r3, #255	; 0xff
 8008584:	627b      	str	r3, [r7, #36]	; 0x24
                          |RAD4_Pin|RAD5_Pin|RAD6_Pin|RAD7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008586:	2301      	movs	r3, #1
 8008588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800858a:	2300      	movs	r3, #0
 800858c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800858e:	2300      	movs	r3, #0
 8008590:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008596:	4619      	mov	r1, r3
 8008598:	4829      	ldr	r0, [pc, #164]	; (8008640 <MX_GPIO_Init+0x264>)
 800859a:	f7f8 f93b 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : RA8_Pin RA9_Pin RA20_Pin RA21_Pin
                           RA22_Pin IC_Pin CS_Pin WR_Pin */
  GPIO_InitStruct.Pin = RA8_Pin|RA9_Pin|RA20_Pin|RA21_Pin
 800859e:	f240 731f 	movw	r3, #1823	; 0x71f
 80085a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |RA22_Pin|IC_Pin|CS_Pin|WR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085a4:	2301      	movs	r3, #1
 80085a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085a8:	2300      	movs	r3, #0
 80085aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085ac:	2300      	movs	r3, #0
 80085ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085b4:	4619      	mov	r1, r3
 80085b6:	4823      	ldr	r0, [pc, #140]	; (8008644 <MX_GPIO_Init+0x268>)
 80085b8:	f7f8 f92c 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80085bc:	23ff      	movs	r3, #255	; 0xff
 80085be:	627b      	str	r3, [r7, #36]	; 0x24
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085c0:	2301      	movs	r3, #1
 80085c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c4:	2300      	movs	r3, #0
 80085c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085c8:	2300      	movs	r3, #0
 80085ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80085cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085d0:	4619      	mov	r1, r3
 80085d2:	481d      	ldr	r0, [pc, #116]	; (8008648 <MX_GPIO_Init+0x26c>)
 80085d4:	f7f8 f91e 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80085d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085de:	2301      	movs	r3, #1
 80085e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085e6:	2300      	movs	r3, #0
 80085e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80085ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ee:	4619      	mov	r1, r3
 80085f0:	4816      	ldr	r0, [pc, #88]	; (800864c <MX_GPIO_Init+0x270>)
 80085f2:	f7f8 f90f 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : GOMB_Pin */
  GPIO_InitStruct.Pin = GOMB_Pin;
 80085f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085fc:	2300      	movs	r3, #0
 80085fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008600:	2300      	movs	r3, #0
 8008602:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GOMB_GPIO_Port, &GPIO_InitStruct);
 8008604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008608:	4619      	mov	r1, r3
 800860a:	480f      	ldr	r0, [pc, #60]	; (8008648 <MX_GPIO_Init+0x26c>)
 800860c:	f7f8 f902 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROE_Pin RMPX_Pin RA23_Pin */
  GPIO_InitStruct.Pin = ROE_Pin|RMPX_Pin|RA23_Pin;
 8008610:	230b      	movs	r3, #11
 8008612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008614:	2301      	movs	r3, #1
 8008616:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008618:	2300      	movs	r3, #0
 800861a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800861c:	2300      	movs	r3, #0
 800861e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008624:	4619      	mov	r1, r3
 8008626:	480a      	ldr	r0, [pc, #40]	; (8008650 <MX_GPIO_Init+0x274>)
 8008628:	f7f8 f8f4 	bl	8000814 <HAL_GPIO_Init>

}
 800862c:	bf00      	nop
 800862e:	3738      	adds	r7, #56	; 0x38
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	40023800 	.word	0x40023800
 8008638:	40021000 	.word	0x40021000
 800863c:	40021400 	.word	0x40021400
 8008640:	40020800 	.word	0x40020800
 8008644:	40020000 	.word	0x40020000
 8008648:	40021800 	.word	0x40021800
 800864c:	40020400 	.word	0x40020400
 8008650:	40020c00 	.word	0x40020c00

08008654 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim6 )
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a07      	ldr	r2, [pc, #28]	; (800867c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d105      	bne.n	8008670 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		timer_1us_u16++;
 8008664:	4b06      	ldr	r3, [pc, #24]	; (8008680 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8008666:	881b      	ldrh	r3, [r3, #0]
 8008668:	3301      	adds	r3, #1
 800866a:	b29a      	uxth	r2, r3
 800866c:	4b04      	ldr	r3, [pc, #16]	; (8008680 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800866e:	801a      	strh	r2, [r3, #0]
	}
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	200002e8 	.word	0x200002e8
 8008680:	20000330 	.word	0x20000330

08008684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008684:	b480      	push	{r7}
 8008686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008688:	b672      	cpsid	i
}
 800868a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800868c:	e7fe      	b.n	800868c <Error_Handler+0x8>
	...

08008690 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	4603      	mov	r3, r0
 8008698:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800869a:	4b0b      	ldr	r3, [pc, #44]	; (80086c8 <SD_CheckStatus+0x38>)
 800869c:	2201      	movs	r2, #1
 800869e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80086a0:	f7ff fd12 	bl	80080c8 <BSP_SD_GetCardState>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d107      	bne.n	80086ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80086aa:	4b07      	ldr	r3, [pc, #28]	; (80086c8 <SD_CheckStatus+0x38>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	f023 0301 	bic.w	r3, r3, #1
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	4b04      	ldr	r3, [pc, #16]	; (80086c8 <SD_CheckStatus+0x38>)
 80086b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80086ba:	4b03      	ldr	r3, [pc, #12]	; (80086c8 <SD_CheckStatus+0x38>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	b2db      	uxtb	r3, r3
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20000117 	.word	0x20000117

080086cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	4603      	mov	r3, r0
 80086d4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80086d6:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <SD_initialize+0x38>)
 80086d8:	2201      	movs	r2, #1
 80086da:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80086dc:	f7ff fc92 	bl	8008004 <BSP_SD_Init>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d107      	bne.n	80086f6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80086e6:	79fb      	ldrb	r3, [r7, #7]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7ff ffd1 	bl	8008690 <SD_CheckStatus>
 80086ee:	4603      	mov	r3, r0
 80086f0:	461a      	mov	r2, r3
 80086f2:	4b04      	ldr	r3, [pc, #16]	; (8008704 <SD_initialize+0x38>)
 80086f4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80086f6:	4b03      	ldr	r3, [pc, #12]	; (8008704 <SD_initialize+0x38>)
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	b2db      	uxtb	r3, r3
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	20000117 	.word	0x20000117

08008708 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	4603      	mov	r3, r0
 8008710:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008712:	79fb      	ldrb	r3, [r7, #7]
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff ffbb 	bl	8008690 <SD_CheckStatus>
 800871a:	4603      	mov	r3, r0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	607a      	str	r2, [r7, #4]
 800872e:	603b      	str	r3, [r7, #0]
 8008730:	4603      	mov	r3, r0
 8008732:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008738:	f04f 33ff 	mov.w	r3, #4294967295
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	68b8      	ldr	r0, [r7, #8]
 8008742:	f7ff fc85 	bl	8008050 <BSP_SD_ReadBlocks>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d107      	bne.n	800875c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800874c:	bf00      	nop
 800874e:	f7ff fcbb 	bl	80080c8 <BSP_SD_GetCardState>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1fa      	bne.n	800874e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800875c:	7dfb      	ldrb	r3, [r7, #23]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3718      	adds	r7, #24
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b086      	sub	sp, #24
 800876a:	af00      	add	r7, sp, #0
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
 8008772:	4603      	mov	r3, r0
 8008774:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800877a:	f04f 33ff 	mov.w	r3, #4294967295
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	68b8      	ldr	r0, [r7, #8]
 8008784:	f7ff fc82 	bl	800808c <BSP_SD_WriteBlocks>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d107      	bne.n	800879e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800878e:	bf00      	nop
 8008790:	f7ff fc9a 	bl	80080c8 <BSP_SD_GetCardState>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1fa      	bne.n	8008790 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800879e:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b08c      	sub	sp, #48	; 0x30
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	603a      	str	r2, [r7, #0]
 80087b2:	71fb      	strb	r3, [r7, #7]
 80087b4:	460b      	mov	r3, r1
 80087b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80087be:	4b25      	ldr	r3, [pc, #148]	; (8008854 <SD_ioctl+0xac>)
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	f003 0301 	and.w	r3, r3, #1
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d001      	beq.n	80087d0 <SD_ioctl+0x28>
 80087cc:	2303      	movs	r3, #3
 80087ce:	e03c      	b.n	800884a <SD_ioctl+0xa2>

  switch (cmd)
 80087d0:	79bb      	ldrb	r3, [r7, #6]
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d834      	bhi.n	8008840 <SD_ioctl+0x98>
 80087d6:	a201      	add	r2, pc, #4	; (adr r2, 80087dc <SD_ioctl+0x34>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	080087ed 	.word	0x080087ed
 80087e0:	080087f5 	.word	0x080087f5
 80087e4:	0800880d 	.word	0x0800880d
 80087e8:	08008827 	.word	0x08008827
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80087f2:	e028      	b.n	8008846 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80087f4:	f107 030c 	add.w	r3, r7, #12
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7ff fc75 	bl	80080e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80087fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800880a:	e01c      	b.n	8008846 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800880c:	f107 030c 	add.w	r3, r7, #12
 8008810:	4618      	mov	r0, r3
 8008812:	f7ff fc69 	bl	80080e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008818:	b29a      	uxth	r2, r3
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008824:	e00f      	b.n	8008846 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008826:	f107 030c 	add.w	r3, r7, #12
 800882a:	4618      	mov	r0, r3
 800882c:	f7ff fc5c 	bl	80080e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	0a5a      	lsrs	r2, r3, #9
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800883e:	e002      	b.n	8008846 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008840:	2304      	movs	r3, #4
 8008842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008846:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800884a:	4618      	mov	r0, r3
 800884c:	3730      	adds	r7, #48	; 0x30
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20000117 	.word	0x20000117

08008858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800885e:	2300      	movs	r3, #0
 8008860:	607b      	str	r3, [r7, #4]
 8008862:	4b10      	ldr	r3, [pc, #64]	; (80088a4 <HAL_MspInit+0x4c>)
 8008864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008866:	4a0f      	ldr	r2, [pc, #60]	; (80088a4 <HAL_MspInit+0x4c>)
 8008868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800886c:	6453      	str	r3, [r2, #68]	; 0x44
 800886e:	4b0d      	ldr	r3, [pc, #52]	; (80088a4 <HAL_MspInit+0x4c>)
 8008870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008876:	607b      	str	r3, [r7, #4]
 8008878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800887a:	2300      	movs	r3, #0
 800887c:	603b      	str	r3, [r7, #0]
 800887e:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <HAL_MspInit+0x4c>)
 8008880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008882:	4a08      	ldr	r2, [pc, #32]	; (80088a4 <HAL_MspInit+0x4c>)
 8008884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008888:	6413      	str	r3, [r2, #64]	; 0x40
 800888a:	4b06      	ldr	r3, [pc, #24]	; (80088a4 <HAL_MspInit+0x4c>)
 800888c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008892:	603b      	str	r3, [r7, #0]
 8008894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008896:	bf00      	nop
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	40023800 	.word	0x40023800

080088a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08a      	sub	sp, #40	; 0x28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	2200      	movs	r2, #0
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	605a      	str	r2, [r3, #4]
 80088ba:	609a      	str	r2, [r3, #8]
 80088bc:	60da      	str	r2, [r3, #12]
 80088be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a19      	ldr	r2, [pc, #100]	; (800892c <HAL_I2C_MspInit+0x84>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d12b      	bne.n	8008922 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80088ca:	2300      	movs	r3, #0
 80088cc:	613b      	str	r3, [r7, #16]
 80088ce:	4b18      	ldr	r3, [pc, #96]	; (8008930 <HAL_I2C_MspInit+0x88>)
 80088d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d2:	4a17      	ldr	r2, [pc, #92]	; (8008930 <HAL_I2C_MspInit+0x88>)
 80088d4:	f043 0302 	orr.w	r3, r3, #2
 80088d8:	6313      	str	r3, [r2, #48]	; 0x30
 80088da:	4b15      	ldr	r3, [pc, #84]	; (8008930 <HAL_I2C_MspInit+0x88>)
 80088dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	613b      	str	r3, [r7, #16]
 80088e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80088e6:	23c0      	movs	r3, #192	; 0xc0
 80088e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80088ea:	2312      	movs	r3, #18
 80088ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80088ee:	2301      	movs	r3, #1
 80088f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088f2:	2303      	movs	r3, #3
 80088f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80088f6:	2304      	movs	r3, #4
 80088f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088fa:	f107 0314 	add.w	r3, r7, #20
 80088fe:	4619      	mov	r1, r3
 8008900:	480c      	ldr	r0, [pc, #48]	; (8008934 <HAL_I2C_MspInit+0x8c>)
 8008902:	f7f7 ff87 	bl	8000814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008906:	2300      	movs	r3, #0
 8008908:	60fb      	str	r3, [r7, #12]
 800890a:	4b09      	ldr	r3, [pc, #36]	; (8008930 <HAL_I2C_MspInit+0x88>)
 800890c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890e:	4a08      	ldr	r2, [pc, #32]	; (8008930 <HAL_I2C_MspInit+0x88>)
 8008910:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008914:	6413      	str	r3, [r2, #64]	; 0x40
 8008916:	4b06      	ldr	r3, [pc, #24]	; (8008930 <HAL_I2C_MspInit+0x88>)
 8008918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800891e:	60fb      	str	r3, [r7, #12]
 8008920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008922:	bf00      	nop
 8008924:	3728      	adds	r7, #40	; 0x28
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	40005400 	.word	0x40005400
 8008930:	40023800 	.word	0x40023800
 8008934:	40020400 	.word	0x40020400

08008938 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08a      	sub	sp, #40	; 0x28
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008940:	f107 0314 	add.w	r3, r7, #20
 8008944:	2200      	movs	r2, #0
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	605a      	str	r2, [r3, #4]
 800894a:	609a      	str	r2, [r3, #8]
 800894c:	60da      	str	r2, [r3, #12]
 800894e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a31      	ldr	r2, [pc, #196]	; (8008a1c <HAL_SD_MspInit+0xe4>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d15b      	bne.n	8008a12 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800895a:	2300      	movs	r3, #0
 800895c:	613b      	str	r3, [r7, #16]
 800895e:	4b30      	ldr	r3, [pc, #192]	; (8008a20 <HAL_SD_MspInit+0xe8>)
 8008960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008962:	4a2f      	ldr	r2, [pc, #188]	; (8008a20 <HAL_SD_MspInit+0xe8>)
 8008964:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008968:	6453      	str	r3, [r2, #68]	; 0x44
 800896a:	4b2d      	ldr	r3, [pc, #180]	; (8008a20 <HAL_SD_MspInit+0xe8>)
 800896c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800896e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008972:	613b      	str	r3, [r7, #16]
 8008974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008976:	2300      	movs	r3, #0
 8008978:	60fb      	str	r3, [r7, #12]
 800897a:	4b29      	ldr	r3, [pc, #164]	; (8008a20 <HAL_SD_MspInit+0xe8>)
 800897c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897e:	4a28      	ldr	r2, [pc, #160]	; (8008a20 <HAL_SD_MspInit+0xe8>)
 8008980:	f043 0304 	orr.w	r3, r3, #4
 8008984:	6313      	str	r3, [r2, #48]	; 0x30
 8008986:	4b26      	ldr	r3, [pc, #152]	; (8008a20 <HAL_SD_MspInit+0xe8>)
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	f003 0304 	and.w	r3, r3, #4
 800898e:	60fb      	str	r3, [r7, #12]
 8008990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008992:	2300      	movs	r3, #0
 8008994:	60bb      	str	r3, [r7, #8]
 8008996:	4b22      	ldr	r3, [pc, #136]	; (8008a20 <HAL_SD_MspInit+0xe8>)
 8008998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899a:	4a21      	ldr	r2, [pc, #132]	; (8008a20 <HAL_SD_MspInit+0xe8>)
 800899c:	f043 0308 	orr.w	r3, r3, #8
 80089a0:	6313      	str	r3, [r2, #48]	; 0x30
 80089a2:	4b1f      	ldr	r3, [pc, #124]	; (8008a20 <HAL_SD_MspInit+0xe8>)
 80089a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a6:	f003 0308 	and.w	r3, r3, #8
 80089aa:	60bb      	str	r3, [r7, #8]
 80089ac:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80089ae:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80089b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089b4:	2302      	movs	r3, #2
 80089b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80089b8:	2301      	movs	r3, #1
 80089ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089bc:	2303      	movs	r3, #3
 80089be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80089c0:	230c      	movs	r3, #12
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089c4:	f107 0314 	add.w	r3, r7, #20
 80089c8:	4619      	mov	r1, r3
 80089ca:	4816      	ldr	r0, [pc, #88]	; (8008a24 <HAL_SD_MspInit+0xec>)
 80089cc:	f7f7 ff22 	bl	8000814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80089d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089d6:	2302      	movs	r3, #2
 80089d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089de:	2303      	movs	r3, #3
 80089e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80089e2:	230c      	movs	r3, #12
 80089e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089e6:	f107 0314 	add.w	r3, r7, #20
 80089ea:	4619      	mov	r1, r3
 80089ec:	480d      	ldr	r0, [pc, #52]	; (8008a24 <HAL_SD_MspInit+0xec>)
 80089ee:	f7f7 ff11 	bl	8000814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80089f2:	2304      	movs	r3, #4
 80089f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089f6:	2302      	movs	r3, #2
 80089f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80089fa:	2301      	movs	r3, #1
 80089fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089fe:	2303      	movs	r3, #3
 8008a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008a02:	230c      	movs	r3, #12
 8008a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008a06:	f107 0314 	add.w	r3, r7, #20
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4806      	ldr	r0, [pc, #24]	; (8008a28 <HAL_SD_MspInit+0xf0>)
 8008a0e:	f7f7 ff01 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8008a12:	bf00      	nop
 8008a14:	3728      	adds	r7, #40	; 0x28
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	40012c00 	.word	0x40012c00
 8008a20:	40023800 	.word	0x40023800
 8008a24:	40020800 	.word	0x40020800
 8008a28:	40020c00 	.word	0x40020c00

08008a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b08a      	sub	sp, #40	; 0x28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a34:	f107 0314 	add.w	r3, r7, #20
 8008a38:	2200      	movs	r2, #0
 8008a3a:	601a      	str	r2, [r3, #0]
 8008a3c:	605a      	str	r2, [r3, #4]
 8008a3e:	609a      	str	r2, [r3, #8]
 8008a40:	60da      	str	r2, [r3, #12]
 8008a42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a19      	ldr	r2, [pc, #100]	; (8008ab0 <HAL_SPI_MspInit+0x84>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d12b      	bne.n	8008aa6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008a4e:	2300      	movs	r3, #0
 8008a50:	613b      	str	r3, [r7, #16]
 8008a52:	4b18      	ldr	r3, [pc, #96]	; (8008ab4 <HAL_SPI_MspInit+0x88>)
 8008a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a56:	4a17      	ldr	r2, [pc, #92]	; (8008ab4 <HAL_SPI_MspInit+0x88>)
 8008a58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8008a5e:	4b15      	ldr	r3, [pc, #84]	; (8008ab4 <HAL_SPI_MspInit+0x88>)
 8008a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a66:	613b      	str	r3, [r7, #16]
 8008a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	4b11      	ldr	r3, [pc, #68]	; (8008ab4 <HAL_SPI_MspInit+0x88>)
 8008a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a72:	4a10      	ldr	r2, [pc, #64]	; (8008ab4 <HAL_SPI_MspInit+0x88>)
 8008a74:	f043 0301 	orr.w	r3, r3, #1
 8008a78:	6313      	str	r3, [r2, #48]	; 0x30
 8008a7a:	4b0e      	ldr	r3, [pc, #56]	; (8008ab4 <HAL_SPI_MspInit+0x88>)
 8008a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008a86:	23e0      	movs	r3, #224	; 0xe0
 8008a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a92:	2303      	movs	r3, #3
 8008a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008a96:	2305      	movs	r3, #5
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a9a:	f107 0314 	add.w	r3, r7, #20
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4805      	ldr	r0, [pc, #20]	; (8008ab8 <HAL_SPI_MspInit+0x8c>)
 8008aa2:	f7f7 feb7 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008aa6:	bf00      	nop
 8008aa8:	3728      	adds	r7, #40	; 0x28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	40013000 	.word	0x40013000
 8008ab4:	40023800 	.word	0x40023800
 8008ab8:	40020000 	.word	0x40020000

08008abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a0e      	ldr	r2, [pc, #56]	; (8008b04 <HAL_TIM_Base_MspInit+0x48>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d115      	bne.n	8008afa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60fb      	str	r3, [r7, #12]
 8008ad2:	4b0d      	ldr	r3, [pc, #52]	; (8008b08 <HAL_TIM_Base_MspInit+0x4c>)
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad6:	4a0c      	ldr	r2, [pc, #48]	; (8008b08 <HAL_TIM_Base_MspInit+0x4c>)
 8008ad8:	f043 0310 	orr.w	r3, r3, #16
 8008adc:	6413      	str	r3, [r2, #64]	; 0x40
 8008ade:	4b0a      	ldr	r3, [pc, #40]	; (8008b08 <HAL_TIM_Base_MspInit+0x4c>)
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae2:	f003 0310 	and.w	r3, r3, #16
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8008aea:	2200      	movs	r2, #0
 8008aec:	2100      	movs	r1, #0
 8008aee:	2036      	movs	r0, #54	; 0x36
 8008af0:	f7f7 fe59 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008af4:	2036      	movs	r0, #54	; 0x36
 8008af6:	f7f7 fe72 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8008afa:	bf00      	nop
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	40001000 	.word	0x40001000
 8008b08:	40023800 	.word	0x40023800

08008b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008b10:	e7fe      	b.n	8008b10 <NMI_Handler+0x4>

08008b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b12:	b480      	push	{r7}
 8008b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b16:	e7fe      	b.n	8008b16 <HardFault_Handler+0x4>

08008b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b1c:	e7fe      	b.n	8008b1c <MemManage_Handler+0x4>

08008b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b22:	e7fe      	b.n	8008b22 <BusFault_Handler+0x4>

08008b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008b28:	e7fe      	b.n	8008b28 <UsageFault_Handler+0x4>

08008b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008b2e:	bf00      	nop
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b3c:	bf00      	nop
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b46:	b480      	push	{r7}
 8008b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b4a:	bf00      	nop
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b58:	f7f7 fd06 	bl	8000568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b5c:	bf00      	nop
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008b64:	4802      	ldr	r0, [pc, #8]	; (8008b70 <TIM6_DAC_IRQHandler+0x10>)
 8008b66:	f7fb fa43 	bl	8003ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008b6a:	bf00      	nop
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	200002e8 	.word	0x200002e8

08008b74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008b78:	4802      	ldr	r0, [pc, #8]	; (8008b84 <OTG_FS_IRQHandler+0x10>)
 8008b7a:	f7f8 faaf 	bl	80010dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008b7e:	bf00      	nop
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	20001604 	.word	0x20001604

08008b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008b8c:	4b06      	ldr	r3, [pc, #24]	; (8008ba8 <SystemInit+0x20>)
 8008b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b92:	4a05      	ldr	r2, [pc, #20]	; (8008ba8 <SystemInit+0x20>)
 8008b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008b9c:	bf00      	nop
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	e000ed00 	.word	0xe000ed00

08008bac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	4912      	ldr	r1, [pc, #72]	; (8008bfc <MX_USB_DEVICE_Init+0x50>)
 8008bb4:	4812      	ldr	r0, [pc, #72]	; (8008c00 <MX_USB_DEVICE_Init+0x54>)
 8008bb6:	f7fe f85f 	bl	8006c78 <USBD_Init>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bc0:	f7ff fd60 	bl	8008684 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008bc4:	490f      	ldr	r1, [pc, #60]	; (8008c04 <MX_USB_DEVICE_Init+0x58>)
 8008bc6:	480e      	ldr	r0, [pc, #56]	; (8008c00 <MX_USB_DEVICE_Init+0x54>)
 8008bc8:	f7fe f886 	bl	8006cd8 <USBD_RegisterClass>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008bd2:	f7ff fd57 	bl	8008684 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008bd6:	490c      	ldr	r1, [pc, #48]	; (8008c08 <MX_USB_DEVICE_Init+0x5c>)
 8008bd8:	4809      	ldr	r0, [pc, #36]	; (8008c00 <MX_USB_DEVICE_Init+0x54>)
 8008bda:	f7fd ffd7 	bl	8006b8c <USBD_CDC_RegisterInterface>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008be4:	f7ff fd4e 	bl	8008684 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008be8:	4805      	ldr	r0, [pc, #20]	; (8008c00 <MX_USB_DEVICE_Init+0x54>)
 8008bea:	f7fe f89c 	bl	8006d26 <USBD_Start>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008bf4:	f7ff fd46 	bl	8008684 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008bf8:	bf00      	nop
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	20000130 	.word	0x20000130
 8008c00:	20000334 	.word	0x20000334
 8008c04:	20000014 	.word	0x20000014
 8008c08:	2000011c 	.word	0x2000011c

08008c0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c10:	2200      	movs	r2, #0
 8008c12:	4905      	ldr	r1, [pc, #20]	; (8008c28 <CDC_Init_FS+0x1c>)
 8008c14:	4805      	ldr	r0, [pc, #20]	; (8008c2c <CDC_Init_FS+0x20>)
 8008c16:	f7fd ffce 	bl	8006bb6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c1a:	4905      	ldr	r1, [pc, #20]	; (8008c30 <CDC_Init_FS+0x24>)
 8008c1c:	4803      	ldr	r0, [pc, #12]	; (8008c2c <CDC_Init_FS+0x20>)
 8008c1e:	f7fd ffe8 	bl	8006bf2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	20000e04 	.word	0x20000e04
 8008c2c:	20000334 	.word	0x20000334
 8008c30:	20000604 	.word	0x20000604

08008c34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c34:	b480      	push	{r7}
 8008c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	6039      	str	r1, [r7, #0]
 8008c4e:	71fb      	strb	r3, [r7, #7]
 8008c50:	4613      	mov	r3, r2
 8008c52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c54:	79fb      	ldrb	r3, [r7, #7]
 8008c56:	2b23      	cmp	r3, #35	; 0x23
 8008c58:	d84a      	bhi.n	8008cf0 <CDC_Control_FS+0xac>
 8008c5a:	a201      	add	r2, pc, #4	; (adr r2, 8008c60 <CDC_Control_FS+0x1c>)
 8008c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c60:	08008cf1 	.word	0x08008cf1
 8008c64:	08008cf1 	.word	0x08008cf1
 8008c68:	08008cf1 	.word	0x08008cf1
 8008c6c:	08008cf1 	.word	0x08008cf1
 8008c70:	08008cf1 	.word	0x08008cf1
 8008c74:	08008cf1 	.word	0x08008cf1
 8008c78:	08008cf1 	.word	0x08008cf1
 8008c7c:	08008cf1 	.word	0x08008cf1
 8008c80:	08008cf1 	.word	0x08008cf1
 8008c84:	08008cf1 	.word	0x08008cf1
 8008c88:	08008cf1 	.word	0x08008cf1
 8008c8c:	08008cf1 	.word	0x08008cf1
 8008c90:	08008cf1 	.word	0x08008cf1
 8008c94:	08008cf1 	.word	0x08008cf1
 8008c98:	08008cf1 	.word	0x08008cf1
 8008c9c:	08008cf1 	.word	0x08008cf1
 8008ca0:	08008cf1 	.word	0x08008cf1
 8008ca4:	08008cf1 	.word	0x08008cf1
 8008ca8:	08008cf1 	.word	0x08008cf1
 8008cac:	08008cf1 	.word	0x08008cf1
 8008cb0:	08008cf1 	.word	0x08008cf1
 8008cb4:	08008cf1 	.word	0x08008cf1
 8008cb8:	08008cf1 	.word	0x08008cf1
 8008cbc:	08008cf1 	.word	0x08008cf1
 8008cc0:	08008cf1 	.word	0x08008cf1
 8008cc4:	08008cf1 	.word	0x08008cf1
 8008cc8:	08008cf1 	.word	0x08008cf1
 8008ccc:	08008cf1 	.word	0x08008cf1
 8008cd0:	08008cf1 	.word	0x08008cf1
 8008cd4:	08008cf1 	.word	0x08008cf1
 8008cd8:	08008cf1 	.word	0x08008cf1
 8008cdc:	08008cf1 	.word	0x08008cf1
 8008ce0:	08008cf1 	.word	0x08008cf1
 8008ce4:	08008cf1 	.word	0x08008cf1
 8008ce8:	08008cf1 	.word	0x08008cf1
 8008cec:	08008cf1 	.word	0x08008cf1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008cf0:	bf00      	nop
  }

  return (USBD_OK);
 8008cf2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	4805      	ldr	r0, [pc, #20]	; (8008d24 <CDC_Receive_FS+0x24>)
 8008d0e:	f7fd ff70 	bl	8006bf2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d12:	4804      	ldr	r0, [pc, #16]	; (8008d24 <CDC_Receive_FS+0x24>)
 8008d14:	f7fd ff86 	bl	8006c24 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	20000334 	.word	0x20000334

08008d28 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	4613      	mov	r3, r2
 8008d34:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008d3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	371c      	adds	r7, #28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
	...

08008d4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b08a      	sub	sp, #40	; 0x28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d54:	f107 0314 	add.w	r3, r7, #20
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]
 8008d5c:	605a      	str	r2, [r3, #4]
 8008d5e:	609a      	str	r2, [r3, #8]
 8008d60:	60da      	str	r2, [r3, #12]
 8008d62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d6c:	d13a      	bne.n	8008de4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d6e:	2300      	movs	r3, #0
 8008d70:	613b      	str	r3, [r7, #16]
 8008d72:	4b1e      	ldr	r3, [pc, #120]	; (8008dec <HAL_PCD_MspInit+0xa0>)
 8008d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d76:	4a1d      	ldr	r2, [pc, #116]	; (8008dec <HAL_PCD_MspInit+0xa0>)
 8008d78:	f043 0301 	orr.w	r3, r3, #1
 8008d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d7e:	4b1b      	ldr	r3, [pc, #108]	; (8008dec <HAL_PCD_MspInit+0xa0>)
 8008d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	613b      	str	r3, [r7, #16]
 8008d88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d90:	2302      	movs	r3, #2
 8008d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d94:	2300      	movs	r3, #0
 8008d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d9c:	230a      	movs	r3, #10
 8008d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008da0:	f107 0314 	add.w	r3, r7, #20
 8008da4:	4619      	mov	r1, r3
 8008da6:	4812      	ldr	r0, [pc, #72]	; (8008df0 <HAL_PCD_MspInit+0xa4>)
 8008da8:	f7f7 fd34 	bl	8000814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008dac:	4b0f      	ldr	r3, [pc, #60]	; (8008dec <HAL_PCD_MspInit+0xa0>)
 8008dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db0:	4a0e      	ldr	r2, [pc, #56]	; (8008dec <HAL_PCD_MspInit+0xa0>)
 8008db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008db6:	6353      	str	r3, [r2, #52]	; 0x34
 8008db8:	2300      	movs	r3, #0
 8008dba:	60fb      	str	r3, [r7, #12]
 8008dbc:	4b0b      	ldr	r3, [pc, #44]	; (8008dec <HAL_PCD_MspInit+0xa0>)
 8008dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc0:	4a0a      	ldr	r2, [pc, #40]	; (8008dec <HAL_PCD_MspInit+0xa0>)
 8008dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008dc6:	6453      	str	r3, [r2, #68]	; 0x44
 8008dc8:	4b08      	ldr	r3, [pc, #32]	; (8008dec <HAL_PCD_MspInit+0xa0>)
 8008dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dd0:	60fb      	str	r3, [r7, #12]
 8008dd2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	2043      	movs	r0, #67	; 0x43
 8008dda:	f7f7 fce4 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008dde:	2043      	movs	r0, #67	; 0x43
 8008de0:	f7f7 fcfd 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008de4:	bf00      	nop
 8008de6:	3728      	adds	r7, #40	; 0x28
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	40023800 	.word	0x40023800
 8008df0:	40020000 	.word	0x40020000

08008df4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008e08:	4619      	mov	r1, r3
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	f7fd ffd6 	bl	8006dbc <USBD_LL_SetupStage>
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008e2a:	78fa      	ldrb	r2, [r7, #3]
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	00db      	lsls	r3, r3, #3
 8008e32:	1a9b      	subs	r3, r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	440b      	add	r3, r1
 8008e38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	78fb      	ldrb	r3, [r7, #3]
 8008e40:	4619      	mov	r1, r3
 8008e42:	f7fe f810 	bl	8006e66 <USBD_LL_DataOutStage>
}
 8008e46:	bf00      	nop
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b082      	sub	sp, #8
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	460b      	mov	r3, r1
 8008e58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008e60:	78fa      	ldrb	r2, [r7, #3]
 8008e62:	6879      	ldr	r1, [r7, #4]
 8008e64:	4613      	mov	r3, r2
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	1a9b      	subs	r3, r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	440b      	add	r3, r1
 8008e6e:	3348      	adds	r3, #72	; 0x48
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	78fb      	ldrb	r3, [r7, #3]
 8008e74:	4619      	mov	r1, r3
 8008e76:	f7fe f859 	bl	8006f2c <USBD_LL_DataInStage>
}
 8008e7a:	bf00      	nop
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b082      	sub	sp, #8
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fe f96d 	bl	8007170 <USBD_LL_SOF>
}
 8008e96:	bf00      	nop
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d102      	bne.n	8008eb8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	73fb      	strb	r3, [r7, #15]
 8008eb6:	e008      	b.n	8008eca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d102      	bne.n	8008ec6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	73fb      	strb	r3, [r7, #15]
 8008ec4:	e001      	b.n	8008eca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008ec6:	f7ff fbdd 	bl	8008684 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ed0:	7bfa      	ldrb	r2, [r7, #15]
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe f90d 	bl	80070f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fe f8b9 	bl	8007058 <USBD_LL_Reset>
}
 8008ee6:	bf00      	nop
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fe f908 	bl	8007114 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	6812      	ldr	r2, [r2, #0]
 8008f12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f16:	f043 0301 	orr.w	r3, r3, #1
 8008f1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a1b      	ldr	r3, [r3, #32]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d005      	beq.n	8008f30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f24:	4b04      	ldr	r3, [pc, #16]	; (8008f38 <HAL_PCD_SuspendCallback+0x48>)
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	4a03      	ldr	r2, [pc, #12]	; (8008f38 <HAL_PCD_SuspendCallback+0x48>)
 8008f2a:	f043 0306 	orr.w	r3, r3, #6
 8008f2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	e000ed00 	.word	0xe000ed00

08008f3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe f8f8 	bl	8007140 <USBD_LL_Resume>
}
 8008f50:	bf00      	nop
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe f946 	bl	8007200 <USBD_LL_IsoOUTIncomplete>
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	460b      	mov	r3, r1
 8008f86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f8e:	78fa      	ldrb	r2, [r7, #3]
 8008f90:	4611      	mov	r1, r2
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe f90e 	bl	80071b4 <USBD_LL_IsoINIncomplete>
}
 8008f98:	bf00      	nop
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fe f94c 	bl	800724c <USBD_LL_DevConnected>
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe f949 	bl	8007262 <USBD_LL_DevDisconnected>
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d13c      	bne.n	8009062 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008fe8:	4a20      	ldr	r2, [pc, #128]	; (800906c <USBD_LL_Init+0x94>)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a1e      	ldr	r2, [pc, #120]	; (800906c <USBD_LL_Init+0x94>)
 8008ff4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ff8:	4b1c      	ldr	r3, [pc, #112]	; (800906c <USBD_LL_Init+0x94>)
 8008ffa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ffe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009000:	4b1a      	ldr	r3, [pc, #104]	; (800906c <USBD_LL_Init+0x94>)
 8009002:	2204      	movs	r2, #4
 8009004:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009006:	4b19      	ldr	r3, [pc, #100]	; (800906c <USBD_LL_Init+0x94>)
 8009008:	2202      	movs	r2, #2
 800900a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800900c:	4b17      	ldr	r3, [pc, #92]	; (800906c <USBD_LL_Init+0x94>)
 800900e:	2200      	movs	r2, #0
 8009010:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009012:	4b16      	ldr	r3, [pc, #88]	; (800906c <USBD_LL_Init+0x94>)
 8009014:	2202      	movs	r2, #2
 8009016:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009018:	4b14      	ldr	r3, [pc, #80]	; (800906c <USBD_LL_Init+0x94>)
 800901a:	2200      	movs	r2, #0
 800901c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800901e:	4b13      	ldr	r3, [pc, #76]	; (800906c <USBD_LL_Init+0x94>)
 8009020:	2200      	movs	r2, #0
 8009022:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009024:	4b11      	ldr	r3, [pc, #68]	; (800906c <USBD_LL_Init+0x94>)
 8009026:	2200      	movs	r2, #0
 8009028:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800902a:	4b10      	ldr	r3, [pc, #64]	; (800906c <USBD_LL_Init+0x94>)
 800902c:	2200      	movs	r2, #0
 800902e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009030:	4b0e      	ldr	r3, [pc, #56]	; (800906c <USBD_LL_Init+0x94>)
 8009032:	2200      	movs	r2, #0
 8009034:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009036:	480d      	ldr	r0, [pc, #52]	; (800906c <USBD_LL_Init+0x94>)
 8009038:	f7f7 ff00 	bl	8000e3c <HAL_PCD_Init>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009042:	f7ff fb1f 	bl	8008684 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009046:	2180      	movs	r1, #128	; 0x80
 8009048:	4808      	ldr	r0, [pc, #32]	; (800906c <USBD_LL_Init+0x94>)
 800904a:	f7f9 f85e 	bl	800210a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800904e:	2240      	movs	r2, #64	; 0x40
 8009050:	2100      	movs	r1, #0
 8009052:	4806      	ldr	r0, [pc, #24]	; (800906c <USBD_LL_Init+0x94>)
 8009054:	f7f9 f812 	bl	800207c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009058:	2280      	movs	r2, #128	; 0x80
 800905a:	2101      	movs	r1, #1
 800905c:	4803      	ldr	r0, [pc, #12]	; (800906c <USBD_LL_Init+0x94>)
 800905e:	f7f9 f80d 	bl	800207c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	20001604 	.word	0x20001604

08009070 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009086:	4618      	mov	r0, r3
 8009088:	f7f7 fff5 	bl	8001076 <HAL_PCD_Start>
 800908c:	4603      	mov	r3, r0
 800908e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	4618      	mov	r0, r3
 8009094:	f000 f942 	bl	800931c <USBD_Get_USB_Status>
 8009098:	4603      	mov	r3, r0
 800909a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800909c:	7bbb      	ldrb	r3, [r7, #14]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b084      	sub	sp, #16
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	4608      	mov	r0, r1
 80090b0:	4611      	mov	r1, r2
 80090b2:	461a      	mov	r2, r3
 80090b4:	4603      	mov	r3, r0
 80090b6:	70fb      	strb	r3, [r7, #3]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70bb      	strb	r3, [r7, #2]
 80090bc:	4613      	mov	r3, r2
 80090be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090ce:	78bb      	ldrb	r3, [r7, #2]
 80090d0:	883a      	ldrh	r2, [r7, #0]
 80090d2:	78f9      	ldrb	r1, [r7, #3]
 80090d4:	f7f8 fbd9 	bl	800188a <HAL_PCD_EP_Open>
 80090d8:	4603      	mov	r3, r0
 80090da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 f91c 	bl	800931c <USBD_Get_USB_Status>
 80090e4:	4603      	mov	r3, r0
 80090e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	460b      	mov	r3, r1
 80090fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800910c:	78fa      	ldrb	r2, [r7, #3]
 800910e:	4611      	mov	r1, r2
 8009110:	4618      	mov	r0, r3
 8009112:	f7f8 fc22 	bl	800195a <HAL_PCD_EP_Close>
 8009116:	4603      	mov	r3, r0
 8009118:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	4618      	mov	r0, r3
 800911e:	f000 f8fd 	bl	800931c <USBD_Get_USB_Status>
 8009122:	4603      	mov	r3, r0
 8009124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009126:	7bbb      	ldrb	r3, [r7, #14]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800914a:	78fa      	ldrb	r2, [r7, #3]
 800914c:	4611      	mov	r1, r2
 800914e:	4618      	mov	r0, r3
 8009150:	f7f8 fcfa 	bl	8001b48 <HAL_PCD_EP_SetStall>
 8009154:	4603      	mov	r3, r0
 8009156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	4618      	mov	r0, r3
 800915c:	f000 f8de 	bl	800931c <USBD_Get_USB_Status>
 8009160:	4603      	mov	r3, r0
 8009162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009164:	7bbb      	ldrb	r3, [r7, #14]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b084      	sub	sp, #16
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	460b      	mov	r3, r1
 8009178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009188:	78fa      	ldrb	r2, [r7, #3]
 800918a:	4611      	mov	r1, r2
 800918c:	4618      	mov	r0, r3
 800918e:	f7f8 fd3f 	bl	8001c10 <HAL_PCD_EP_ClrStall>
 8009192:	4603      	mov	r3, r0
 8009194:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	4618      	mov	r0, r3
 800919a:	f000 f8bf 	bl	800931c <USBD_Get_USB_Status>
 800919e:	4603      	mov	r3, r0
 80091a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80091c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	da0b      	bge.n	80091e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80091c8:	78fb      	ldrb	r3, [r7, #3]
 80091ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091ce:	68f9      	ldr	r1, [r7, #12]
 80091d0:	4613      	mov	r3, r2
 80091d2:	00db      	lsls	r3, r3, #3
 80091d4:	1a9b      	subs	r3, r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	440b      	add	r3, r1
 80091da:	333e      	adds	r3, #62	; 0x3e
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	e00b      	b.n	80091f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091e6:	68f9      	ldr	r1, [r7, #12]
 80091e8:	4613      	mov	r3, r2
 80091ea:	00db      	lsls	r3, r3, #3
 80091ec:	1a9b      	subs	r3, r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	440b      	add	r3, r1
 80091f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80091f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800921e:	78fa      	ldrb	r2, [r7, #3]
 8009220:	4611      	mov	r1, r2
 8009222:	4618      	mov	r0, r3
 8009224:	f7f8 fb0c 	bl	8001840 <HAL_PCD_SetAddress>
 8009228:	4603      	mov	r3, r0
 800922a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800922c:	7bfb      	ldrb	r3, [r7, #15]
 800922e:	4618      	mov	r0, r3
 8009230:	f000 f874 	bl	800931c <USBD_Get_USB_Status>
 8009234:	4603      	mov	r3, r0
 8009236:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009238:	7bbb      	ldrb	r3, [r7, #14]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b086      	sub	sp, #24
 8009246:	af00      	add	r7, sp, #0
 8009248:	60f8      	str	r0, [r7, #12]
 800924a:	607a      	str	r2, [r7, #4]
 800924c:	603b      	str	r3, [r7, #0]
 800924e:	460b      	mov	r3, r1
 8009250:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009260:	7af9      	ldrb	r1, [r7, #11]
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	f7f8 fc25 	bl	8001ab4 <HAL_PCD_EP_Transmit>
 800926a:	4603      	mov	r3, r0
 800926c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800926e:	7dfb      	ldrb	r3, [r7, #23]
 8009270:	4618      	mov	r0, r3
 8009272:	f000 f853 	bl	800931c <USBD_Get_USB_Status>
 8009276:	4603      	mov	r3, r0
 8009278:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800927a:	7dbb      	ldrb	r3, [r7, #22]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	607a      	str	r2, [r7, #4]
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	460b      	mov	r3, r1
 8009292:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092a2:	7af9      	ldrb	r1, [r7, #11]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	f7f8 fba1 	bl	80019ee <HAL_PCD_EP_Receive>
 80092ac:	4603      	mov	r3, r0
 80092ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092b0:	7dfb      	ldrb	r3, [r7, #23]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 f832 	bl	800931c <USBD_Get_USB_Status>
 80092b8:	4603      	mov	r3, r0
 80092ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3718      	adds	r7, #24
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b082      	sub	sp, #8
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	460b      	mov	r3, r1
 80092d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092d8:	78fa      	ldrb	r2, [r7, #3]
 80092da:	4611      	mov	r1, r2
 80092dc:	4618      	mov	r0, r3
 80092de:	f7f8 fbd1 	bl	8001a84 <HAL_PCD_EP_GetRxCount>
 80092e2:	4603      	mov	r3, r0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80092f4:	4b03      	ldr	r3, [pc, #12]	; (8009304 <USBD_static_malloc+0x18>)
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	20001a0c 	.word	0x20001a0c

08009308 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]

}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	4603      	mov	r3, r0
 8009324:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800932a:	79fb      	ldrb	r3, [r7, #7]
 800932c:	2b03      	cmp	r3, #3
 800932e:	d817      	bhi.n	8009360 <USBD_Get_USB_Status+0x44>
 8009330:	a201      	add	r2, pc, #4	; (adr r2, 8009338 <USBD_Get_USB_Status+0x1c>)
 8009332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009336:	bf00      	nop
 8009338:	08009349 	.word	0x08009349
 800933c:	0800934f 	.word	0x0800934f
 8009340:	08009355 	.word	0x08009355
 8009344:	0800935b 	.word	0x0800935b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73fb      	strb	r3, [r7, #15]
    break;
 800934c:	e00b      	b.n	8009366 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800934e:	2303      	movs	r3, #3
 8009350:	73fb      	strb	r3, [r7, #15]
    break;
 8009352:	e008      	b.n	8009366 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009354:	2301      	movs	r3, #1
 8009356:	73fb      	strb	r3, [r7, #15]
    break;
 8009358:	e005      	b.n	8009366 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800935a:	2303      	movs	r3, #3
 800935c:	73fb      	strb	r3, [r7, #15]
    break;
 800935e:	e002      	b.n	8009366 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009360:	2303      	movs	r3, #3
 8009362:	73fb      	strb	r3, [r7, #15]
    break;
 8009364:	bf00      	nop
  }
  return usb_status;
 8009366:	7bfb      	ldrb	r3, [r7, #15]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	6039      	str	r1, [r7, #0]
 800937e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2212      	movs	r2, #18
 8009384:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009386:	4b03      	ldr	r3, [pc, #12]	; (8009394 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009388:	4618      	mov	r0, r3
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr
 8009394:	2000014c 	.word	0x2000014c

08009398 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	4603      	mov	r3, r0
 80093a0:	6039      	str	r1, [r7, #0]
 80093a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2204      	movs	r2, #4
 80093a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80093aa:	4b03      	ldr	r3, [pc, #12]	; (80093b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	20000160 	.word	0x20000160

080093bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	6039      	str	r1, [r7, #0]
 80093c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093c8:	79fb      	ldrb	r3, [r7, #7]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d105      	bne.n	80093da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	4907      	ldr	r1, [pc, #28]	; (80093f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80093d2:	4808      	ldr	r0, [pc, #32]	; (80093f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80093d4:	f7fe fcd9 	bl	8007d8a <USBD_GetString>
 80093d8:	e004      	b.n	80093e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093da:	683a      	ldr	r2, [r7, #0]
 80093dc:	4904      	ldr	r1, [pc, #16]	; (80093f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80093de:	4805      	ldr	r0, [pc, #20]	; (80093f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80093e0:	f7fe fcd3 	bl	8007d8a <USBD_GetString>
  }
  return USBD_StrDesc;
 80093e4:	4b02      	ldr	r3, [pc, #8]	; (80093f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	20001c2c 	.word	0x20001c2c
 80093f4:	08009658 	.word	0x08009658

080093f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	4603      	mov	r3, r0
 8009400:	6039      	str	r1, [r7, #0]
 8009402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	4904      	ldr	r1, [pc, #16]	; (8009418 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009408:	4804      	ldr	r0, [pc, #16]	; (800941c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800940a:	f7fe fcbe 	bl	8007d8a <USBD_GetString>
  return USBD_StrDesc;
 800940e:	4b02      	ldr	r3, [pc, #8]	; (8009418 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009410:	4618      	mov	r0, r3
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	20001c2c 	.word	0x20001c2c
 800941c:	08009670 	.word	0x08009670

08009420 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	4603      	mov	r3, r0
 8009428:	6039      	str	r1, [r7, #0]
 800942a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	221a      	movs	r2, #26
 8009430:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009432:	f000 f843 	bl	80094bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009436:	4b02      	ldr	r3, [pc, #8]	; (8009440 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009438:	4618      	mov	r0, r3
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	20000164 	.word	0x20000164

08009444 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	6039      	str	r1, [r7, #0]
 800944e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009450:	79fb      	ldrb	r3, [r7, #7]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d105      	bne.n	8009462 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	4907      	ldr	r1, [pc, #28]	; (8009478 <USBD_FS_ConfigStrDescriptor+0x34>)
 800945a:	4808      	ldr	r0, [pc, #32]	; (800947c <USBD_FS_ConfigStrDescriptor+0x38>)
 800945c:	f7fe fc95 	bl	8007d8a <USBD_GetString>
 8009460:	e004      	b.n	800946c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	4904      	ldr	r1, [pc, #16]	; (8009478 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009466:	4805      	ldr	r0, [pc, #20]	; (800947c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009468:	f7fe fc8f 	bl	8007d8a <USBD_GetString>
  }
  return USBD_StrDesc;
 800946c:	4b02      	ldr	r3, [pc, #8]	; (8009478 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20001c2c 	.word	0x20001c2c
 800947c:	08009684 	.word	0x08009684

08009480 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	6039      	str	r1, [r7, #0]
 800948a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800948c:	79fb      	ldrb	r3, [r7, #7]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d105      	bne.n	800949e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	4907      	ldr	r1, [pc, #28]	; (80094b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009496:	4808      	ldr	r0, [pc, #32]	; (80094b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009498:	f7fe fc77 	bl	8007d8a <USBD_GetString>
 800949c:	e004      	b.n	80094a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	4904      	ldr	r1, [pc, #16]	; (80094b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094a2:	4805      	ldr	r0, [pc, #20]	; (80094b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094a4:	f7fe fc71 	bl	8007d8a <USBD_GetString>
  }
  return USBD_StrDesc;
 80094a8:	4b02      	ldr	r3, [pc, #8]	; (80094b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	20001c2c 	.word	0x20001c2c
 80094b8:	08009690 	.word	0x08009690

080094bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094c2:	4b0f      	ldr	r3, [pc, #60]	; (8009500 <Get_SerialNum+0x44>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094c8:	4b0e      	ldr	r3, [pc, #56]	; (8009504 <Get_SerialNum+0x48>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094ce:	4b0e      	ldr	r3, [pc, #56]	; (8009508 <Get_SerialNum+0x4c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4413      	add	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d009      	beq.n	80094f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094e2:	2208      	movs	r2, #8
 80094e4:	4909      	ldr	r1, [pc, #36]	; (800950c <Get_SerialNum+0x50>)
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 f814 	bl	8009514 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80094ec:	2204      	movs	r2, #4
 80094ee:	4908      	ldr	r1, [pc, #32]	; (8009510 <Get_SerialNum+0x54>)
 80094f0:	68b8      	ldr	r0, [r7, #8]
 80094f2:	f000 f80f 	bl	8009514 <IntToUnicode>
  }
}
 80094f6:	bf00      	nop
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	1fff7a10 	.word	0x1fff7a10
 8009504:	1fff7a14 	.word	0x1fff7a14
 8009508:	1fff7a18 	.word	0x1fff7a18
 800950c:	20000166 	.word	0x20000166
 8009510:	20000176 	.word	0x20000176

08009514 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	4613      	mov	r3, r2
 8009520:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009522:	2300      	movs	r3, #0
 8009524:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009526:	2300      	movs	r3, #0
 8009528:	75fb      	strb	r3, [r7, #23]
 800952a:	e027      	b.n	800957c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	0f1b      	lsrs	r3, r3, #28
 8009530:	2b09      	cmp	r3, #9
 8009532:	d80b      	bhi.n	800954c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	0f1b      	lsrs	r3, r3, #28
 8009538:	b2da      	uxtb	r2, r3
 800953a:	7dfb      	ldrb	r3, [r7, #23]
 800953c:	005b      	lsls	r3, r3, #1
 800953e:	4619      	mov	r1, r3
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	440b      	add	r3, r1
 8009544:	3230      	adds	r2, #48	; 0x30
 8009546:	b2d2      	uxtb	r2, r2
 8009548:	701a      	strb	r2, [r3, #0]
 800954a:	e00a      	b.n	8009562 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	0f1b      	lsrs	r3, r3, #28
 8009550:	b2da      	uxtb	r2, r3
 8009552:	7dfb      	ldrb	r3, [r7, #23]
 8009554:	005b      	lsls	r3, r3, #1
 8009556:	4619      	mov	r1, r3
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	440b      	add	r3, r1
 800955c:	3237      	adds	r2, #55	; 0x37
 800955e:	b2d2      	uxtb	r2, r2
 8009560:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	011b      	lsls	r3, r3, #4
 8009566:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009568:	7dfb      	ldrb	r3, [r7, #23]
 800956a:	005b      	lsls	r3, r3, #1
 800956c:	3301      	adds	r3, #1
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	4413      	add	r3, r2
 8009572:	2200      	movs	r2, #0
 8009574:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009576:	7dfb      	ldrb	r3, [r7, #23]
 8009578:	3301      	adds	r3, #1
 800957a:	75fb      	strb	r3, [r7, #23]
 800957c:	7dfa      	ldrb	r2, [r7, #23]
 800957e:	79fb      	ldrb	r3, [r7, #7]
 8009580:	429a      	cmp	r2, r3
 8009582:	d3d3      	bcc.n	800952c <IntToUnicode+0x18>
  }
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop
 8009588:	371c      	adds	r7, #28
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
	...

08009594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80095cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009598:	480d      	ldr	r0, [pc, #52]	; (80095d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800959a:	490e      	ldr	r1, [pc, #56]	; (80095d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800959c:	4a0e      	ldr	r2, [pc, #56]	; (80095d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800959e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80095a0:	e002      	b.n	80095a8 <LoopCopyDataInit>

080095a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80095a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80095a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80095a6:	3304      	adds	r3, #4

080095a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80095a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80095aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80095ac:	d3f9      	bcc.n	80095a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80095ae:	4a0b      	ldr	r2, [pc, #44]	; (80095dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80095b0:	4c0b      	ldr	r4, [pc, #44]	; (80095e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80095b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80095b4:	e001      	b.n	80095ba <LoopFillZerobss>

080095b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80095b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80095b8:	3204      	adds	r2, #4

080095ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80095ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80095bc:	d3fb      	bcc.n	80095b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80095be:	f7ff fae3 	bl	8008b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80095c2:	f000 f819 	bl	80095f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80095c6:	f7fe fdbd 	bl	8008144 <main>
  bx  lr    
 80095ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80095cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80095d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80095d4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80095d8:	080096dc 	.word	0x080096dc
  ldr r2, =_sbss
 80095dc:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80095e0:	20001e2c 	.word	0x20001e2c

080095e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80095e4:	e7fe      	b.n	80095e4 <ADC_IRQHandler>

080095e6 <memset>:
 80095e6:	4402      	add	r2, r0
 80095e8:	4603      	mov	r3, r0
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d100      	bne.n	80095f0 <memset+0xa>
 80095ee:	4770      	bx	lr
 80095f0:	f803 1b01 	strb.w	r1, [r3], #1
 80095f4:	e7f9      	b.n	80095ea <memset+0x4>
	...

080095f8 <__libc_init_array>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	4d0d      	ldr	r5, [pc, #52]	; (8009630 <__libc_init_array+0x38>)
 80095fc:	4c0d      	ldr	r4, [pc, #52]	; (8009634 <__libc_init_array+0x3c>)
 80095fe:	1b64      	subs	r4, r4, r5
 8009600:	10a4      	asrs	r4, r4, #2
 8009602:	2600      	movs	r6, #0
 8009604:	42a6      	cmp	r6, r4
 8009606:	d109      	bne.n	800961c <__libc_init_array+0x24>
 8009608:	4d0b      	ldr	r5, [pc, #44]	; (8009638 <__libc_init_array+0x40>)
 800960a:	4c0c      	ldr	r4, [pc, #48]	; (800963c <__libc_init_array+0x44>)
 800960c:	f000 f818 	bl	8009640 <_init>
 8009610:	1b64      	subs	r4, r4, r5
 8009612:	10a4      	asrs	r4, r4, #2
 8009614:	2600      	movs	r6, #0
 8009616:	42a6      	cmp	r6, r4
 8009618:	d105      	bne.n	8009626 <__libc_init_array+0x2e>
 800961a:	bd70      	pop	{r4, r5, r6, pc}
 800961c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009620:	4798      	blx	r3
 8009622:	3601      	adds	r6, #1
 8009624:	e7ee      	b.n	8009604 <__libc_init_array+0xc>
 8009626:	f855 3b04 	ldr.w	r3, [r5], #4
 800962a:	4798      	blx	r3
 800962c:	3601      	adds	r6, #1
 800962e:	e7f2      	b.n	8009616 <__libc_init_array+0x1e>
 8009630:	080096d4 	.word	0x080096d4
 8009634:	080096d4 	.word	0x080096d4
 8009638:	080096d4 	.word	0x080096d4
 800963c:	080096d8 	.word	0x080096d8

08009640 <_init>:
 8009640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009642:	bf00      	nop
 8009644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009646:	bc08      	pop	{r3}
 8009648:	469e      	mov	lr, r3
 800964a:	4770      	bx	lr

0800964c <_fini>:
 800964c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964e:	bf00      	nop
 8009650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009652:	bc08      	pop	{r3}
 8009654:	469e      	mov	lr, r3
 8009656:	4770      	bx	lr
